Definitly for Acorn 0.4:

  Implement ranges.
  Fully implement propper range checking for broadcast operations, instead
  if the primitive implementation currently in place.
  Add handling of Appearance operations to BaseMind.

  Implement loading the same map as the client.

  Sort out setting of bounding boxes on objects, particularly objects
  of similar type with varying shape such as buildings.

  Sort out collision detection wrt moving alongside an object in close
  proximity, and add CD for two moving objects.

  Sort out collision prediction between two moving entities. Current problem
  is that it is not possible to tell when movement started, and thus get
  correct starting position for the movement.

  Use drunkness.

  Use combine operation to deal with making more than one object into one.

  Fully implement stackable objects.

  Replace
    o = new Operation(); *o = Operation::Instantiate();
  with
    o = new Opertion(Operation::Instantiate());
  cos it is about twice as quick.

  In movement code, if target_ref is set, once target is achieved, change
  the ref of the character, and recalculate its coords, then carry on the
  movement.

Provisional for Acorn 0.4:

  Implement accelerated Atlas Objects API. MAYBE: POSTPONE!

Required for werewolf:

  Implement calendric time using WorldTime and DateTime classes, so nighttime
  and moons are properlly handled.

  Implement sleeping.

Possible ideas:

  Try out optimisations such as -funroll_loops -fstrict_aliasing -ffast_math
  -mx86. Consider a custom python interpreter build.

  Add fully featured database persistance.
