dnl Initialise autoconf

AC_INIT()
AM_CONFIG_HEADER(config.h)

dnl Initialise automake

VERSION=0.2.1

AM_INIT_AUTOMAKE(cyphesis, $VERSION)

dnl check if user wishes maintainer-mode ("--enable-maintainer-mode = yes")
AM_MAINTAINER_MODE

AC_ARG_PROGRAM

dnl Need libtool

AC_DISABLE_STATIC
AC_PROG_LIBTOOL

dnl Test for C++ compiler

AC_PROG_CXX

AC_ARG_ENABLE(debug,
    [  --enable-debug          enable debug information [default=no]],
    [
        if test "$enableval" = "yes"; then
            CXXFLAGS="$CXXFLAGS -Wall -DDEBUG"
        else
            CXXFLAGS="$CXXFLAGS -Wall -DNDEBUG"
        fi
    ],[
        CXXFLAGS="$CXXFLAGS -Wall -DNDEBUG"
    ]
)

AC_LANG_CPLUSPLUS
AC_REQUIRE_CPP

dnl Flags that are required by programs linking against libcyphesis
SYSTEM_LIBS=
CYPHESIS_LIBS=-lcyphesis
CYPHESIS_CFLAGS=
CYPHESIS_VERSION=$VERSION

AC_CHECK_FUNCS([sigset sigaction])

AC_CHECK_FUNC(cos,,[AC_CHECK_LIB(m,cos)])

dnl Test for WorldForge Atlas Libraries

dnl a general directory where worldforge related libs have been installed
dnl
AC_ARG_WITH(worldforge,
    [ --with-worldforge=DIR directory where worldforge libs are installed ],
    [
        worldforgedir=$withval
        CPPFLAGS="$CPPFLAGS -I${worldforgedir}/include"
        LIBS="$LIBS -L${worldforgedir}/lib"
    ]
)

dnl allow the user to provide the directory where python is installed in
dnl
AC_CACHE_CHECK(for location of python, python_prefix,
[
    python_prefix=/usr
    AC_ARG_WITH(python,
    [ --with-python=DIR directory python is installed in [default=/usr]],
    [
        if test $withval != yes; then
            python_prefix=$withval
        fi
    ])
])

dnl then check for the header file Python.h and set
dnl python_include_path and python_version
dnl appropriately to what we have found
dnl
dnl if found define HAVE_PYTHON_H
dnl

AC_CHECK_HEADER(python2.3/Python.h,
[
    python_include_path=-I${python_prefix}/include/python2.3
    python_version=python2.3
],[
    AC_CHECK_HEADER(python2.2/Python.h,
    [
        python_include_path=-I${python_prefix}/include/python2.2
        python_version=python2.2
    ],[
        AC_CHECK_HEADER(python2.1/Python.h,
        [
            python_include_path=-I${python_prefix}/include/python2.1
            python_version=python2.1
        ],[
            AC_CHECK_HEADER(python2.0/Python.h,
            [
                python_include_path=-I${python_prefix}/include/python2.0
                python_version=python2.0
            ],[
                AC_CHECK_HEADER(python1.6/Python.h, 
                [
                    python_include_path=-I${python_prefix}/include/python1.6
                    python_version=python1.6
                ],[
                    AC_CHECK_HEADER(python1.5/Python.h, 
                    [
                        python_include_path=-I${python_prefix}/include/python1.5
                        python_version=python1.5
                    ],AC_MSG_ERROR([Couldn't find python headers. Do you have python development installed?]))
                ])
            ])
        ])
    ])
])

PYTHON_INCLUDES=${python_include_path}
CPPFLAGS="$CPPFLAGS $PYTHON_INCLUDES"

dnl build the library path from the found version
python_lib_path=${python_prefix}/lib/${python_version}/config

AC_CHECK_LIB(dl,dlopen)
AC_CHECK_LIB(pthread,pthread_create)
AC_CHECK_LIB(util,openpty)

AC_CHECK_LIB(${python_version}, 
    Py_Initialize,
    [
        python_libs="-L${python_lib_path} -l${python_version}"
    ],AC_MSG_ERROR([Couldn't find python libraries. Do you have python development installed]),
    [-L${python_lib_path}]
)

PYTHON_LIBS=${python_libs}
LIBS="$LIBS $PYTHON_LIBS"

PKG_CHECK_MODULES(ATLAS, atlascpp-0.4 >= 0.4.4,
    [
        CPPFLAGS="$CPPFLAGS $ATLAS_CFLAGS"
        CYPHESIS_CFLAGS="$CYPHESIS_CFLAGS $ATLAS_CFLAGS"
        LIBS="$LIBS $ATLAS_LIBS"
        SYSTEM_LIBS="$SYSTEM_LIBS $ATLAS_LIBS"
    ],
    [
        AM_PATH_ATLAS("0.4.4",[
                if test "$ATLAS_CFLAGS" != "-I/usr/include"; then
                    CPPFLAGS="$CPPFLAGS $ATLAS_CFLAGS"
                    CYPHESIS_CFLAGS="$CYPHESIS_CFLAGS $ATLAS_CFLAGS"
                fi
                LIBS="$LIBS $ATLAS_LIBS"
                SYSTEM_LIBS="$SYSTEM_LIBS $ATLAS_LIBS"
            ],
                AC_MSG_ERROR(Cannot find valid version of Atlas-C++)
        )
    ])

PKG_CHECK_MODULES(SKSTREAM, skstream-0.2 >= 0.2.4,
    [
        CPPFLAGS="$CPPFLAGS $SKSTREAM_CFLAGS"
        LIBS="$LIBS $SKSTREAM_LIBS"
        SYSTEM_LIBS="$SYSTEM_LIBS $SKSTREAM_LIBS"
    ],
    [
        SKSTREAM_VERSION=0.2.4
        AM_PATH_SKSTREAM("0.2.4",[
                if test "$SKSTREAM_CFLAGS" != "-I/usr/include"; then
                    CPPFLAGS="$CPPFLAGS $SKSTREAM_CFLAGS"
                fi
                LIBS="$LIBS $SKSTREAM_LIBS"
            ],
                AC_MSG_ERROR(Cannot find valid version of skstream)
        )
    ])

PKG_CHECK_MODULES(VARCONF, varconf-1.0 >= 0.6.0,
    [
        CPPFLAGS="$CPPFLAGS $VARCONF_CFLAGS"
        CYPHESIS_CFLAGS="$CYPHESIS_CFLAGS $VARCONF_CFLAGS"
        LIBS="$LIBS $VARCONF_LIBS"
        SYSTEM_LIBS="$SYSTEM_LIBS $VARCONF_LIBS"
    ],
    [
        AM_PATH_VARCONF("0.5.3", [
                if test "$VARCONF_CFLAGS" != "-I/usr/include"; then
                    CPPFLAGS="$CPPFLAGS $VARCONF_CFLAGS"
                    CYPHESIS_CFLAGS="$CYPHESIS_CFLAGS $VARCONF_CFLAGS"
                fi
                LIBS="$LIBS $VARCONF_LIBS"
                SYSTEM_LIBS="$SYSTEM_LIBS $VARCONF_LIBS"
            ],
                AC_MSG_ERROR([Couldn't find varconf library!])
        )

        AM_PATH_SIGC(1.0.3,[
                CPPFLAGS="$CPPFLAGS $SIGC_CFLAGS"
                CYPHESIS_CFLAGS="$CYPHESIS_CFLAGS $SIGC_CFLAGS"
                LIBS="$LIBS $SIGC_LIBS"
                SYSTEM_LIBS="$SYSTEM_LIBS $SIGC_LIBS"
            ],
                AC_MSG_ERROR([Couldn't find sigc++ library!])
        )
    ])

AM_PATH_PSQL(7.1.0,
    [
        if test "$PG_CFLAGS" != "-I/usr/include"; then
            CPPFLAGS="$CPPFLAGS $PG_CFLAGS"
            CYPHESIS_CFLAGS="$CYPHESIS_CFLAGS $PG_CFLAGS"
        fi
        if test "$PG_LIBS" != "-L/usr/lib"; then
            LIBS="$LIBS $PG_LIBS"
            SYSTEM_LIBS="$SYSTEM_LIBS $PG_LIBS"
        fi
    ],
    AC_MSG_ERROR(Couldn't find PostgreSQL config [or config failed])
)

AC_CHECK_LIB(pq,PQconnectdb, ,AC_MSG_ERROR(Couldn't find PostgreSQL bindings! [Have you installed the PostgreSQL development software]))

SYSTEM_LIBS="$SYSTEM_LIBS -lpq"

READLINE_LIBS=

AC_CHECK_LIB(termcap,tgetent, 
    [READLINE_LIBS="$READLINE_LIBS -ltermcap"],
    AC_CHECK_LIB(ncurses, tgetent, 
        [READLINE_LIBS="$READLINE_LIBS -lncurses"],
        AC_MSG_ERROR([Couldn't find tgetent in termcap or ncurses libraries!])
    )
)

AC_CHECK_HEADERS(termios.h unistd.h signal.h)
AC_CHECK_LIB(readline,readline,
    [
        READLINE_LIBS="$READLINE_LIBS -lreadline"
    ],
    [
        AC_MSG_ERROR([Couldn'y find readline!])
    ],[ $READLINE_LIBS ]
)
    
AC_TRY_COMPILE(
  [
    #include <stdio.h>
    #include <readline/readline.h>
  ],
    readline("test > "), 
    AC_DEFINE(READLINE_CXX_SANE, 1, [Define if readline headers are C++ aware]),
    AC_MSG_WARN(Readline C++ workaround enabled)
)


AC_SUBST(VARCONF_LIBS)
AC_SUBST(SYSTEM_LIBS)
AC_SUBST(READLINE_LIBS)
AC_SUBST(CYPHESIS_CFLAGS)
AC_SUBST(CYPHESIS_LIBS)
AC_SUBST(CYPHESIS_VERSION)

dnl Generate files
AC_OUTPUT([
    cyphesis.spec
    cyphesis-config
    Makefile
    physics/Makefile
    common/Makefile
    modules/Makefile
    rulesets/Makefile
    server/Makefile
    client/Makefile
    tools/Makefile
], [chmod +x cyphesis-config])
