dnl Initialise autoconf

AC_INIT()
AM_CONFIG_HEADER(config.h)

dnl Initialise automake

dnl The date should be updated for each commit. Public servers running 
dnl modified code should put something else on the end of the version.
dnl Release version will not have a trailing date at all.
VERSION=0.1.90

AM_INIT_AUTOMAKE(cyphesis, $VERSION)

dnl check if user wishes maintainer-mode ("--enable-maintainer-mode = yes")
AM_MAINTAINER_MODE

AC_ARG_PROGRAM

dnl Need libtool

AM_PROG_LIBTOOL
AC_PROG_LIBTOOL

dnl Test for C++ compiler

AC_PROG_CXX

AC_ARG_ENABLE(debug,
    [  --enable-debug          enable debug information [default=no]],
    [
        if test "$enableval" = "yes"; then
            CXXFLAGS="$CXXFLAGS -Wall -DDEBUG"
        else
            CXXFLAGS="$CXXFALGS -Wall -DNDEBUG"
        fi
    ],[
        CXXFLAGS="$CXXFALGS -Wall -DNDEBUG"
    ]
)

dnl FIXME This will break if $datadir != $prefix/share
RULESET_DIR="$prefix/share/cyphesis"
AC_SUBST(RULESET_DIR)

AC_CHECK_FUNC(cos,,[AC_CHECK_LIB(m,cos)])

dnl Test for WorldForge Atlas Libraries

AC_LANG_CPLUSPLUS
AC_REQUIRE_CPP

dnl a general directory where worldforge related libs have been installed
dnl
AC_ARG_WITH(worldforge,
    [ --with-worldforge=DIR directory where worldforge libs are installed ],
    [
        worldforgedir=$withval
        CPPFLAGS="$CPPFLAGS -I${worldforgedir}/include"
        LIBS="$LIBS -L${worldforgedir}/lib"
    ]
)

dnl allow the user to provide the directory where python is installed in
dnl
AC_CACHE_CHECK(for location of python, python_prefix,
[
    python_prefix=/usr
    AC_ARG_WITH(python,
    [ --with-python=DIR directory python is installed in [default=/usr]],
    [
        if test $withval != yes; then
            python_prefix=$withval
        fi
    ])
])

dnl then check for the header file Python.h and set
dnl python_include_path and python_version
dnl appropriately to what we have found
dnl
dnl if found define HAVE_PYTHON_H
dnl

AC_CHECK_HEADER(python2.2/Python.h,
    [
	python_include_path=-I${python_prefix}/include/python2.2
	python_version=python2.2
	AC_DEFINE(HAVE_PYTHON_H)
    ],
  [AC_CHECK_HEADER(python2.1/Python.h,
    [
        python_include_path=-I${python_prefix}/include/python2.1
        python_version=python2.1
        AC_DEFINE(HAVE_PYTHON_H)
    ],[
        AC_CHECK_HEADER(python2.0/Python.h,
        [
            python_include_path=-I${python_prefix}/include/python2.0
            python_version=python2.0
            AC_DEFINE(HAVE_PYTHON_H)
        ],[
            AC_CHECK_HEADER(python1.6/Python.h, 
            [
                python_include_path=-I${python_prefix}/include/python1.6
                python_version=python1.6
                AC_DEFINE(HAVE_PYTHON_H)
            ],[
                AC_CHECK_HEADER(python1.5/Python.h, 
                [
                    python_include_path=-I${python_prefix}/include/python1.5
                    python_version=python1.5
                    AC_DEFINE(HAVE_PYTHON_H)
                ])
            ])
        ])
    ]
  )]
)


PYTHON_INCLUDES=${python_include_path}
CPPFLAGS="$CPPFLAGS $PYTHON_INCLUDES"
AC_SUBST(PYTHON_INCLUDES)

dnl build the library path from the found version
python_lib_path=${python_prefix}/lib/${python_version}/config

AC_CHECK_LIB(dl,dlopen)
AC_CHECK_LIB(pthread,pthread_create)

AC_CHECK_LIB(${python_version}, 
    Py_Initialize,
    [
        python_libs="-L${python_lib_path} -l${python_version} -lutil"	  
        AC_DEFINE(HAVE_PYTHON_LIB)
    ],,
    [-L${python_lib_path} -lutil]
)

PYTHON_LIBS=${python_libs}
LIBS="$LIBS $PYTHON_LIBS"
AC_SUBST(PYTHON_LIBS)

ATLAS_VERSION=0.4.3
AM_PATH_ATLAS($ATLAS_VERSION)
if test "$ATLAS_CFLAGS" != "-I/usr/include"; then
    CPPFLAGS="$CPPFLAGS $ATLAS_CFLAGS"
fi
LIBS="$LIBS $ATLAS_LIBS"

VARCONF_VERSION=0.5.0
AM_PATH_VARCONF($VARCONF_VERSION)
if test "$VARCONF_CFLAGS" != "-I/usr/include"; then
    CPPFLAGS="$CPPFLAGS $VARCONF_CFLAGS"
fi
LIBS="$LIBS $VARCONF_LIBS"

SKSTREAM_VERSION=0.2.0
AM_PATH_SKSTREAM($SKSTREAM_VERSION)
if test "$SKSTREAM_CFLAGS" != "-I/usr/include"; then
    CPPFLAGS="$CPPFLAGS $SKSTREAM_CFLAGS"
fi
LIBS="$LIBS $SKSTREAM_LIBS"

AM_PATH_SIGC(1.0.2,
    [
        CPPFLAGS="$CPPFLAGS $SIGC_CFLAGS"
        LIBS="$LIBS $SIGC_LIBS"
    ],
    AC_MSG_ERROR(Couldn't find libsigc++ config [or config failed])
)

AM_PATH_PSQL(7.1.0,
    [
        if test "$PG_CFLAGS" != "-I/usr/include"; then
            CPPFLAGS="$CPPFLAGS $PG_CFLAGS"
        fi
        if test "$PG_LIBS" != "-L/usr/lib"; then
            LIBS="$LIBS $PG_LIBS"
        fi
    ],
    AC_MSG_ERROR(Couldn't find PostgreSQL config [or config failed])
)

AC_CHECK_LIB(pq,main, ,AC_MSG_ERROR(Couldn't find PostgreSQL C bindings! [Did you compile PostgreSQL with --enable-CXX ?]))
AC_CHECK_LIB(pq++,main, ,AC_MSG_ERROR(Couldn't find PostgreSQL C++ bindings! [Did you compile PostgreSQL with --enable-CXX ?]))

AC_CHECK_LIB(termcap,tgetent, 
    [LIBS="$LIBS -ltermcap"],
    AC_CHECK_LIB(ncurses, tgetent, 
        [LIBS="$LIBS -lncurses"],
        AC_MSG_ERROR([Couldn't find tgetent in termcap or ncurses libraries!])
    )
)

AC_CHECK_HEADERS(termios.h unistd.h signal.h)
AC_CHECK_LIB(readline,readline,
    [
        LIBS="$LIBS -lreadline"
    ],
    [
        AC_MSG_ERROR([Couldn'y find readline!])
    ])
    
AC_TRY_COMPILE([#include <readline/readline.h>], readline("test > "), AC_DEFINE(READLINE_CXX_SANE),
  AC_MSG_WARN(Readline C++ workaround enabled) )

dnl Generate files
AC_OUTPUT([
    cyphesis.spec
    Makefile
    physics/Makefile
    common/Makefile
    modules/Makefile
    rulesets/Makefile
    server/Makefile
    client/Makefile
    tools/Makefile
    rulesets/basic/hooks/ruleset_import_hooks.py
])
