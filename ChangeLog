2005-11-11  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.h, common/OOGThing.cpp, common/OOGThing.h,
	  server/Account.cpp, server/Account.h, server/Admin.cpp,
	  server/Admin.h, server/Connection.cpp, server/ExternalMind.cpp,
	  server/ExternalMind.h, server/Lobby.cpp, server/Lobby.h,
	  server/Peer.cpp, server/Persistance.cpp, server/Player.cpp,
	  server/Player.h, server/ServerRouting.cpp,
	  server/SlaveClientConnection.cpp, server/server.cpp:
	  Add integer ID handling to accounts, and some other OOG
	  objects.

2005-11-11  Al Riddoch  <alriddoch@zepler.org>

	* cyphesis.init: Don't commit without checking with me first.

2005-11-11  Kai Blin  <blin@gmx.net>

	* cyphesis.init: replaced a hardcoded reference to the postgres user
	  by the $POSTGRESUSER variable

2005-11-11  Al Riddoch  <alriddoch@zepler.org>

	* common/types.h, server/Persistance.h, common/BaseWorld.h,
	  common/BaseWorld.cpp, server/WorldRouter.cpp:
	  Switch core world map to reference by integer ID rather than string.
	  Add version of getEntity() which converts from string to integer
	  automatically.

	* rulesets/Character.cpp, rulesets/Thing.cpp, rulesets/World.cpp,
	  server/EntityFactory.cpp, 
	  Use getEntity() when looking up an entity, so that conversion of
	  ID from string to integer is automatic.

	* rulesets/BaseMind.cpp, rulesets/MemMap.cpp, rulesets/MemMap.h:
	  Switch to using integer IDs in MemMap's core mapping.

	* server/Account.cpp, server/Account.h: Switch a few function
	  parameters to use integer ID values, making the code cleaner.

	* server/Account.cpp, server/Admin.cpp, server/Persistance.cpp:
	  Handle string ID to integer conversions as required.

2005-11-10  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.h, common/BaseEntity.cpp: Add an integer ID
	  member variable, and accessor, and require it to be initialised
	  along with string ID in constructor.

	* common/const.cpp, common/const.h: Add a const for the integer value
	  of the world ID.

	* rulesets/Area.cpp, rulesets/Area.h, rulesets/BaseMind.cpp,
	  rulesets/BaseMind.h, rulesets/Character.cpp, rulesets/Character.h,
	  rulesets/Creator.cpp, rulesets/Creator.h, rulesets/Entity.cpp,
	  rulesets/Entity.h, rulesets/Food.cpp, rulesets/Food.h,
	  rulesets/Line.cpp, rulesets/Line.h, rulesets/MemEntity.cpp,
	  rulesets/MemEntity.h, rulesets/Plant.cpp, rulesets/Plant.h,
	  rulesets/Stackable.cpp, rulesets/Stackable.h, rulesets/Structure.cpp,
	  rulesets/Structure.h, rulesets/Thing.cpp, rulesets/Thing.h,
	  rulesets/World.cpp, rulesets/World.h: Add integer ID handling to
	  constructors of all in-game entity classes.

	* rulesets/MemMap.cpp: Initialise integer ID of entities in the mind
	  map.

	* rulesets/MindFactory.cpp, rulesets/MindFactory.h: Handle integer
	  ID when constructing mind objects.

	* server/EntityFactory.cpp, server/EntityFactory.h,
	  server/PersistantThingFactory_impl.h: Handle integer
	  ID when contructing entity objects.

	* server/Restoration.cpp, server/Restoration.h, server/Restorer.h,
	  server/Restorer_impl.h: Handle integer ID when restoring from
	  database.

	* server/WorldRouter.cpp: Assign integer ID when constructing the
	  world.

2005-11-10  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseWorld.h: Remove obsolete ID member variable.

2005-11-10  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Statistics.h: Add comments clarifying use of references
	  in this class.

2005-11-09  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Combat.cpp: Use Entity::sendWorld() to ensure that
	  notification of victory or defeat appear to come from the world
	  rather than one of the combatants.

2005-11-09  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.cpp, common/BaseEntity.h: Add a new method which
	  generates an error operation without creating an log entry.

	* server/Connection.cpp: Report routine client errors, like
	  login failure using the new error method, so they no longer
	  create high priority log messages.

2005-11-02  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Prevent clients and minds for using
	  FUTURE_SECONDS on ops other than tick. Remove all handling
	  of FUTURE_SECONDS when processing move ops from clients and minds.

2005-11-02  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/NPCMind.py: Don't respond to knowledge
	  queries if the character has no knowledge.

	* server/Connection.cpp, rulesets/Creator.cpp, rulesets/Character.cpp:
	  Use flag check to see if operations have FROM set, rather than
	  checking for an empty string.

	* rulesets/Thing.cpp: When handling move ops, avoid lookup of LOC
	  in world unless it has changed.

2005-10-25  Al Riddoch  <alriddoch@zepler.org>

	* cyphesis.spec.in: Fix dependency on Atlas-C++06

	* Release 0.5.2

2005-10-24  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Immobilise character if they have no stamina.

	* configure.ac, NEWS: Increment version and update news.

	* TODO: Remove done TODO items.

2005-10-24  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Combat.cpp: Modify win condition check, so it occurs at
	  the end of tick. Send notification to winner and loser of combat
	  using faked Talk ops. Make the loser lose a little health.

2005-10-23  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Report an error if m_task becomes null
	  while processing a task tick op.

	* rulesets/Combat.cpp: Remove debug output.

	* rulesets/Statistics.cpp: Remove debug output.

2005-10-22  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Cache value of std::list::end() to avoid
	  expensive return by value in every loop iteration. Add some comments
	  about obsolete getoperationFromQueue() function.

2005-10-21  Al Riddoch  <alriddoch@zepler.org>

	* physics/BBox.cpp: Re-code squareBoxSize() to be much more efficient.

	* server/CommServer.cpp: Don't report "Interrupted System Call" as
	  an error from epoll_wait, as its always happening.

	* tools/Makefile.am: Add pthread library to static link libs for
	  database using tools.

2005-10-21  Al Riddoch  <alriddoch@zepler.org>

	* physics/Vector3D.cpp: Replace the seriously inefficient
	  implementation of squareDistance() with one that should perform
	  a bit better.

2005-10-21  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Pedestrian.cpp, rulesets/Movement.h, rulesets/Movement.cpp:
	  Store the time of the last collision, and if the next one occurs
	  almost immediatly, stop the movement. This eliminates the judder
	  which used to occur in some nasty collision scenarios.

2005-10-21  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.h, server/WorldRouter.cpp: Add a second op
	  queue for ops which do not have a time specified, so it is
	  cheaper to add ops to the queue if they are to be dispatched
	  immediatly.

2005-10-20  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp, rulesets/Creator.cpp: Modify operations
	  in place rather than copying first in the mind operation interface
	  as this should be much more efficient.

2005-10-20  Al Riddoch  <alriddoch@zepler.org>

	* server/CommClient.cpp: Store serialno from clients, to make sure
	  its not being read from the op after it has been given to
	  the core server code.

2005-10-20  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Report a warning when action ops are sent
	  from client or mind code.

	* rulesets/Py_Location.cpp: Allow invalid vectors to be used
	  to set attributes on Location.

	* rulesets/acorn/world/objects/undead/Skeleton.py,
	  rulesets/mason/world/objects/undead/Skeleton.py: Remove action
	  ops replacing them with setting MODE of skeleton to
	  collapsed.

	* rulesets/basic/mind/NPCMind.py,
	  rulesets/basic/mind/goals/common/misc_goal.py: Use Imaginary ops
	  rather than Action for emotes.

2005-10-20  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Audit all mindFooOperation() methods, to
	  ensure operations from the mind or client code are handled in
	  a correct and consistant manner. Improve comments documenting
	  the mind operation interface.

	* rulesets/Entity.cpp: Add comments documenting how externalOperation
	  should be used.

2005-10-20  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.h: Add an assert to ensure reference counting
	  is bug free.

	* server/WorldRouter.cpp: When delivering ops, check if the op
	  is to the same entity it is from, which avoids looking up
	  the ID in the world dictionary.

2005-10-19  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/NPCMind.py: Fix face() so that NPC doesn't crash
	  if it turns to face something that is zero distance away.

	* server/EntityFactory.cpp: Improve error reporting when an entity
	  has velocity set at creation, and ensure that the velocity is
	  unset before the entity goes into the world.

2005-10-19  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Task.h: Make irrelevant() virtual so that each task
	  class is responsible for doing most of its cleanup.

	* rulesets/Movement.h: Make updateNeeded() public so other code
	  can determine if a character is moving.

	* rulesets/Character.h, rulesets/Character.cpp: Add a stamina property.
	  Add clearTask() used to clear the current running task. Check
	  if tasks are irrelevant immediatly after setup, or after each
	  tick, and remove if they are.

	* rulesets/Combat.h: Add irrelevant() implementation, and a static
	  variable defining stamina level below which combat cannot occur.

	* rulesets/Combat.cpp: Switch to stamina as the base stat for
	  combat. Implement checking stamina at setup to ensure
	  both combatants are fit to fight, and each tick to determine if
	  someone has lost.

2005-10-18  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Fix handling of Touch op so it now
	  returns a Sight(Touch) rather than an Action op to indicate
	  what has occured.

	* common/custom.cpp: Fix inheritance of Attack op to Action.

	* TODO: Add a note about optimising the mind operation interface.

2005-10-18  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Statistics.cpp: Fix logic for incrementing existing
	  skills, and debug output for determining whether the change
	  should be passed to the user.

2005-10-16  Al Riddoch  <alriddoch@zepler.org>

	* README: Regenerate from source.

	* TODO: Add note describing eventual goals of statistics system.

2005-10-16  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Combat.cpp: Fill out handler for combat, adding
	  ops which apply damage to defender, and using statistics
	  to handle combat ability.

2005-10-16  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp, rulesets/Character.h: Add a Statistics
	  objects as a member variable of Character, and use it to
	  determine if a character is strong enough to move other
	  entities.

2005-10-16  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_RootEntity.cpp: Add comments about leaked python objects.

2005-10-16  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Statistics.cpp, rulesets/Statistics.h: Add class to
	  handle skill statistics for characters.

2005-10-16  Al Riddoch  <alriddoch@zepler.org>

	* common/random.h: Make uniform() random function inlined.

2005-10-16  Al Riddoch  <alriddoch@zepler.org>

	* man/cyphesis-tools.sgml, man/cyphesis.sgml: Fix some typos on
	  the man pages.

2005-10-16  Al Riddoch  <alriddoch@zepler.org>

	* server/CommClient.h, server/CommClient.cpp: Check stream has not
	  failed before sending ops, to ensure that failed sockets are
	  cleared promptly. Check fail() in addition to eof() to ensure
	  that failed connections are detected when reading.

2005-10-12  Al Riddoch  <alriddoch@zepler.org>

	* common/Makefile.am, server/Makefile.am, tools/Makefile.am:
	  Add top_builddir to the include paths to catch config.h.

2005-10-12  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Add nostdinc option, to get rid of unnecessary
	  -I options on the compile commandlines.

2005-10-11  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Task.h: Add required <cassert> include.

2005-10-10  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Combat.h, rulesets/Combat.cpp: More experiments with
	  tasks and combat.

2005-10-07  Al Riddoch  <alriddoch@zepler.org>

	* Release 0.5.1

2005-10-07  Al Riddoch  <alriddoch@zepler.org>

	* Update NEWS.

	* Update version to 0.5.1 for release.

	* tests/consttest.cpp: Fix warning due to unused variables.

2005-10-05  Al Riddoch  <alriddoch@zepler.org>

	* common/system.cpp: Replace SA_ONESHOT with SA_RESETHAND is it
	  seems to be a more portable way to do the same thing.

2005-10-04  Al Riddoch  <alriddoch@zepler.org>

	* server/Idle.h, server/Idle.cpp: Rename reference to CommServer
	  so there is no ambiguity in classes which inherit from Idle
	  and CommSocket.

	* server/CommServer.h, server/CommServer.cpp: Store the current
	  time, and a flag indicating if the server is currently handling
	  client traffic. Modify idle handlers so they are only
	  called if the server is not busy with internal traffic, or traffic
	  from clients. Check for errors returned by epoll().

	* server/CommUnixListener.cpp, server/CommListener.cpp,
	  server/CommClient.h, server/CommClient.cpp: Make CommClient an
	  idler, and use it to track clients which connect but don't
	  negotiate, disconnecting them after a timeout.

2005-10-02  Al Riddoch  <alriddoch@zepler.org>

	* client/ClientConnection.cpp, server/CommClient.cpp,
	  tools/AdminClient.cpp, tools/cycmd.cpp:
	  Update to use new Negotiate API in Atlas-C++.

2005-10-01  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Plant.cpp: Fix bug in tree felling which caused an op
	  to get into an infinite loop.

2005-10-01  Al Riddoch  <alriddoch@zepler.org>

	* common/custom.cpp: Install the Monitor op type, which was missing.

	* server/Admin.cpp: Use class_no to determine op types rather
	  than string type.

2005-10-01  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Re-order code so that its not necessary
	  to lookup an entity that is to be moved unless we already know
	  its not the current entity.

	* rulesets/Character.cpp: Implement destination based movement when
	  the target position is specified with a different LOC to the
	  current LOC of the character.

	* modules/Location.cpp: Document the functions used to determine
	  relative distance vectors.

2005-09-30  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/PythonThingScript.cpp, rulesets/PythonMindScript.cpp: Fix a
	  bug which meant that most operations returned from scripts were
	  silently ignored.

2005-09-29  Al Riddoch  <alriddoch@zepler.org>

	* client/Makefile.am, server/Makefile.am, tools/Makefile.am:
	  Update static libs to Atlas-C++ 0.6.

	* RELEASE-check: Add a note about autopackage building.

2005-09-29  Al Riddoch  <alriddoch@zepler.org>

	* Update NEWS.

	* Release 0.5.0

2005-09-28  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.cpp, modules/Location.h:
	  Add const accessors for location data, in preparation for
	  adding cached collision data which must be updated every
	  time data is modified.

	* physics/Collision.cpp, rulesets/Character.cpp, rulesets/Entity.cpp,
	  rulesets/Entity.h, rulesets/MemMap.cpp, rulesets/Movement.cpp,
	  rulesets/Pedestrian.cpp, rulesets/Plant.cpp,
	  rulesets/Py_Location.cpp, rulesets/Thing.cpp, rulesets/World.cpp,
	  server/Account.cpp, server/EntityFactory.cpp, server/Persistor.cpp,
	  server/Persistor_impl.h, server/Restorer_impl.h,
	  server/WorldRouter.cpp, tests/Locationtest.cpp:
	  Use the const accessors whenver reading data from Location.

2005-09-28  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Movement.cpp: Add an assert check to ensure collision
	  code is working ok.

	* physics/Collision.cpp: Fix a bug where emergence from a container
	  was incorrectly predicted because the final emerging corner was
	  mispredicted.

2005-09-27  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Movement.cpp: Re-word a comment to make it clearer.

2005-09-27  Al Riddoch  <alriddoch@zepler.org>

	* common/inheritance.cpp, common/inheritance.h: Re-introduce
	  opEnumerate function as its useful for scripts, and tests.

	* tests/inheritancetest.cpp: Add necessary includes to pick up
	  operation class numbers.

	* tests/Areatest.cpp, tests/BaseEntitytest.cpp,
	  tests/Charactertest.cpp, tests/Creatortest.cpp,
	  tests/EntityExerciser.h, tests/Entitytest.cpp,
	  tests/Foodtest.cpp, tests/Linetest.cpp, tests/OOGThingtest.cpp,
	  tests/Planttest.cpp, tests/Stackabletest.cpp,
	  tests/Structuretest.cpp, tests/Thingtest.cpp, tests/Worldtest.cpp:
	  Remove all uses of the removed op subscription mechanism.

2005-09-26  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Report an error if a movement tick op has
	  no serialno. Remove some obsolete comments.

2005-09-26  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: When processing Move op from mind,
	  suppress Tick op used to update if character is not moving.

2005-09-26  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.cpp, common/BaseEntity.h, common/inheritance.cpp,
	  common/inheritance.h, rulesets/BaseMind.cpp, rulesets/BaseMind.h,
	  rulesets/Character.cpp, rulesets/Character.h, rulesets/Entity.cpp,
	  rulesets/Food.cpp, rulesets/Plant.cpp, rulesets/Stackable.cpp,
	  rulesets/Thing.cpp, rulesets/World.cpp, server/Account.cpp,
	  server/Admin.cpp, server/Connection.cpp, server/server.cpp:
	  Remove the subscription mechanism as it is no longer necessary
	  now that operations have class numbers.

2005-09-26  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.cpp, common/custom.cpp, common/op_switch.h,
	  common/types.h, rulesets/BaseMind.cpp, rulesets/Character.cpp,
	  rulesets/Creator.cpp, rulesets/Food.cpp, rulesets/Plant.cpp,
	  rulesets/Thing.cpp, rulesets/World.cpp, server/Admin.cpp,
	  server/Admin.cpp: Replace OpNo enumeration with defines for the
	  integer class numbers.  Expand the switch statements used for op
	  dispatch because runtime extended op definitions don't have a const
	  number. 

	* server/EntityFactory.cpp: Re-order installation of ops to ensure
	  the number registered in enumeration maps is the one returned by
	  the Atlas factories.

	* rulesets/Character.cpp: Improve debug output for op handling when
	  debug is enabled for this file.

2005-09-24  Al Riddoch  <alriddoch@zepler.org>

	* common/inheritance.cpp: Replace a #warning with a FIXME.

2005-09-23  Al Riddoch  <alriddoch@zepler.org>

	* common/globals.cpp: Remove debug output.

2005-09-23  Al Riddoch  <alriddoch@zepler.org>

	* common/globals.cpp, common/globals.h: Implement reading pvp settings
	  from config file.

	* data/cyphesis.vconf: Disable pvp in the default config.

2005-09-23  Al Riddoch  <alriddoch@zepler.org>

	* common/globals.cpp, common/globals.h: Add config flags for
	  pvp settings.

2005-09-22  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Container.h, rulesets/Container.cpp,
	  rulesets/EntityProperties.cpp: Implement add(Entity) for common
	  poperties, and containers.

	* rulesets/Entity.cpp: Use add(Entity) instead of get() on properties,
	  ensuring that unset properties aren't copied. Fixes problem with
	  bboxes appearing on all entities.

2005-09-22  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: If reading quaternion from Atlas results
	  in an invalid quaternion, report an ERROR. Abort processing
	  the move op if any exception is thrown when reading values
	  from Atlas.

2005-09-20  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp, rulesets/Character.h:
	  Add handler for chop ops, which is a quick implementation of
	  Axe murder to test the health bar in clients.

2005-09-20  Al Riddoch  <alriddoch@zepler.org>

	* common/system.cpp: Make sure cassert is included before assert
	  macro is used.

	* common/Makefile.am: Add missing header.

	* data/Makefile.am: Install copies of the config files in
	  the documentation directory for reference.

2005-09-20  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp, rulesets/Character.h: Add Attack operation
	  handler to set up combat when sent by attacker.

	* rulesets/Combat.cpp: Fix bootstrap tick op, and return a future tick
	  op from the tick op handler.

2005-09-19  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.h, rulesets/Entity.cpp: Add default script
	  only handler for Attack ops.

	* rulesets/Character.cpp: When Attack op comes from mind,
	  move it on to the target entity.

2005-09-19  Al Riddoch  <alriddoch@zepler.org>

	* server/EntityFactory.cpp: Report if entities have velocity on
	  creation.

2005-09-19  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Task.h, rulesets/Task.cpp: Add reference counting to the
	  task interface.

	* rulesets/Character.cpp, rulesets/Combat.cpp, rulesets/Combat.h:
	  Add experimental code to handle initiating combat.

2005-09-18  Al Riddoch  <alriddoch@zepler.org>

	* common/Attack.h, common/operations.cpp, common/types.h:
	  Add a new Attack operation type.

	* common/op_switch.h, common/BaseEntity.h, common/BaseEntity.cpp,
	  rulesets/BaseMind.cpp, rulesets/BaseMind.h,
	  rulesets/Character.cpp, rulesets/Character.h: Add handlers to base
	  classes for Attack op.

2005-09-18  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/PythonMindScript.cpp, rulesets/PythonMindScript.h,
	  rulesets/PythonThingScript.cpp, rulesets/PythonThingScript.h
	  rulesets/PythonScript.h, rulesets/Script.cpp, rulesets/Script.h:
	  Clean up script API.

	* rulesets/BaseMind.cpp, rulesets/Character.cpp, rulesets/Entity.cpp,
	  rulesets/Food.cpp, rulesets/Plant.cpp, rulesets/Stackable.cpp,
	  rulesets/Thing.cpp: Modify script calls to new API.

	* rulesets/BaseMind.cpp, rulesets/BaseMind.h: All sub_op calls now
	  take const ref for sub_op argument.

2005-09-17  Al Riddoch  <alriddoch@zepler.org>

	* server/Makefile.am, tools/Makefile.am: Add gcrypt static libs.

2005-09-16  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Don't link libdl and libutil explicitly when linking
	  python dynamically.

	* common/const.cpp: Remove some obsolete comments.

2005-09-16  Al Riddoch  <alriddoch@zepler.org>

	* common/custom.cpp: Remove some operation types only used in
	  scrypts.

	* data/basic.xml, data/mason.xml: Add the operation definitions
	  into the rule files.

2005-09-15  Al Riddoch  <alriddoch@zepler.org>

	* common/system.cpp, common/system.h: Add new functions for handling
	  encrypted password hashes with a salt, based on gcrypt rather
	  than openssl. Include legacy support for hashes without a salt.

	* common/const.cpp: Add a salt to the default admin password.

	* tests/systemtest.cpp: Modify the password tests to use the new
	  functions.

	* server/Connection.cpp, server/Connection.h,
	  server/TrustedConnection.cpp, server/TrustedConnection.h:
	  Update the login code to use the new password functions.

2005-09-14  Al Riddoch  <alriddoch@zepler.org>

	* client/ClientConnection.cpp: Improve error reporting when
	  unexpected object arrives from server.

	* rulesets/Character.cpp: Invert test so that tool use op arguments
	  are now set correctly.

	* rulesets/Entity.cpp: Use proper entities to handle responses to
	  Create and Look ops.

	* server/Connection.cpp, server/EntityFactory.cpp: Improve error
	  reporting using String::compose.

	* server/EntityFactory.cpp: Invert test so that all custom ops
	  now don't fail to get installed. Ensure that custom ops that
	  need to wait for their parent a properly inserted into the
	  waiting queue.

2005-09-13  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.cpp: Fix a bug where POS was being corrupted
	  whenever velocity was supposed to be set.

	* rulesets/basic/mind/goals/humanoid/mason.py: Convert ID to entity
	  before checking location.

	* rulesets/mason/mind/PigMind.py: Convert ID to entity before
	  passing location to another function.

2005-09-13  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Report error when database connection fails.

2005-09-12  Al Riddoch  <alriddoch@zepler.org>

	* common/Makefile.am: Fix some missing headers.

2005-09-12  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Increment version to development 0.5.x series.

	* aiclient/ClientAccount.cpp, client/BaseClient.cpp,
	  client/ClientConnection.cpp, common/BaseEntity.cpp,
	  common/Database.cpp, common/custom.cpp, common/inheritance.cpp,
	  common/operations.h, rulesets/BaseMind.cpp, rulesets/Creator.cpp,
	  rulesets/Food.cpp, rulesets/MemMap.cpp, rulesets/Pedestrian.cpp,
	  rulesets/Py_Operation.cpp, rulesets/Py_RootEntity.cpp,
	  rulesets/Python_API.cpp, rulesets/Stackable.cpp, rulesets/Thing.cpp,
	  rulesets/World.cpp, server/CommClient.cpp, server/Connection.cpp,
	  server/WorldRouter.cpp, tests/inheritancetest.cpp,
	  tools/AdminClient.h, tools/cyaddrules.cpp,
	  tools/cycmd.cpp, tools/cydumprules.cpp,
	  tools/cyloadrules.cpp, tools/cypasswd.cpp:
	  Remove unnecessary using directives.

	* common/utility.cpp, common/utility.h,
	  rulesets/BaseMind.cpp, rulesets/Py_Operation.cpp,
	  server/CommClient.cpp, tools/AdminClient.h, tools/cycmd.cpp:
	  Remove obsolete utility function from the build.

	* common/operations.h: Remove unused obsolete header from the
	  build.

2005-09-12  Al Riddoch  <alriddoch@zepler.org>

	* common/inheritance.h, tests/inheritancetest.cpp: Remove the
	  newOperation declarations from the header, and removes their
	  tests.

2005-09-12  Al Riddoch  <alriddoch@zepler.org>

	* common/inheritance_impl.h, common/inheritance.h,
	  common/inheritance.cpp, common/custom.cpp: Get rid of the op
	  factory feature of inheritance, as its not required.

	* server/EntityFactory.cpp: Register op types defined in the
	  data into the Atlas factory rather than the old inheritance
	  factory mechanism.

2005-09-12  Al Riddoch  <alriddoch@zepler.org>

	* common/custom.cpp, rulesets/Character.cpp: Ensure all custom op
	  types are registered with the Atlas factories, and switch
	  to using it for tool operations.

2005-09-12  Al Riddoch  <alriddoch@zepler.org>

	* common/Add.h, common/Burn.h, common/Chop.h, common/Connect.h,
	  common/Cut.h, common/Delve.h, common/Dig.h, common/Eat.h,
	  common/Monitor.h, common/Mow.h, common/Nourish.h, common/Setup.h,
	  common/Tick.h, common/Unseen.h, common/Update.h,
	* common/operations.cpp, scripts/gen_op.py:
	  Try a new much simpler way of handling custom ops.

	* common/CustomOp.cpp, common/CustomOp.h, common/CustomOp_impl.h:
	  Remove obsolete old template for custom ops.

	* common/custom.cpp: Install factories in a different way for all
	  the custom op types.

2005-09-11  Al Riddoch  <alriddoch@zepler.org>

	* common/const.cpp, common/const.h: Git rid of bizare scheme
	  where each constant appears twice, debug and non-debug versions.

	* rulesets/Pedestrian.cpp, rulesets/Thing.cpp,
	  server/WorldRouter.cpp: Fix problem where an essential call
	  was inside an assert, so did not happen when built in non-debug
	  mode.

2005-09-11  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/goals/humanoid/mason.py: Fix self -> me
	  when checking for mind ID.

2005-09-11  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Operation.h, rulesets/Py_Operation.cpp: Remove reference
	  ownership flag, and from and to pointers from the python operation
	  structure.

	* rulesets/Py_Map.cpp, rulesets/Py_Oplist.cpp,
	  rulesets/PythonMindScript.cpp, rulesets/PythonThingScript.cpp,
	  rulesets/Python_API.cpp: Remove all usage of own, from and to.

	* rulesets/basic/mind/NPCMind.py,
	  rulesets/basic/mind/goals/common/misc_goal.py,
	  rulesets/basic/mind/goals/humanoid/mason.py,
	  rulesets/basic/mind/goals/humanoid/transaction.py,
	  rulesets/mason/world/objects/clothing/Garment.py,
	  rulesets/mason/world/objects/plants/seeds/Acorn.py,
	  rulesets/mason/world/objects/plants/seeds/Apple.py,
	  rulesets/mason/world/objects/plants/seeds/Fircone.py,
	  rulesets/mason/world/objects/tools/Bucksaw.py,
	  rulesets/mason/world/objects/tools/Cleaver.py,
	  rulesets/mason/world/objects/tools/Trowel.py: Modify all scripts
	  so they expect from and to of ops to be an ID string rather than
	  an entity.

2005-09-11  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Python_API.cpp: Modify Python API so Entity() now creates
	  a RootEntity not a Message Element.

	* client/Py_CreatorClient.cpp, client/CreatorClient.h,
	  client/CreatorClient.cpp: Modify CreatorClient and bindings to
	  take a RootEntity rather than a Message Element.

2005-09-11  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Object.h, rulesets/Py_Object.cpp: Remove nasty code
	  used to handle complex attributes to Message Elements. Now should
	  either be converted or rejected.

	* rulesets/Python_API.cpp: Remove code that merged complex python
	  attributes to entity arguments.

	* rulesets/Py_Mind.cpp: Add note that as_entity() method should
	  be removed in the long term.

2005-09-11  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Object.cpp, rulesets/Py_Object.h: Ensure that
	  Python to Atlas conversions are aborted if they fail at any
	  point.

	* rulesets/Py_RootEntity.cpp: Ensure all static functions still have
	  unique names. Support setting and retrieving soft attributes.
	  For attribute values which are non-convertible python objects,
	  store a pointer to the original Python object.

	* rulesets/Python_API.cpp: Adapt setting of operation arguments
	  modified Python to Atlas conversion functions.

	* rulesets/mason/define_world.py: Add a very basic test for
	  experimenting with interlinguish.

2005-09-11  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.h, modules/Location.cpp: Remove handling of
	  LOC attribute from readFromEntity() as every use of this function
	  has differen requirements.

	* rulesets/MemMap.cpp: Implement setting LOC so that the minimum
	  of lookups in the world dictionary are required.

	* server/EntityFactory.cpp: Implement setting LOC in a much simpler
	  way, as its always uninitialised at this point.

	* client/BaseClient.cpp: Add a note that LOC is currently unhandled,
	  as there is nothing sane to do with it.

2005-09-11  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Operation.cpp: Return entity arguments as RootEntity
	  rather than MessageElement.

	* rulesets/Py_RootEntity.cpp: get_name() returns "obj" as it should
	  rather than "op". Add warnings if unknown attributes are requested
	  or set.

	* rulesets/Python_API.cpp: Accept RootEntity python wrapped
	  objects as arguments to operations. 

2005-09-10  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.cpp, modules/Location.h: Add a new method to
	  read location data from an Atlas Entity.

	* rulesets/MemMap.cpp, server/EntityFactory.cpp, client/BaseClient.cpp:
	  Switch to using new function rather than Entity::getLocation.

	* rulesets/Entity.h, rulesets/Entity_getLocation.h: Remove obsolete
	  getLocation method.

2005-09-10  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Thing.cpp, rulesets/Character.cpp: Use getVelocity()
	  on RootEntity, rather than accessing it as a soft attribute.

2005-09-10  Al Riddoch  <alriddoch@zepler.org>

	* physics/Vector3D.h: When constructing a vector or point from
	  a std::vector, set its valid flag.

2005-09-09  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.cpp, rulesets/Thing.cpp: Use copy correctly
	  when creating copies of operations.

2005-09-09  Al Riddoch  <alriddoch@zepler.org>

	* common/CustomOp_impl.h: Correctly set the refcount on copied custom
	  ops.

2005-09-08  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.cpp: Update copyright date.

	* rulesets/BaseMind.cpp, rulesets/Entity_getLocation.h,
	  rulesets/Entity.h, rulesets/MemMap.cpp, rulesets/MemMap.h,
	  rulesets/Py_Map.cpp, server/EntityFactory.cpp,
	  server/EntityFactory.h, server/WorldRouter.cpp,
	  client/BaseClient.cpp, client/CreatorClient.cpp:
	  Change various methods to pass entity information
	  around as RootEntity rather than MapType.

2005-09-08  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/MemMap.cpp: Remove unnecessary copy of name to entity,
	  as it's handled later in merge().

2005-09-07  Al Riddoch  <alriddoch@zepler.org>

	* common/compose.hpp: Add Ole Laursen's fine string composition
	  library for improved messages.

	* rulesets/Character.cpp: Fix inverted check for string pos,
	  and add a clearer error message when it fails, using
	  compose.

2005-09-07  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Operation.cpp: Decref operations correctly when the
	  Python object wrapping them is deleted.

	* rulesets/mason/define_world.py: Add a simple single entity
	  test function.

	* server/WorldRouter.cpp: Make sure orientation is not used
	  un-initialised when correcting height.

2005-09-06  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_RootEntity.cpp, rulesets/Py_RootEntity.h:
	  New python wrappers for Atlas-C++ entity classes.

2005-08-31  Al Riddoch  <alriddoch@zepler.org>

	* common/inheritance.cpp: Avoid hasAttr(),getAttr() use by using
	  copyAttr().

2005-08-31  Al Riddoch  <alriddoch@zepler.org>

	* common/inheritance.h: Set the correct objtype on the Root meta class.

	* rulesets/Character.cpp, rulesets/Food.cpp, rulesets/Plant.cpp,
	  rulesets/Stackable.cpp, rulesets/Thing.cpp, server/Account.cpp,
	  server/Admin.cpp, server/Connection.cpp, tools/AdminClient.cpp,
	  tools/cycmd.cpp: Switch to renamed copyAttr() method from
	  Atlas-C++.

2005-08-30  Al Riddoch  <alriddoch@zepler.org>

	* common/AtlasFileLoader.cpp, common/Database.cpp,
	  common/FormattedXMLWriter.cpp, common/Property.cpp,
	  common/accountbase.cpp, rulesets/Character.cpp,
	  rulesets/Entity_getLocation.h, rulesets/MemMap.cpp,
	  rulesets/Pedestrian.cpp, rulesets/Plant.cpp,
	  rulesets/Py_Object.cpp, rulesets/Thing.cpp,
	  server/Admin.cpp, server/Connection.cpp, server/EntityFactory.cpp,
	  server/WorldRouter.cpp, tools/AdminClient.cpp, tools/cycmd.cpp,
	  tools/cyconvertrules.cpp: After an Element has been checked
	  with isFoo(), it is more efficient to get its value using Foo()
	  rather than asFoo() which repeats the check.

2005-08-29  Al Riddoch  <alriddoch@zepler.org>

	* server/Account.cpp, rulesets/Thing.cpp, rulesets/Character.cpp:
	  Replace asserts with proper checks that arguments are of the
	  expected type.

	* common/custom.cpp: Put ignite op installation back in.

2005-08-29  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/goals/common/misc_goal.py: Don't return
	  non-existant ops.

	* rulesets/Thing.cpp: Fix some places where root_operations
	  were being returned.

	* common/inheritance.cpp: Add "affect" operation base class,
	  and fix parents on use and wield.

	* common/custom.cpp: Install atlas factories for custom op
	  types.

2005-08-29  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.cpp, rulesets/Thing.cpp: Use static LOC and POS
	  members in RootEntity.

	* rulesets/Entity_getLocation.h: Add some slightly more thorough
	  checking for location data.

2005-08-28  Al Riddoch  <alriddoch@zepler.org>

	* common/custom.cpp: Install an atlas factory for custom op as a test.

	* rulesets/Py_Operation.cpp: Improve error reporting.

	* rulesets/Python_API.cpp: Fix bug where arguments to ops were
	  ignored.

2005-08-28  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: No longer necessary to flush op queue in
	  destructor. Remove verbose debug output.

2005-08-28  Al Riddoch  <alriddoch@zepler.org>

	* client/CharacterClient.cpp: Add some debug output, and fix a bug
	  which ignored all replies to client ops.

	* server/WorldRouter.cpp: Fix a bug in OpQueEntry which stored
	  a smart pointer reference rather than really storing the
	  smart pointer.

2005-08-28  Al Riddoch  <alriddoch@zepler.org>

	* server/TrustedConnection.cpp, server/TrustedConnection.h:
	  Fix the fingerprint of virtual verifyCredentials() member
	  function so it correctly overrides the one in Connection.

2005-08-28  Al Riddoch  <alriddoch@zepler.org>

	* tests/Creatortest.cpp, tests/EntityExerciser.h,
	  tests/Tasktest.cpp, tests/Worldtest.cpp,
	  tests/allOperations.h, tests/inheritancetest.cpp,
	  tests/utilitytest.cpp: Fix up tests to work with new Atlas-C++
	  version.

2005-08-28  Al Riddoch  <alriddoch@zepler.org>

	* scripts/gen_op.py: Script to generate operation class headers.

	* common/Connect.h, common/Monitor.h: New op classes added during
	  port.

2005-08-28  Al Riddoch  <alriddoch@zepler.org>

	* Finish initial port to Atlas-C++ 0.6 series. Client and tools
	  binaries now link.

2005-08-27  Al Riddoch  <alriddoch@zepler.org>

	* Port whole code base to Atlas-C++ 0.6 series. Main server binary
	  now links.

2005-08-17  Al Riddoch  <alriddoch@zepler.org>

	* common/CustomOp.cpp, common/CustomOp.h, common/CustomOp_impl.h:
	  Experimental class template for making custom ops a little
	  easier to handle.

2005-07-07  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/goals/common/common.py,
	  rulesets/basic/mind/goals/common/misc_goal.py,
	  rulesets/basic/mind/goals/common/move.py,
	  rulesets/basic/mind/goals/humanoid/build_home.py,
	  rulesets/basic/world/probability.py,
	  rulesets/basic/world/objects/plants/Tree.py,
	  rulesets/mason/define_world.py, rulesets/mason/mind/SkelMind.py,
	  rulesets/mason/world/objects/Weather.py,
	  rulesets/mason/world/objects/animals/Deer.py,
	  rulesets/mason/world/objects/animals/Pig.py,
	  rulesets/mason/world/objects/outdoor/Gravestone.py,
	  rulesets/mason/world/objects/plants/seeds/Seed.py,
	  rulesets/mason/world/objects/undead/Skeleton.py,
	  rulesets/werewolf/define_world.py:
	  Switch to importing random and fall back to deprecated whrandom
	  on older python versions.

2005-07-04  Al Riddoch  <alriddoch@zepler.org>

	* server/CommMDNSPublisher.cpp: Don't finalise MDNS session when an
	  error is detected, instead finalise in destructor, so the file
	  descriptor is still handled ok removing from poll set.

2005-07-04  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/goals/common/misc_goal.py: More changes
	  to make goals work with new spot_something.

	* rulesets/basic/mind/goals/common/move.py: Modify hunt pursuit goal
	  to fit with spot_something.

2005-07-04  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/goals/humanoid/construction.py:
	  Port plant_seeds goal to use new spot_something mechanism.

2005-07-04  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/goals/humanoid/construction.py: Re-work
	  goals to use new movement goals, and fix some bugs. Use
	  right_hand_wield properlly when using tools. Adjust to use
	  new spot_something goal.

	* rulesets/mason/define_world.py: Fix up world initialisation
	  to setup forage now the constructor args have changed.

2005-07-04  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/goals/common/misc_goal.py: Re-work
	  spot_something goal to store the entity spotted in Knowledge
	  rather than it being hacked in as a possession. Re-work many
	  other goals to work with spot_something, eliminating reference
	  to mind from constructors where possible.

2005-07-04  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/goals/common/move.py: Break down goals for
	  picking up things into separate goals for picking up
	  posessions, and focussed items, and similarly for moving toward
	  items.

2005-07-03  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/Knowledge.py, rulesets/basic/mind/NPCMind.py:
	  Add new methods to remove knowledge from mind.

2005-07-03  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Plant.cpp: Remove some debug output.

	* Release 0.3.12

2005-07-03  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Plant.cpp: Collapse two set ops into one in plant tick op.

2005-07-03  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Plant.cpp: Limit tree growth to a maximum mass.
	  Make sure nourishment gets reset when its used.

2005-07-02  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Thing.cpp: Make sure mode is updated correctly in move
	  ops.

2005-07-01  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Plant.cpp: Set the mass of the lumber object created
	  when a tree is cut down.

2005-07-01  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: Add mass and maxmass to all tree types.

2005-07-01  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Pedestrian.cpp, server/WorldRouter.cpp: Correct error
	  message about non-string modes.

2005-07-01  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Thing.cpp: Add some more debug output for mode
	  problems. Ensure mode property is set.

2005-07-01  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp: Remove some debug output.

2005-07-01  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/define_world.py: Correct two typos in forester
	  setup.

2005-07-01  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp: Implement sending nourish ops to plants.
	  Ammount of nutrition is logarithmically proportional to their
	  mass which seems to give a nice growth curve for now.

2005-07-01  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/world/objects/plants/seeds/Acorn.py:
	  When an oak is created from seed, make its mass the same as the
	  acorn's mass, and hack its bbox to the apropriate size.

2005-07-01  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Plant.h, rulesets/Plant.cpp: Add a nourishment property
	  to track nourishment received from nourish ops. Scale the
	  height as nourishment increases the plant's mass.

2005-07-01  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/goals/humanoid/construction.py: Add a new
	  goal for planting seeds.

	* rulesets/mason/define_world.py: Add a forester NPC that uses
	  the plant_seeds goal to plant acorns.

2005-07-01  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: Set mass on oak trees.

2005-06-30  Al Riddoch  <alriddoch@zepler.org>

	* common/custom.cpp: Add type for "server" to inheritance mechanism.

2005-06-30  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/goals/common/misc_goal.py: Remove unnecessary
	  "me" argument from get_knowledge goal.

2005-06-30  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/Goal.py: Remove debugging output.

2005-06-29  Al Riddoch  <alriddoch@zepler.org>

	* tools/cycmd.cpp: Fix handling info ops, so they are not
	  treated as avatar creation responses.

2005-06-28  Hagen Moebius  <hagen.moebius@starschiffchen.de>

	* data/basic.xml: Added operations "disperse" and "extinguish".
	  Set up "disperse" as the default operation for the pile.

	* rulesets/basic/world/objects/Pile.py: The operation "disperse"
	  will call the "extinguish" operation on the target. Maybe it is
	  advisable to add an assertion if the target is indeed a fire.

2005-06-28  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp: Fix subscription to eat ops.

	* rulesets/Plant.h, rulesets/Plant.cpp: Add stub for handling nourish
	  ops. Send eat ops to parent entity.

2005-06-28  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: Make house3 not a structure, to eliminate problems
	  with race conditions in collision code.

2005-06-28  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/goals/common/misc_goal.py: Fix indentation
	  in peck goal which was using tabs.

2005-06-28  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: ignite and sow ops now inherit from action.

2005-06-28  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp, rulesets/World.h: Add an eat operation
	  handler.

2005-06-27  Al Riddoch  <alriddoch@zepler.org>

	* common/inheritance.h, common/inheritance.cpp: Add isTypeOf()
	  method to do inheritance queries.

	* tests/inheritancetest.cpp: Add very basic testing of the isTypeOf()
	  method.

2005-06-27  Al Riddoch  <alriddoch@zepler.org>

	* server/CommClient.cpp: Report when a client is disconnected
	  for blocking a write.

2005-06-25  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: Add type for butcher's house.

2005-06-25  Kai Blin  <blin@gmx.net>

	* rulesets/basic/mind/goals/common/misc_goal.py: reduced the random
	  offset that makes the chicken change position after pecking

2005-06-25  Al Riddoch  <alriddoch@zepler.org>

	* tools/cycmd: New add_agent, find_by_name and find_by_type
	  commands to deal more in-game stuff. Implement command completion
	  using readline.

2005-06-24  Kai Blin  <blin@gmx.net>

	* rulesets/mason/define_world.py: Add peck as a goal for the chicken,
	  and a test_chicken function.
	
	* rulesets/basic/mind/panlingua/interlinguish.py: Add peck verb.
	
	* rulesets/basic/mind/goals/common/misc_goal.py: Add peck goal.
	  Chicken will now run around. The actual peck will be added later.

2005-06-23  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/define_world.py: Fix graveyard bbox.
	  Tweak lych's patrol path so he doesn't run into gravestones.

	* rulesets/basic/mind/NPCMind.py: WTF!

2005-06-23  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Python_API.cpp: Move declaration of clist_size so its
	  initialisation is no longer bipassed by jumps.

2005-06-23  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.cpp, modules/Location.h, rulesets/Python_API.cpp:
	  Implement a function for determining the horizontal distance
	  between two locations neglecting height difference, as for
	  locations on the terrain it is not relevant.

	* rulesets/basic/mind/goals/common/move.py: Improve the coding of
	  the move_me_to_it goal, so distance determination is more effective.
	  Make distance independant of height.
	  Relax distances at which character is concidered to have arrived at
	  its destination.

	* rulesets/basic/mind/Goal.py: Modify goal so that it understands
	  that a subgoal can be unfulfilled, but still not need to take any
	  action.

2005-06-22  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Fix a problem where entities contained by
	  other entities had their height adjusted incorrectly.

	* rulesets/basic/world/objects/elements/Fire.py: Allow fires to be
	  moved.

	* rulesets/Python_API.cpp: Add constructor for BBox.

	* data/mason.xml: Add a torch. Add burn_speed attributes to a
	  bunch more entity classes.

	* rulesets/mason/world/objects/tools/Torch.py: Script for torch.

2005-06-21  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: Add some burn speeds.

2005-06-21  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Increment version number.

	* rulesets/mason/define_world.py: Add bboxes to some areas.

2005-06-20  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/MemMap.cpp: Don't change type of entities in mind, as
	  they get mutated by client accidentally.

2005-06-20  James Turner  <james@worldforge.org>

	* rulesets/basic/mind/panlingua/interlinguish.py: add nouns for various
	  tools that can be sold.

2005-06-19  James Turner  <james@worldforge.org>

	* rulesets/mason/define_world.py: move the chickens to the village, add
	  a village square area (sand for now), and add two market stalls, for
	  the butcher and a new tool merchant. Still being debugged, but should
	  be consistent at this point.

2005-06-19  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/world/objects/tools/Tinderbox.py: Change strength
	  of initial fire spark to 0.05.

	* common/operations.cpp: Fix nourish op, which got broken when mow
	  was added.

	* data/basic.xml: Add a default bbox for lumber, giving it a more
	  apropriate size.

	* rulesets/Py_World.cpp: Add a compare implementation so that
	  scripts can check entities to see if they are the world.

	* rulesets/basic/world/objects/elements/Fire.py: Tune the
	  changes which occur in fire as it burns.

2005-06-19  Erik Hjortsberg  <erik@katastrof.nu>

	* rulesets/mason/world/objects/outdoor/Gravestone.py: fixed the range
	  of the randint call

2005-06-19  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/define_world.py: Adjust size of collision volumes for
	  market stall.

2005-06-19  Erik Hjortsberg  <erik@katastrof.nu>

	* data/mason.xml: Connected gravestones to Gravestone.py script.

	* rulesets/mason/world/objects/outdoor/Gravestone.py: added response
	  to a dig operation, which will create a random skeleton piece. This
	  will allow the wholesome pastime of grave robbing.

2005-06-18  James Turner  <james@worldforge.org>

	* rulesets/Py_Point3d.cpp, rulesets/Py_Vector3d: add a _repr()
	  function to the type-object, so using points and vectors in
	  'print' statements works as expected.

2005-06-18  Erik Hjortsberg  <erik@katastrof.nu>

	* data/mason.xml: Added three types of grave stones.

	* rulesets/mason/define_world.py: In the test_graveyard function,
	  create some grave stones.

2005-06-17  James Turner  <james@worldforge.org>

	* data/mason.xml: Give the mausoleum a more sensible bbox and mass

	* rulesets/mason/define_world.py: add a test_graveyard function,
	  which adds the mausoleum, a path leading to it, and a lych patrolling
	  nearby. No gravestones yet, alas.

2005-06-17  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: Add definition for sow operation.

	* rulesets/mason/world/objects/plants/seeds/Acorn.py: Add handler
	  for germinate operation.

2005-06-15  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: Fix stall geometry.

	* rulesets/mason/define_world.py: Add stall, including structural
	  objects to handle collisions.

2005-06-15  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/define_world.py: Extend the path so it reaches the
	  jetty. Add the village to the default world.

2005-06-15  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Add support for fixed mode.

	* rulesets/mason/define_world.py: Increase terrain area a little, move
	  boundary into mountains, sea. Move forests around so they are not
	  in the river.

2005-06-12  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/define_world.py: An experimental river is now in
	  the terrain.

2005-06-12  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: Add path rule.

	* rulesets/mason/define_world.py: Some experiments with paths.
	  Correct the layer number of ploughed field.

2005-06-12  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Pedestrian.cpp: Remove some debug output.

	* server/WorldRouter.cpp: Tweak the order of dispatch.

	* cyphesis.spec.in: Clean up the dependencies in the spec.

	* configure.ac: Increment version to 0.3.11.

	* NEWS: Update news item.

	* Makefile.am: Fix rule that tweaks temp dir prefix so it works
	  when destination directory is overriden.

	* Release 0.3.11

2005-06-09  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.h, rulesets/Pedestrian.cpp, rulesets/Thing.cpp,
	  server/WorldRouter.cpp: Store the last movement update time
	  in location, so it can be used for interpolation elsewhere.
	  Don't yet update it in the main Move code is this causes movement
	  jitter.

2005-06-08  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Pedestrian.cpp: Apply z coord constraints after doing
	  movement interpolation. If the character is immersed in water
	  then set the mode to swimming.

2005-06-08  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Movement.cpp, rulesets/Movement.h,
	  rulesets/Pedestrian.cpp, rulesets/Pedestrian.h,
	  rulesets/Character.cpp: Remove the obsoleted movement code.
	  Eliminate friend relationship with Character, adding necessary
	  accessors. Remove unused member variables.

2005-06-08  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Movement.h, rulesets/Pedestrian.h, rulesets/Movement.cpp,
	  rulesets/Pedestrian.cpp: Get rid of m_collAxis as it was unused.
	  Add velocity to the interface of getTickAddition to avoid using
	  the redundant m_velocity member of Movement. Fix calculation
	  of velocity magnitude in new movement code. Correctly set
	  velocity to zero when movement reaches its target.

	* rulesets/Character.cpp: Add alternative movement processing
	  code based on the new mathods in Pedestrian.

2005-06-07  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Movement.h, rulesets/Pedestrian.h, rulesets/Pedestrian.cpp:
	  Add a return value to getUpdatedLocation to indicate whether an
	  update was necessary or not.

	* rulesets/Character.cpp: Add some notes on how this code could be
	  adapted to Use the new Movement code.

2005-06-07  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Add some comments on how the movement
	  code should work.

2005-06-07  Al Riddoch  <alriddoch@zepler.org>

	* Makefile.am: Fixup permissions on the temp directory used for
	  unix sockets.

2005-06-06  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Movement.h, rulesets/Pedestrian.h, rulesets/Pedestrian.cpp:
	  Add a new method to the movement interface which determines the
	  updated location of an entity when movement needs to be handled.

2005-06-06  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Clean up check for movements that currently
	  can't be handled.

2005-06-06  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp, rulesets/Movement.cpp, rulesets/Movement.h,
	  rulesets/Pedestrian.cpp: Rename some variables to make the code
	  more comprehensible.

2005-06-06  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: Make boat float by default, add bottle and bunny,
	  fix wolf's bounding box.

	* rulesets/mason/define_world.py: Put fire in the middle of campfire,
	  not offset.

2005-06-05  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.cpp, modules/Location.h: Rejig flags on Location
	  so that there is one to indicate contents should be checked for
	  collision, and one to indicate contents is not a collision volume.

	* rulesets/Movement.cpp: Modify collision code to check if an
	  entity is supposed to be checked for collisions.

	* rulesets/Structure.cpp: Tweak the flag set on structures to
	  correctly show that their contents should be checked for collision.

	* data/mason.xml: Make ploughed field into an area, and sort
	  out its bbox to be the right size.

2005-06-05  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: Add a horse.

2005-06-05  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: Add mausoleum rule.

	* TODO: Update TODO.

2005-06-04  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Mind.cpp, rulesets/Py_Thing.cpp: Add attribute
	  handler for "contains".

2005-06-04  Al Riddoch  <alriddoch@zepler.org>

	* tests/Creatortest.cpp, tests/Worldtest.cpp:
	  Fix tests to work with modified World API.

2005-06-03  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseWorld.h, server/WorldRouter.cpp, server/WorldRouter.h:
	  Modify world interface so it takes a string mode when adjusting
	  the height of entities. Handle floating and swimming entities
	  accordingly.

	* rulesets/Thing.cpp: Change the order in which mode is checked
	  so it is available when adjusting height.

	* rulesets/mason/define_world.py: Randomise height of fish, so they
	  look more like they are swimming.

2005-06-02  Miguel Guzman 

	* rulesets/mason/define_world_aglanor.py: 
	  added new world definition for mason 0.3

2005-06-02  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: Add carrot and turnip, and a common parent tuber.

2005-06-01  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: Set default mode to swimming on fish.

	* rulesets/Character.cpp: Don't set intial mode of characters to
	  "birth".

2005-06-01  Al Riddoch  <alriddoch@zepler.org>

	* man/cyphesis-tools.sgml: Add documentation for cyaddrules.

2005-05-28  Al Riddoch  <alriddoch@zepler.org>

	* data/basic.xml, data/mason.xml, rulesets/mason/define_world.py:
	  Make sure entities with layers all use a different layer ID.
	  Make sure sty has area and bbox in the default attributes.

2005-05-27  Al Riddoch  <alriddoch@zepler.org>

	* server/CommMetaClient.cpp: Fix eof() to check for the correct
	  condition on the socket stream, and ensure that decoding message
	  from the metaserver is aborted if the message is shorter than
	  expected. This should fix a tight loop bug which occurs when
	  there is a problem with metaserver communication.

2005-05-27  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Send a Sight(Action) op from character when
	  using a tool so the client know when to run an animation.

2005-05-26  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp, rulesets/Character.h, rulesets/attributes.h,
	  server/Persistor.cpp, server/Persistor_impl.h, server/Restorer.cpp;
	  Make right_hand_wield a real Atlas property, and add it to the
	  database code.

	* rulesets/Character.cpp: When wielding a tool, set right_hand_wield
	  correctly to notify clients.

2005-05-25  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/define_world.py: Add fields around the village.

2005-05-25  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: Add an area of fallen leaves round oak trees, and
	  add a new type for a ploughed field.

2005-05-24  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml, rulesets/mason/world/objects/tools/Bucksaw.py:
	  New bucksaw for cutting up logs.

	* rulesets/mason/world/objects/tools/Trowel.py: Correct the comments.

2005-05-24  Al Riddoch  <alriddoch@zepler.org>

	* server/PersistantThingFactory.cpp: Include Python.h before
	  ScriptFactory.h to avoid an annoying warning from the python
	  headers.

2005-05-24  Al Riddoch  <alriddoch@zepler.org>

	* server/PersistantThingFactory.cpp: Include ScriptFactory.h to
	  ensure deleting the script factory works ok.

2005-05-24  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac, client/Makefile.am, server/Makefile.am,
	  tests/Makefile.am, tools/Makefile.am: Separate out WorldForge
	  libraries into sections so that tools binaries don't get linked to
	  libs they don't use. This prevents problems when library interface
	  versions change. Use dynamic python library if available, and remove
	  -export-dynamic flag from linker when using the dynamic version of
	  python.

2005-05-18  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp: Fix copyright date.

	* rulesets/mason/define_world.py: Add an area to the sty.

2005-05-18  Al Riddoch  <alriddoch@zepler.org>

	* data/basic.xml, data/mason.xml: Add objtype to all rules.
	  Add a rule for ignite operation definition.

	* common/custom.cpp: Remove hardcoded ignite operation definition.

	* server/EntityFactory.cpp, server/EntityFactory.h: Remove some debug
	  output. Add new code to allow op_definitions to be installed as
	  rules.

	* common/inheritance.cpp, common/inheritance.h: Return an error code
	  when a type without parents gets installed, rather than throwing an
	  exception.

	* tests/inheritancetest.cpp: Fix test so it no longer expects an
	  exception.

	* rulesets/mason/world/objects/clothing/Garment.py: Remove some
	  debug output.

	* tools/AdminClient.cpp: Remove hardcoded objtype, depending instead
	  on objtype from the data file. Fix a bug where the full rule
	  was not getting uploaded when updating an existing rule.
	  Improve error reporting when update fails.

2005-05-17  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Thing.cpp: Fix leak of Motion object.

	* rulesets/World.cpp, rulesets/World.h: Make tileShader a member
	  variable, and delete it in the destructor to avoid a leak.

	* server/PersistantThingFactory.cpp: Fix leak of ScriptFactorys.

	* server/PersistantThingFactory_impl.h: Fix leak of Persistor
	  in ForbiddenThingFactory.

2005-05-17  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml, rulesets/mason/world/objects/tools/Tinderbox.py:
	  Tinderbox for starting fires.

	* common/custom.cpp: Ignite operation for tinderbox.

2005-05-16  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml, rulesets/mason/world/objects/clothing/Garment.py:
	  Add experimental garment entity for changing the characters
	  appearance.

	* common/custom.cpp: Add wear operation for use with garments.

2005-05-16  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: Add default guise attribute to settler.

	* tools/cycmd.cpp: Clearly differentiate between strings and numbers
	  when outputting Atlas data.

2005-05-16  Al Riddoch  <alriddoch@zepler.org>

	* tools/Makefile.am: Add prefix.o to cyaddrules so it works in
	  a binreloc enabled build.

2005-05-16  Al Riddoch  <alriddoch@zepler.org>

	* server/EntityFactory.cpp: Implement updating default attributes
	  and other metadata when types are modified from the client.

	* server/ScriptFactory.cpp: Handle errors that occur when reloading
	  modules. Store the new module correctly.

	* tools/AdminClient.cpp, tools/AdminClient.h: Change behavoir of
	  cyaddrules so it updates types that have already been installed.
	  Requires adding a set op types that have already been uploaded
	  or updated, to ensure that types in a base ruleset don't override
	  the one already in the server.

2005-05-15  Al Riddoch  <alriddoch@zepler.org>

	* server/ScriptFactory.h: Add accessor for script package.

	* server/EntityFactory.cpp, server/EntityFactory.h: Move code that
	  adds data to a factory into a separate function so it can
	  potentially be called from elsewhere.

2005-05-15  Al Riddoch  <alriddoch@zepler.org>

	* server/EntityFactory.cpp: Implement reloading scripts when
	  a client asks to modify an installed type.

	* server/Admin.cpp: Re-order checks when client asks to modify
	  an installed type, so the client doesn't have to set the parents.

	* tools/cycmd.cpp: Add a reload command which causes the server
	  to update an existing type, thus reloading its script if it has
	  one.

2005-05-15  Al Riddoch  <alriddoch@zepler.org>

	* server/EntityFactory.cpp, server/EntityFactory.h: Add a public
	  method to allow the attributes of an installed type to be
	  modified.

	* server/Admin.cpp: Correctly handle Create ops from client
	  to install new types from the client rather than Set.
	  Leave Set available as a legacy feature. Allow Set to be
	  used to modify the attributes of an existing type.

	* tools/AdminClient.cpp, tools/AdminClient.h: Clean up headers,
	  move constructor and destructor into the .cpp file,
	  and make better use of using. Send Create ops instead of Set
	  ops when installing new types in the server.

2005-05-15  Al Riddoch  <alriddoch@zepler.org>

	* server/EntityFactory.h, server/EntityFactory.cpp: Make a bunch
	  of functions private, as they should not be available elsewhere.
	  Make installRule() public, and make it return an error status.

	* server/Admin.cpp: Use installRule() to install new rules from the
	  client, so that the full data is installed.

2005-05-15  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/world/objects/tools/Rope.py: Correct the syntax
	  of stub functions.

	* rulesets/basic/world/objects/buildings/StoneHouse.py: Fix the import
	  statements.

	* rulesets/basic/world/objects/buildings/House.py: Fix import for
	  physics module.

	* rulesets/basic/mind/goals/common/misc_goal.py: Fix typo in
	  cut_something.

	* server/ScriptFactory.cpp, server/ScriptFactory.h: New factory
	  class for handling python scripts for entities much more
	  efficiently, and provide a means where they can be re-imorted
	  at an apropriate time.

	* server/PersistantThingFactory.h, 
	  server/PersistantThingFactory.cpp: Make PersistantThingFactory
	  copy constructor protected, to ensure its not used accidentally.
	  Replace strings for storing python script data with a pointer
	  to a factory for creating scripts.

	* server/EntityFactory.cpp: Use the new ScriptFactory mechnism
	  for creating scripts attached to entities. Improve variable
	  names a little.

2005-05-15  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/define_world.py: Fix typo. Thanks erik.

2005-05-15  Al Riddoch  <alriddoch@zepler.org>

	* data/basic.xml: Make the mass of the pig sty large enough it can
	  no longer be moved around.

2005-05-14  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Python_Script_Utils.h, rulesets/Python_API.h,
	  rulesets/Python_API.cpp, rulesets/MindFactory.cpp,
	  server/EntityFactory.cpp: Move functions related to creating
	  script objects into a new header, to avoid namespace pollution.

2005-05-14  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.h, rulesets/BaseMind.h: Make scriptSubscribe
	  virtual so it can be overriden in BaseMind.

	* rulesets/Python_API.cpp: Get rid of template for Subscribe_Script
	  as its no longer necessary now scriptSubscribe is virtual.

2005-05-14  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Python_API.cpp: Clean up variable names to make code more
	  readable.

2005-05-14  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/goals/common/misc_goal.py: Fix cut_something
	  goal so it now works with current tool use.

2005-05-14  Al Riddoch  <alriddoch@zepler.org>

	* server/Admin.cpp: Check that create ops from admin account
	  have objtype set, so we can tell what it wants to create.

	* data/mason.xml: Add a globlin type.

	* client/BaseClient.cpp: Set objtype when creating characters.

	* TODO: Some notes.

2005-05-14  Al Riddoch  <alriddoch@zepler.org>

	* tools/AdminClient.cpp, tools/AdminClient.h: Improve the rule upload
	  code so that rules are held pending until their parents are uploaded,
	  ensuring that rules in an inheriting ruleset correctly override
	  those in the base ruleset.

	* tools/cyaddrules.cpp: Report upload operation counts, and
	  report if a pending rule never gets uploaded.

2005-05-14  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: Add a new rule for fish.

	* rulesets/mason/define_world.py: Add a shoal of fish to the lake.

	* common/custom.cpp, rulesets/Character.cpp,
	  rulesets/basic/mind/NPCMind.py: Use Unseen operation to notify
	  minds when they attempt to interactive with something that
	  they can't iteract with, either because its outside their
	  area of perception, or because its been deleted.

2005-05-14  Al Riddoch  <alriddoch@zepler.org>

	* TODO: Note about bug in cyaddrules when adding rules from scratch.

	* client/ObserverClient.cpp, client/ObserverClient.h,
	  client/client.cpp: Add option to allow cyclient to connect to a
	  remote server.

	* tools/AdminClient.cpp, tools/AdminClient.h: Add a timeout so
	  cyaddrules still works against older servers that don't send an
	  info op when new types are uploaded.

	* tools/cyaddrules.cpp: Add option to allow cyaddrules to connect to
	  a remote server.

2005-05-14  Al Riddoch  <alriddoch@zepler.org>

	* tools/AdminClient.cpp, tools/AdminClient.h, tools/cyaddrules.cpp:
	  New tool to load new rules into a running server.

	* data/mason.xml, rulesets/mason/world/objects/tools/Rope.py:
	  Experimental type for a rope.

	* man/cyclient.sgml, man/cycmd.sgml, man/cyphesis-tools.sgml,
	  man/cyphesis.sgml: Add SEE ALSO sections to the man pages.

	* rulesets/Python_API.cpp: Clean up variable names.

	* server/Admin.cpp: Send an info response when types are
	  installed from the client.

	* tools/cyloadrules.cpp: Correct copyright dates.

2005-05-12  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp: Clear up the types of entities created
	  when materials are gathered from the terrain.

2005-05-12  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/world/objects/tools/Trowel.py, data/mason.xml:
	  Add a rule for a trowel for planting seeds. Add a rule for spider
	  model.

	* common/custom.cpp: Add custom ops for "sow" and "germinate" for
	  handling seeds.

2005-05-12  Al Riddoch  <alriddoch@zepler.org>

	* tools/Formatter.cpp: Change the way lists are formatted to
	  to be cleaner, and match the way existing rules are stored.

	* data/mason.xml, data/basic.xml: Make sure maps are all in
	  alphabetical order, so these files are the same as their machine
	  generated versions.

2005-05-12  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Python_API.cpp: Re-write the code for extracting operation
	  subscriptions from python classes so its now more efficient and
	  picks up methods from base classes.

	* rulesets/basic/mind/BaseMind.py, rulesets/basic/mind/NPCMind.py,
	  rulesets/basic/world/objects/Thing.py: Rename some methods
	  which have match the signature of operation handlers.

2005-05-10  Al Riddoch  <alriddoch@zepler.org>

	* Version 0.3.10 released.

2005-05-10  Al Riddoch  <alriddoch@zepler.org>

	* common/Makefile.am: Add another missing header to the distribution.

2005-05-10  Al Riddoch  <alriddoch@zepler.org>

	* data/basic.xml, data/mason.xml: Add bounding boxes for fire
	  and campfire.

2005-05-10  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp, rulesets/Character.cpp: Remove the debug output.

2005-05-10  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: Type for bundles of grass.

	* rulesets/World.cpp: Implement resource gathering for all the
	  currently supported resource types.

	* rulesets/basic/world/objects/Pile.py: Fix so Pile inherits from
	  Thing correctly.

2005-05-10  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Increment version number.

	* common/Makefile.am: Ensure all headers are included in the
	  distribution.

2005-05-10  Al Riddoch  <alriddoch@zepler.org>

	* data/basic.xml, rulesets/basic/world/objects/Pile.py: Add a new
	  experimental type for piles.

	* TODO: Some random crazy shit.

2005-05-09  Al Riddoch  <alriddoch@zepler.org>

	* data/basic.xml: Add a new type for boulder.

2005-05-09  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.cpp, rulesets/Thing.cpp: Move Create op subscription
	  into Entity, as that is where the method is.

	* rulesets/World.cpp: Create a boulder entity when the pickaxe
	  is used on rocky terain.

	* client/CharacterClient.cpp: Don't process ops from the server in
	  the client, as it causes a crash.

2005-05-07  Al Riddoch  <alriddoch@zepler.org>

	* common/Affect.h, common/operations.cpp: New base class for high level
	  ops which have a direct effect on their target.

	* common/Chop.h, common/Delve.h, common/Dig.h, common/Mow.h:
	  Move a bunch of ops to inherit from Affect, is this reflects
	  their semantics.

2005-05-07  Al Riddoch  <alriddoch@zepler.org>

	* common/Add.h, common/custom.cpp, common/operations.cpp,
	  common/types.h: Add new Add operation class.

	* common/BaseEntity.h, common/BaseEntity.cpp, common/op_switch.h,
	  rulesets/Character.cpp, rulesets/Character.h:
	  Add handling for the Add operation into the core operation set.

	* common/Delve.h, common/Dig.h, common/Mow.h: Fix comments.

2005-05-06  Al Riddoch  <alriddoch@zepler.org>

	* common/Dig.h, common/Mow.h, common/custom.cpp, common/operations.cpp:
	  Add new Dig and Mow operations, for handling resource gathering.

	* rulesets/basic/world/objects/tools/Shovel.py,
	  rulesets/basic/world/objects/tools/Scythe.py,
	  data/basic.xml: Add new scythe and shovel for gathering resources
	  from the terrain.

	* rulesets/basic/world/objects/tools/Pickaxe.py,
	  common/Delve.h: Fix the comments.

	* rulesets/World.cpp, rulesets/World.h: Move code for determining
	  terrain surface type into a method of its own. Implement handlers
	  for Dig and Mow ops.

2005-05-05  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp: Use a TileShader to handle data about the
	  material the makes up the terrain surface. When a Delve operation
	  determine what material the world is at that point.

2005-05-04  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.cpp, rulesets/Thing.cpp, rulesets/Thing.h:
	  Move standard Create handler into entity so everything can
	  handle create ops.

2005-05-04  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Add some debug stuff.

	* rulesets/World.cpp, rulesets/World.h: Add handler for delve
	  operations. Just for testing for now, no functionality.

2005-05-03  Al Riddoch  <alriddoch@zepler.org>

	* server/CommMDNSPublisher.cpp: Avoid more namespace pollution from
	  the libhowl headers.

2005-05-03  Al Riddoch  <alriddoch@zepler.org>

	* server/CommServer.cpp: Clean up some comments, and use the right
	  typedef.

2005-05-01  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Include POS from a Use op argument when
	  building the arg for the resulting op.

	* rulesets/Py_Point3D.cpp: Add a print handler.

	* rulesets/Python_API.cpp: When constructing Point3D or Vector3D
	  accept an Atlas list as well as a standard python list.

2005-04-30  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Update autoconf usage.

2005-04-26  Al Riddoch  <alriddoch@zepler.org>

	* server/EntityFactory.cpp: Cast the world entity factory to the
	  right type when using it to persist the world during database
	  bootstrap.

2005-04-25  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Thing.cpp: Fix a stray empty argument getting added to 
	  to Sight(Create) ops.

2005-04-25  Al Riddoch  <alriddoch@zepler.org>

	* server/PersistantThingFactory.h, PersistantThingFactory_impl.h,
	  server/PersistantThingFactory.cpp: Add ForbiddenThingFactory
	  for entity classes that need persistence, but can't be instantiated
	  through the normal channels.

	* server/EntityFactory.cpp: Use ForbiddenThingFactory for World.

	* server/WorldRouter.cpp: Correct error message for entity
	  creation failure to include "forbidden" as a possible cause.

2005-04-24  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/goals/common/misc_goal.py,
	  rulesets/basic/mind/goals/humanoid/construction.py:
	  Make sure Use arguments explicitly have an objtype in the
	  argument.

2005-04-24  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Thing.cpp: Make sure that an entity cannot be moved
	  inside itself, even indirectly.

2005-04-24  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Python_API.cpp: Don't set objtype on entities from python
	  scripts unless they have parents.

2005-04-23  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Motion.cpp: Add return values to stub functions to get
	  rid of warnings.

2005-04-21  Al Riddoch  <alriddoch@zepler.org>

	* common/custom.cpp, common/Delve.h,
	  common/operations.cpp, common/operations.h:
	  Add new delve operation for digging with a pickaxe.

	* data/basic.xml, rulesets/basic/world/objects/tools/Pickaxe.py:
	  Add new pickaxe entity which emits a Delve operation when
	  used.

	* rulesets/Character.cpp: Fix a bug where a segfault occured
	  if an operation was requested by a tool that was unknown to
	  to the core server code. Instead an error message is emitted.

	* rulesets/World.cpp: Subscribe world terrain to delve ops.

2005-04-21  Al Riddoch  <alriddoch@zepler.org>

	* tests/Makefile.am: Fix tests to build now that Motion.o has been
	  added.

2005-04-21  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.h, modules/Location.cpp: Start adding the
	  additional fields required for comeplex movement. Acceleration
	  and angular velocity added first.

2005-04-21  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Motion.h, rulesets/Motion.cpp: Add a little more API,
	  and provide stubs of existing methods.

	* rulesets/Thing.cpp: Add a motion instance to all physical
	  entities, and pass mode setting to it.

2005-04-21  Al Riddoch  <alriddoch@zepler.org>

	* client/CharacterClient.h, client/CreatorClient.h,
	  common/OOGThing.h, rulesets/Entity.h, rulesets/MemEntity.h:
	  Fix naming of header guards so they are consistant.

2005-04-20  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Motion.cpp, rulesets/Motion.h: Flesh out the API for
	  handling motion, and set up a cpp file so it gets compiled.

2005-04-15  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Vector3D.cpp: Fix format for outputting Vector3D
	  using printf.

	* rulesets/AreaProperty.cpp, rulesets/AreaProperty.h: New
	  Property class for handling Area attributes.

2005-04-14  Al Riddoch  <alriddoch@zepler.org>

	* man/cyphesis-tools.sgml: Documet cydumprules.

2005-04-13  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: Re-order rules to be alphabetical for easier
	  comparison.

	* tools/cydumprules.cpp: Finish implementing tool for dumping rules
	  from database to files.

2005-04-13  Al Riddoch  <alriddoch@zepler.org>

	* tools/Formatter.cpp, tools/Formatter.h, tools/cydumprules.cpp:
	  Start work on a tool to read rules from the cyphesis database
	  tables, and dump them to files on disk.

2005-04-11  Al Riddoch  <alriddoch@zepler.org>

	* server/Account.cpp, server/Admin.cpp, server/CommClient.cpp,
	  server/Connection.cpp: Don't set refno on unicast OOG ops,
	  instead set them at the interface with the client in one
	  place.

	* server/WorldRouter.cpp: Modify setting refno on IG ops so its
	  now only set on unicast responses.

	* rulesets/Creator.cpp: Set refno on responses direct ops from creator
	  clients more manually.

	* common/BaseEntity.cpp: Only set refno on unicast error ops.

	* common/refno.h: Disable as this file is no longer used.

2005-04-10  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Operation.cpp, rulesets/Py_Optime.cpp,
	  rulesets/Py_Optime.h rulesets/Python_API.cpp:
	  Remove the Optime class from the API and force scripts to use
	  setFutureSeconds() to modify operation dispatch time.

	* rulesets/acorn/world/objects/Weather.py,
	  rulesets/acorn/world/objects/plants/Tree.py,
	  rulesets/acorn/world/objects/plants/seeds/Acorn.py,
	  rulesets/acorn/world/objects/plants/seeds/Apple.py,
	  rulesets/acorn/world/objects/plants/seeds/Seed.py,
	  rulesets/basic/mind/NPCMind.py,
	  rulesets/basic/mind/goals/common/move.py,
	  rulesets/basic/world/objects/animals/Animal.py,
	  rulesets/basic/world/objects/buildings/House.py,
	  rulesets/basic/world/objects/elements/Fire.py,
	  rulesets/basic/world/objects/plants/Tree.py,
	  rulesets/basic/world/objects/tools/Bow.py,
	  rulesets/mason/world/objects/Weather.py,
	  rulesets/mason/world/objects/plants/seeds/Acorn.py,
	  rulesets/mason/world/objects/plants/seeds/Apple.py,
	  rulesets/mason/world/objects/plants/seeds/Fircone.py,
	  rulesets/mason/world/objects/plants/seeds/Seed.py:
	  Fix up all the python scripts to use setFutureSeconds on
	  ops instead of time.sadd.

2005-04-06  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Thing.cpp: Remove obsolete commented out code.

	* server/Account.cpp, server/Connection.cpp:
	  Add a note about serialno/refno handling when code sends ops
	  directly to the client.

	* server/CommClient.cpp, server/CommClient.h: Clean up some debug
	  code, and method names.

	* server/Lobby.cpp: Fix a case where a private message would fail
	  silently if account had logged on recenlty but was no longer.

2005-04-05  Al Riddoch  <alriddoch@zepler.org>

	* server/Account.cpp: Improve checks to make sure account is connected
	  when processing ops.

	* server/Admin.cpp: Improve logout op handling so its cleaner, and
	  improve a couple of variable names.

2005-04-04  Al Riddoch  <alriddoch@zepler.org>

	* tools/cyphesis.sh: Remove echo commands so script is now functional.

2005-04-04  Al Riddoch  <alriddoch@zepler.org>

	* Version 0.3.9 released.

2005-04-03  Al Riddoch  <alriddoch@zepler.org>

	* tests/Makefile.am: Update to ensure tests are compatible with
	  binreloc code.

	* autogen.sh: Disable binreloc when doing development builds.

	* configure.ac, NEWS: Increment version number for upcoming release.

2005-04-03  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.h: Add a pointer to a Motion object to entities.

	* rulesets/Thing.cpp: Add notes about Motion implementation.
	  Clean up some variable names.

	* common/Database.cpp: Fix some lingering missuse of the varconf API.

2005-04-03  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Motion.h: New base class for handling motion.

2005-04-03  Al Riddoch  <alriddoch@zepler.org>

	* autopackage/default.apspec.in, configure.ac: Update the autopackage
	  spec so it builds binaries statically, and depends on python.

2005-04-03  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac, autopackage/default.apspec.in: First attempt at a
	  package spec for autopackage.

2005-03-31  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac, common/Makefile.am: Fix paths so code still builds
	  with BinReloc disabled.

2005-03-31  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Thing.cpp: Remove some debug output.

	* rulesets/Py_Vector3D.cpp: Add error checking so that normalising
	  a zero mangitude vector does not abort.

2005-03-28  Al Riddoch  <alriddoch@zepler.org>

	* acinclude.m4, configure.ac, common/prefix.c, common/prefix.h,
	  common/Makefile.am, common/globals.cpp, tools/Makefile.am:
	  Use BinReloc to make cyphesis relocatable on Linux.

2005-03-19  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Thing.cpp: More experimenting with new movement code.

	* rulesets/mason/define_world.py: Fix a bug in the marshall's
	  dialogue.

2005-03-03  Al Riddoch  <alriddoch@zepler.org>

	* common/Property.cpp, rulesets/EntityProperties.cpp,
	  server/Persistor.cpp, server/Restorer.cpp, tools/cycmd.cpp:
	  Tweak template code to work with stricter standard compliance
	  of gcc 4.

	* rulesets/Character.h, rulesets/Character.cpp: static const
	  members need to be defined in the .cpp to satisfy all compilers.

2005-02-17  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.cpp, common/BaseEntity.h, common/op_switch.h,
	  common/operations.cpp, common/operations.h, common/types.h,
	  rulesets/Character.cpp, rulesets/Character.h, rulesets/Thing.cpp,
	  rulesets/Thing.h: Add core op handling for update operation, used
	  to handle move ops better.

2005-02-15  Al Riddoch  <alriddoch@zepler.org>

	* tests/inheritancetest.cpp, rulesets/Thing.cpp,
	  rulesets/Entity_getLocation.h, rulesets/Character.cpp:
	  Catch exceptions by reference for efficiency.

2005-02-15  Al Riddoch  <alriddoch@zepler.org>

	* tools/Makefile.am: Add copy_python.sh to the distribution.

2005-02-15  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Fix a problem with the libcrypto test that
	  does not add it to the right list of libs.

2005-02-13  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Fix a problem linking postgresql in the tests if
	  its libs are in a weird place.

2005-02-12  Al Riddoch  <alriddoch@zepler.org>

	* server/EntityFactory.cpp: If no persistent ruleset exists in the
	  database, print an error and load the rules from files instead.

2005-01-25  Al Riddoch  <alriddoch@zepler.org>

	* data/werewolf.xml,
	  rulesets/mason/world/objects/plants/seeds/Apple.py,
	  rulesets/werewolf/world/objects/characters/Villager.py,
	  rulesets/werewolf/world/objects/tools/Gallows.py:
	  Remove some more obsolete constructors.

2005-01-25  Al Riddoch  <alriddoch@zepler.org>

	* data/basic.xml: Clean out a load of obsolete classes and scripts.

	* rulesets/basic/world/objects/buildings/House.py,
	  rulesets/basic/world/objects/buildings/StoneHouse.py,
	  rulesets/basic/world/objects/tools/Bow.py,
	  rulesets/basic/world/objects/tools/Sword.py,
	  rulesets/mason/world/objects/plants/seeds/Seed.py,
	  rulesets/mason/world/objects/undead/Skeleton.py:
	  Remove obsolete constructors, and don't inherit from
	  obsolete scripts.

2005-01-25  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: Remove redundant script from oak.

2005-01-24  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: Remove scripts from a number of classes which are
	  are not using them. Add necessary init values for properties.

	* rulesets/mason/world/objects/animals/Pig.py: Remove obsolete
	  constructor, as we no longer initialise properties that way.

	* rulesets/mason/world/objects/plants/Fir.py: Eliminate inheritance
	  from Tree script, as Tree does nothing and is being removed.

2005-01-24  Al Riddoch  <alriddoch@zepler.org>

	* tools/cyphesis.sh: Add some notes on how to build a redistributable
	  binary.

	* tools/copy_python.sh: Add a script that copies the essential
	  elements of python runtime required to run cyphesis.

2005-01-24  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/world/objects/tools/Cleaver.py,
	  rulesets/mason/world/objects/animals/Deer.py,
	  rulesets/basic/world/objects/tools/Axe.py:
	  Remove obsolete commented out code, and useless constructors
	  from some scripts.

	* data/mason.xml: Remove obsolete scripts for some entities
	  which don't do anything.

2005-01-24  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml: Remove obsolete scripts for some entities
	  which don't do anything.

2005-01-24  Al Riddoch  <alriddoch@zepler.org>

	* Version 0.3.8 released.

2004-01-23  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Point3D.cpp, rulesets/Py_Vector3D.cpp: Improve
	  error reporting in setattr.

2004-01-23  Al Riddoch  <alriddoch@zepler.org>

	* common/const.cpp, common/const.h: Re-enable database code by default
	  as the disable option is now well tested.

2004-01-19  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Increment version number. Add automake options
	  to enforce NEWS, and distribute using bzip2.

	* cyphesis.spec.in: Update rpm spec to use the tar.bz2 version of the
	  source.

	* server/CommMDNSPublisher.cpp: Suppress some warnings due to mess
	  in the howl headers.

	* tools/cyphesis.sh: Script to run the server as part of a binary
	  tarball distribution.

2004-01-18  Al Riddoch  <alriddoch@zepler.org>

	* tests/Makefile.am, tests/Creatortest.cpp, tests/Worldtest.cpp:
	  Fix up the tests.

2004-01-18  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Switch to less deprecated usage of init macros.

2004-01-17  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac, client/Makefile.am, server/Makefile.am,
	  tools/Makefile.am: Add a configure option, and modify the
	  way libs are handled so that it is possible to link most
	  libs statically. This makes it possible to build a stand-alone
	  binary distribution.

2004-01-17  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.h, server/WorldRouter.cpp: Completey remove
	  deliverDeleteTo(), and handle all the delete special case stuff
	  in delEntity().

2004-01-17  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseWorld.h, rulesets/Character.cpp, rulesets/Py_World.cpp,
	  rulesets/PythonThingScript.cpp, rulesets/Stackable.cpp,
	  rulesets/Thing.cpp, rulesets/World.cpp, server/Account.cpp,
	  server/Admin.cpp, server/Connection.cpp, server/EntityFactory.cpp,
	  server/Restoration.cpp, server/WorldRouter.cpp, server/WorldRouter.h:
	  Rename some functions in the World interface so they make more
	  sense.

	* rulesets/Entity.cpp, rulesets/Entity.h: Add destroyed flag to
	  Entity so we can tell if its no longer in the world.

	* server/WorldRouter.cpp: Cut down the special case handling of
	  delete ops as we can now broadcast ops from entities that
	  have been removed from the world.

2004-01-16  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.cpp: Call decRef() on parent from the destructor
	  so that entities removed from the world can still have a reference
	  to their parent safely.

	* rulesets/BaseMind.cpp, rulesets/MemMap.cpp, tests/distancetest.cpp:
	  Make sure parent is 0 before deleting, as reference counting is not
	  implemented in the mind yet.

2004-01-16  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.cpp, rulesets/Entity.h, rulesets/Thing.cpp,
	  server/WorldRouter.cpp: Increment reference count on parent
	  entity when a child has a reference to it.

2004-01-16  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Re-write broadcast code to remove the
	  need for looking up by ID, and instead use the reference
	  to the sending entity which is now available.

2004-01-15  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.h, server/WorldRouter.cpp: Change operation()
	  to take a reference to the entity the op is from. Re-work
	  main idle loop to pas the entity to operation, and handle
	  the op queue more efficiently.

2004-01-13  Al Riddoch  <alriddoch@zepler.org>

	* tests/Creatortest.cpp, tests/Worldtest.cpp: Update tests to deal
	  with change in the World interface.

2004-01-13  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseWorld.h, rulesets/Entity.h, rulesets/MemMap.cpp,
	  server/Account.cpp, server/WorldRouter.cpp, server/WorldRouter.h:
	  Use reference count functions to handle deleting entities.
	  Modify main op queue to hold a reference to the entity the op
	  is from. Fix up arg naming conventions in WorldRouter.

2004-01-13  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.h, rulesets/Entity.cpp, server/WorldRouter.cpp:
	  Add basic reference counting to Entity, and use it for deleting
	  objects from world.

2004-01-13  Al Riddoch  <alriddoch@zepler.org>

	* server/CommMetaClient.cpp: Add warning to help debug problems
	  communicating with the metaserver.

2004-01-13  Al Riddoch  <alriddoch@zepler.org>

	* common/globals.cpp: Add a config setting for the var directory
	  as well as share and etc. Document all three in the man page.

2004-01-13  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Improve error reporting for query errors.

	* common/const.cpp, common/const.h: Add full details and comments
	  for enable_database option.

	* common/id.h, common/id.cpp: New ID generator for use when we
	  are not using the Database.

	* common/AtlasFileLoader.cpp, common/AtlasFileLoader.h: Generic
	  class for loading Atlas data from a file.

	* server/Connection.cpp, server/EntityFactory.h,
	  server/EntityFactory.cpp, server/Persistor.cpp,
	  server/WorldRouter.cpp, server/server.cpp:
	  Implement the enable_database option by wrapping all use of database
	  in if statements. Rules are loaded from files instead.

2004-01-12  Al Riddoch  <alriddoch@zepler.org>

	* common/const.h: Add a new config flag for completely disabling the
	  need for a database.

2004-01-12  Al Riddoch  <alriddoch@zepler.org>

	* server/CommServer.cpp: Fully initialise epoll_event structure before
	  passing to kernel.

2004-01-09  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/define_world.py: Use know() for prices rather
	  than the special case code.

	* rulesets/basic/editor.py, rulesets/basic/mind/NPCMind.py:
	  Remove obsolete special case code for handling knowledge of
	  prices. Improve code to express distance to a location so
	  it neglects the vertical distance, and better handles the
	  very close case.

	* rulesets/basic/mind/goals/humanoid/mason.py: Track the character
	  being helped in the help goal, and turn to face them when speaking.

	* rulesets/basic/mind/panlingua/interlinguish.py: Add more support
	  for pronouns, conjugations and whitespace in regex used to match
	  certain sentence structures.

2004-01-09  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/panlingua/interlinguish.py:
	  Slight tweak to regular expressions for simple sentences.

2004-01-09  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Vector3D.cpp: Add print handler for Vector3D, which
	  doesn't seem to work yet.

	* rulesets/basic/mind/panlingua/interlinguish.py: Add tell verb.
	  Modify regexs for simple sentences so they tolerate more
	  variation in the structure.

	* rulesets/basic/mind/compass.py: New function to convert direction
	  vector into a compass direction string.

	* rulesets/basic/mind/NPCMind.py: Add handler for tell verb, to
	  query knowledge from NPCs.

2004-01-07  Al Riddoch  <alriddoch@zepler.org>

	* tests/consttest.cpp: Check the values of all config variables,
	  to get rid of some annoying warnings.

2004-01-05  Al Riddoch  <alriddoch@zepler.org>

	* cyclient.init, cyphesis.init: Fix some stupid bugs in the init
	  scripts.

2004-12-31  Al Riddoch  <alriddoch@zepler.org>

	* cyphesis.spec.in: Change "Copyright" tag to "License"

2004-12-30  Al Riddoch  <alriddoch@zepler.org>

	* common/const.h: Make the coments doxygen compatable.

	* rulesets/Character.cpp: Add comments to document tool use.

	* rulesets/Fell.cpp, rulesets/Fell.h, rulesets/Task.cpp,
	  rulesets/Task.h: Add reference to Character to base Task class,
	  and setup() method for task initiation.

	* tests/Tasktest.cpp: Update task test for new changes.

	* tests/randomtest.cpp, tests/consttest.cpp: New tests for random
	  and const headers.

2004-12-28  Al Riddoch  <alriddoch@zepler.org>

	* common/OOGThing.cpp, common/Property.cpp, common/Property.h,
	  common/Property_impl.h, common/inheritance.h, common/operations.cpp,
	  rulesets/World.cpp: Update some comments.

	* rulesets/Task.h, rulesets/Task.cpp, tests/Tasktest.cpp,
	  rulesets/Fell.h, rulesets/Fell.cpp: New Task interface for
	  tasks which take a while to complete. Sample implentation provided
	  in the form of a Fell task for felling trees.

	* rulesets/Character.cpp, rulesets/Character.h: Try out Task
	  implementation with Fell.

2004-12-28  Al Riddoch  <alriddoch@zepler.org>

	* common/Makefile.am: Separate object files not used in the core
	  server binary into a different library.

2004-12-27  Al Riddoch  <alriddoch@zepler.org>

	* client/BaseClient.h, client/CharacterClient.h,
	  client/ClientConnection.h, client/CreatorClient.h,
	  client/ObserverClient.h, client/Py_CreatorClient.h,
	  common/Burn.h, common/Chop.h, common/Cut.h, common/Database.h,
	  common/Eat.h, common/Generic.h, common/Nourish.h, common/Setup.h,
	  common/Tick.h, common/Unseen.h, common/Use.h, common/Wield.h,
	  common/accountbase.h, common/inheritance.h, rulesets/Container.h,
	  rulesets/Creator.h, rulesets/LineProperty.h, rulesets/MemMap.h,
	  rulesets/MindFactory.h, rulesets/Movement.h, rulesets/Pedestrian.h,
	  rulesets/Py_BBox.h, rulesets/Py_Location.h, rulesets/Py_Map.h,
	  rulesets/Py_Mind.h, rulesets/Py_Object.h, rulesets/Py_Operation.h,
	  rulesets/Py_Oplist.h, rulesets/Py_Optime.h, rulesets/Py_Point3D.h,
	  rulesets/Py_Quaternion.h, rulesets/Py_Thing.h,
	  rulesets/Py_Vector3D.h, rulesets/Py_World.h, rulesets/Py_WorldTime.h,
	  rulesets/PythonMindScript.h, rulesets/PythonScript.h,
	  rulesets/PythonThingScript.h, rulesets/Python_API.cpp,
	  rulesets/TerrainProperty.h, rulesets/ThingFactory.h, server/Admin.h,
	  server/EntityFactory.h, server/Master.h, server/Peer.h,
	  server/Persistance.h, server/PersistantThingFactory.h,
	  server/Persistor.h, server/Player.h, server/Restoration.h,
	  server/Restorer.h, server/TrustedConnection.h: Make sure all
	  classes have up updated description in the comments.

2004-12-26  Al Riddoch  <alriddoch@zepler.org>

	* common/Property.h, rulesets/Thing.cpp: Clean up some comments.

	* rulesets/EntityProperties.cpp: Remove specialisation of
	  ImmutableProperty::set for EntitySet, as its the same as the
	  default.

	* rulesets/Script.h: Update the copyright date, and clean up some
	  comments.

	* rulesets/Container.cpp, rulesets/Container.h,
	  tests/Containertest.cpp: New virtualised classes for handling
	  entity containership, with API that mimics STL set. To be used to
	  allow entities to handle containership differently.

	* rulesets/EntityProperties.cpp: Add specialisation of
	  ImmutableProperty for Container class.

2004-12-23  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Vector3D.cpp: Fix Vector3D.setattr so it correctly
	  returns an error when wrong type or invalid attribute name is used.

2004-12-20  Al Riddoch  <alriddoch@zepler.org>

	* Release version 0.3.7.

2004-12-20  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/mind/PigMind.py: Fix bug with pigs not responding
	  to touch because of missing import.

2004-12-20  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/goals/common/move.py: Don't try and move to
	  destination when displacement is pure vertical.

2004-12-19  Al Riddoch  <alriddoch@zepler.org>

	* server/CommClient.cpp: Clean up formatting.

2004-12-19  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Vector3D.cpp: Allow setting of Vector3D attributes
	  x y and z.

	* rulesets/Python_API.cpp: Fix bug in calculating orientation
	  Quaternion for rotation between two unit vectors.

	* rulesets/basic/mind/NPCMind.py: Implement a method which calculates
	  the orientation required to face another entity. Use it to face
	  a character which wants to buy something.

	* rulesets/mason/define_world.py: Tweak orientation of pig merchant
	  so he doesn't end up upside down.

	* server/Makefile.am: Remove cyslave from the build for now, as its
	  not functional.

2004-12-18  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/panlingua/interlinguish.py: Added new noun for
	  deed.

	* data/mason.xml, rulesets/mason/define_world.py: Added new marshall
	  character who handles asigning land to settlers for housing.

2004-12-18  Al Riddoch  <alriddoch@zepler.org>

	* cyphesis.spec.in: Fix error caused by non-escaped brackets
	  in shell line.

2004-12-18  Al Riddoch  <alriddoch@zepler.org>

	* cyphesis.spec.in: Add Vendor and Distribution tags to stop
	  checkers from whining.

2004-12-18  Al Riddoch  <alriddoch@zepler.org>

	* cyphesis.init: Minor cleanup.

	* cyphesis.spec.in: Remove explicit dependency on libstdc++. Add
	  noreplace flag to runtime config files.

2004-12-17  Al Riddoch  <alriddoch@zepler.org>

	* Increment version to 0.3.7.

2004-12-17  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/define_world.py,
	  rulesets/basic/mind/goals/humanoid/mason.py: Add suggested responses
	  to talk messages from NPCs. Helps the client make it easy
	  for the user to respond.

2004-12-16  Al Riddoch  <alriddoch@zepler.org>

	* common/custom.cpp: Include cleanup.

	* server/CommClient.h, server/CommListener.h, server/CommLocalClient.h,
	  server/CommMetaClient.h, server/CommPSQLSocket.h,
	  server/CommRemoteClient.h, server/CommSlaveClient.h,
	  server/CommSocket.h, server/CommUnixListener.h:
	  Update copyright dates and class descriptions.

2004-12-16  Al Riddoch  <alriddoch@zepler.org>

	* server/CommMaster.cpp, server/CommMaster.h, server/Master.cpp,
	  server/Master.h: Handlers for a connection to a master server.

	* server/CommPeer.cpp: Fix comments.

	* server/slave.cpp: Implement connecting to master server on startup.

	* tools/cycmd.cpp: Fix bug handling option to connect to slave instead
	  of server.

2004-12-15  Al Riddoch  <alriddoch@zepler.org>

	* common/globals.cpp, common/globals.h: Separate globals for server
	  and slave sockets. Add code for reading slave settings.

	* client/ClientConnection.cpp, server/server.cpp: Use modified
	  global socket_name setting.

	* server/slave.cpp: Update for changed return values from bool to
	  int. Remove metaserver functionality. Switch to using
	  CommSlaveListener.

	* tools/cycmd.cpp: Add config option to connect to slave rather
	  than core server.

2004-12-15  Al Riddoch  <alriddoch@zepler.org>

	* server/slave.cpp: Update so slave server builds again.

	* server/CommUnixListener.h, server/CommUnixListener.cpp:
	  Remove address string to Unix sockets.

	* server/CommSlaveListener.h, server/CommSlaveListener.cpp:
	  Complete implementation of client listener for slave server.

	* server/CommSlaveClient.h, server/CommSlaveClient.cpp,
	  server/SlaveClientConnection.cpp, server/SlaveClientConnection.h:
	  Handlers for client connections to a slave server.

2004-12-15  Al Riddoch  <alriddoch@zepler.org>

	* server/CommUnixListener.cpp, server/CommUnixListener.h:
	  Virtualise creating client sockets so this class can
	  be overidden like CommListener.

	* server/CommPeerListener.h, server/CommListener.cpp:
	  Correct some comments.

	* server/CommSlaveListener.h: Listener class for management
	  connections to a slave server.

2004-12-15  Al Riddoch  <alriddoch@zepler.org>

	* server/Admin.cpp: Make sure setup is called on peer connection.

	* server/CommClient.h, server/CommClient.cpp: Adapt code so it
	  can be used for both establishing and accepting connections.

	* server/Connection.cpp: Re-order initialisations in constructor
	  to eliminate warnings.

2004-12-15  Al Riddoch  <alriddoch@zepler.org>

	* server/CommListener.cpp, server/CommListener.h: Add a virtual
	  create method, so it can be overriden to make different kinds
	  of listener.

	* server/Peer.cpp, server/Peer.h: New class representing connections
	  to peer servers.

	* server/CommPeer.cpp, server/CommPeer.h: New socket class handling
	  sockets used to connect to peer servers.

	* server/CommPeerListener.cpp, server/CommPeerListener.h: New
	  listener using new virtual interface in CommListener to accept
	  peer connections.

	* server/CommClient.cpp, server/CommClient.h: Add a new constructor
	  for creating Atlas socket objects which are not yet open. Makes
	  this class suitable for establishing as well as accepting
	  connections. Take out call to Connection::destroy.

	* server/CommRemoteClient.h: Fix error in header guards.

	* server/Connection.cpp, server/Connection.h: Remove
	  obsolete destroy() method. Make CommClient member public.

	* server/server.cpp: Add new listener for peer connections.

	* common/types.h: Add enumeration for new connect operation.

	* server/Admin.cpp, server/Admin.h: Add new handler for connect
	  operations, used by admin client to build peer connections.

	* tools/cycmd.cpp: Add new command "connect" for sending
	  connect ops to server.

2004-12-13  Al Riddoch  <alriddoch@zepler.org>

	* client/ClientConnection.cpp, common/globals.cpp, common/globals.h,
	  server/CommMDNSPublisher.cpp, server/server.cpp, server/slave.cpp,
	  tools/cycmd.cpp: Add new port number settings for things like
	  peer connections, and listen sockets for an AI slave.

	* server/CommUnixListener.cpp, server/CommUnixListener.h:
	  Parameterise socket name for listen socket.

2004-12-12  Al Riddoch  <alriddoch@zepler.org>

	* server/CommClient.cpp, server/Connection.cpp: Move counting
	  connections into the connection class.

2004-12-11  Al Riddoch  <alriddoch@zepler.org>

	* server/CommUnixListener.cpp: Improve recovery from a crash by
	  ensuring that CommUnixListener always opens its socket, even if it
	  already exists. This is ok because if a cyphesis process is already
	  running, then CommUnixListener won't even get created because the
	  attempt to create a TCP listen socket in CommListener will fail
	  first.

2004-12-10  Al Riddoch  <alriddoch@zepler.org>

	* client/CharacterClient.cpp, client/CharacterClient.h: Eliminate
	  redundant findRefno methods.

	* server/Connection.cpp, server/Connection.h,
	  server/Connection_methods.h, ./rulesets/Creator.h:
	  Don't call function args confusing names.

2004-12-10  Al Riddoch  <alriddoch@zepler.org>

	* tests/Creatortest.cpp, tests/Worldtest.cpp: Fix up the tests.

2004-12-08  Al Riddoch  <alriddoch@zepler.org>

	* server/CommServer.cpp, server/CommServer.h, server/WorldRouter.cpp,
	  server/server.cpp: Rename loop() method as poll(). Clean up some
	  includes.

2004-12-08  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseWorld.h, server/CommServer.cpp, server/ServerRouting.cpp,
	  server/ServerRouting.h, server/ServerRouting_methods.h,
	  server/WorldRouter.cpp, server/WorldRouter.h: Clean up the way the
	  idle functions work, reducing the number of calls to time related
	  system calls.

2004-12-06  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp, rulesets/Pedestrian.cpp,
	  rulesets/Py_World.cpp, rulesets/PythonThingScript.cpp,
	  rulesets/Thing.cpp, server/Account.cpp, server/Admin.cpp,
	  server/Connection.cpp, server/Restoration.cpp:
	  Remove unnecessary includes of common/BaseWorld.h.

2004-12-06  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.cpp, common/BaseWorld.h, common/refno.h,
	  common/serialno.h, rulesets/Character.cpp, rulesets/Creator.cpp,
	  rulesets/World.h, server/Account.cpp, server/Admin.cpp,
	  server/Connection.cpp, server/Lobby.cpp, server/ServerRouting.h,
	  server/WorldRouter.cpp, server/WorldRouter.h, tests/Creatortest.cpp,
	  tests/Worldtest.cpp: Simplify the way operation refnos and serialnos
	  are handled, getting rid of some unnecessary virtual methods and
	  functions.

2004-12-06  Al Riddoch  <alriddoch@zepler.org>

	* client/BaseClient.cpp, client/BaseClient.h, client/CreatorClient.cpp,
	  client/CreatorClient.h, common/BaseEntity.cpp, common/BaseEntity.h,
	  common/BaseWorld.h, common/OOGThing.cpp, common/OOGThing.h,
	  common/op_switch.h, common/refno.h, common/types.h,
	  rulesets/BaseMind.cpp, rulesets/BaseMind.h, rulesets/Character.cpp,
	  rulesets/Character.h, rulesets/Creator.cpp, rulesets/Creator.h,
	  rulesets/Entity.cpp, rulesets/Entity.h, rulesets/Food.cpp,
	  rulesets/Food.h, rulesets/MemMap.cpp, rulesets/Plant.cpp,
	  rulesets/Plant.h, rulesets/Py_Map.cpp, rulesets/PythonMindScript.cpp,
	  rulesets/PythonThingScript.cpp, rulesets/Stackable.cpp,
	  rulesets/Stackable.h, rulesets/Thing.cpp, rulesets/Thing.h,
	  rulesets/World.cpp, rulesets/World.h, server/Account.cpp,
	  server/Account.h, server/Admin.cpp, server/Admin.h,
	  server/CommClient.cpp, server/Connection.cpp, server/Connection.h,
	  server/Connection_methods.h, server/ExternalMind.cpp,
	  server/ExternalMind.h, server/Lobby.cpp, server/Lobby.h,
	  server/Player.cpp, server/Player.h, server/WorldRouter.cpp,
	  server/WorldRouter.h, tests/Creatortest.cpp, tests/Worldtest.cpp:
	  Add a new Operation typedef to clean up headers, and get round
	  limitation in doxygen.

2004-12-06  Al Riddoch  <alriddoch@zepler.org>

	* physics/Collision.cpp: Remove unused function stub.

2004-12-05  Al Riddoch  <alriddoch@zepler.org>

	* common/log.cpp: Add errno include required by more recent compilers.

2004-12-05  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Python_API.cpp, server/CommListener.cpp:
	  Remove redundant <cstdio> includes.

2004-12-05  Al Riddoch  <alriddoch@zepler.org>

	* common/log.cpp, common/log.h: Add a new logging function to log
	  errors from libc.

	* server/CommListener.cpp, server/CommServer.cpp: Use new function
	  rather than perror for logging libc errors.

2004-12-04  Al Riddoch  <alriddoch@zepler.org>

	* tests/IGEntityExerciser.h: Add missing Atlas include.

2004-12-04  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.h: Add missing <list> include.

	* tests/type_utilstest.cpp: Add missing wfmath include.

2004-12-03  Al Riddoch  <alriddoch@zepler.org>

	* common/inheritance.cpp, common/inheritance.h, common/refno.h,
	  common/type_utils.h, rulesets/Entity.cpp, rulesets/LineProperty.cpp,
	  rulesets/MemMap.h, rulesets/Py_Oplist.h, rulesets/Script.h,
	  server/Account.cpp, server/Admin.cpp, server/EntityFactory.h,
	  server/Persistance.h, server/Player.cpp, server/WorldRouter.cpp,
	  tests/EntityExerciser.h, tests/type_utilstest.cpp:
	  Clean up some more redundant includes.

2004-12-03  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp, rulesets/Creator.cpp, rulesets/Entity.cpp,
	  rulesets/Food.cpp, rulesets/Plant.cpp, rulesets/Thing.cpp,
	  rulesets/World.cpp: Remove some redundant includes.

2004-12-03  Al Riddoch  <alriddoch@zepler.org>

	* client/BaseClient.cpp, client/BaseClient.h,
	  client/CharacterClient.cpp, client/CharacterClient.h,
	  client/ClientConnection.cpp, client/ClientConnection.h,
	  client/CreatorClient.cpp, client/CreatorClient.h,
	  client/Py_CreatorClient.cpp, common/BaseEntity.cpp,
	  common/BaseEntity.h, common/BaseWorld.h, common/custom.cpp,
	  common/inheritance.cpp, common/inheritance.h,
	  common/inheritance_impl.h, common/op_switch.h, common/type_utils.h,
	  common/types.h, common/utility.cpp, common/utility.h,
	  modules/Location.cpp, rulesets/BaseMind.cpp, rulesets/BaseMind.h,
	  rulesets/Character.cpp, rulesets/Character.h, rulesets/Creator.cpp,
	  rulesets/Creator.h, rulesets/Entity.cpp, rulesets/Entity.h,
	  rulesets/EntityProperties.cpp, rulesets/Entity_getLocation.h,
	  rulesets/Food.cpp, rulesets/Food.h, rulesets/MemMap.cpp,
	  rulesets/MemMap.h, rulesets/Missile.h, rulesets/Pedestrian.cpp,
	  rulesets/Plant.cpp, rulesets/Plant.h, rulesets/Py_Mind.cpp,
	  rulesets/Py_Object.cpp, rulesets/Py_Operation.cpp,
	  rulesets/Py_Operation.h, rulesets/Py_Thing.cpp,
	  rulesets/PythonMindScript.h, rulesets/PythonScript.h,
	  rulesets/PythonThingScript.h, rulesets/Python_API.cpp,
	  rulesets/Script.cpp, rulesets/Script.h, rulesets/Stackable.cpp,
	  rulesets/Stackable.h, rulesets/Thing.cpp, rulesets/Thing.h,
	  rulesets/World.cpp, rulesets/World.h,
	  server/Account.cpp, server/Account.h server/Admin.cpp, server/Admin.h,
	  server/CommClient.cpp, server/Connection.cpp, server/Connection.h,
	  server/EntityFactory.cpp, server/EntityFactory.h, server/Lobby.cpp,
	  server/Lobby.h, server/Persistance.cpp, server/Persistance.h,
	  server/Persistor.cpp, server/Player.cpp, server/Player.h,
	  server/ServerRouting.cpp, server/ServerRouting.h,
	  server/TrustedConnection.cpp, server/TrustedConnection.h,
	  server/WorldRouter.cpp, server/WorldRouter.h, tests/Areatest.cpp,
	  tests/Charactertest.cpp, tests/Creatortest.cpp,
	  tests/EntityExerciser.h, tests/Entitytest.cpp, tests/Foodtest.cpp,
	  tests/IGEntityExerciser.h, tests/Linetest.cpp, tests/Planttest.cpp,
	  tests/Stackabletest.cpp, tests/Structuretest.cpp, tests/Thingtest.cpp,
	  tests/Worldtest.cpp, tests/allOperations.h, tests/inheritancetest.cpp,
	  tests/utilitytest.cpp, tools/cycmd.cpp:
	  Modify the entity interface so that all Operation methods
	  take references to RootOperation, as its cleaner, and requires
	  less nasty casts. Clean up operations in headers generally.

2004-11-29  Al Riddoch  <alriddoch@zepler.org>

	* RELEASE-check: Update list of things to do when releasing.

	* TODO: Updated.

	* TODO.norway: Remove completed items.

2004-11-29  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.cpp, common/BaseEntity.h, common/BaseWorld.cpp,
	  common/BaseWorld.h, common/Burn.h, common/Chop.h, common/Cut.h,
	  common/Database.cpp, common/Database.h, common/Eat.h,
	  common/Generic.h, common/Load.h, common/Nourish.h,
	  common/OOGThing.cpp, common/OOGThing.h, common/Save.h,
	  common/Setup.h, common/Tick.h, common/accountbase.cpp,
	  common/accountbase.h, common/const.cpp, common/const.h,
	  common/custom.cpp, common/debug.h, common/globals.cpp,
	  common/globals.h, common/inheritance.cpp, common/inheritance.h,
	  common/log.cpp, common/log.h, common/op_switch.h, common/random.h,
	  common/serialno.h, common/system.cpp, common/system.h,
	  common/type_utils.h, common/types.h, common/utility.cpp,
	  common/utility.h: Update copyright dates in files as appropriate.

2004-11-29  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Python_API.cpp: Clear up the logging wrappers.
	  Add python wrapper for squareDistance which is more efficient
	  in the goal code that distanceTo. Remove some old python functions
	  which serve no purpose. Move distanceTo and squareDistance into
	  their own module.

	* rulesets/basic/mind/NPCMind.py: Remove obsolete import.

	* rulesets/basic/mind/goals/common/misc_goal.py,
	  rulesets/basic/mind/goals/common/move.py,
	  rulesets/basic/mind/goals/humanoid/construction.py: Use the new
	  physics.square_distance where linear distance is required
	  in goals.

2004-11-29  Al Riddoch  <alriddoch@zepler.org>

	* common/operations.cpp, common/operations.h, common/Unseen.h:
	  Add new unseen operation.

2004-11-29  Al Riddoch  <alriddoch@zepler.org>

	* physics/BBox.cpp, physics/BBox.h: Add functions to cheapy
	  determine the bounding radius of a bounding box.

	* physics/Collision.cpp: Add a coarse collision test to the beginning
	  of collision prediction, to avoid the full expensive test in
	  most cases.

2004-11-29  Al Riddoch  <alriddoch@zepler.org>

	* server/Connection.h, server/TrustedConnection.h: Make
	  verifyCredentials protected.

2004-11-24  Al Riddoch  <alriddoch@zepler.org>

	* server/PersistantThingFactory_impl.h, server/PersistantThingFactory.h:
	  Add a flag indicating whether a thing factory owns its persistor
	  object, so that the destructor knows whether to delete it.
	  Leak now fixed.

	* server/EntityFactory.cpp: Clear the entity factories dictionary.

	* common/inheritance.cpp: Fix leak of operation factories by flushing
	  and clearing the factory dictionary.

2004-11-24  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.cpp: Fix leak of Property objects.

2004-11-24  Al Riddoch  <alriddoch@zepler.org>

	* common/utility.cpp: Add a FIXME note about more correctly
	  converting a message to an op.

	* server/CommClient.h, server/CommClient.cpp: Call new shutdown()
	  method in skstream instead of close when disconnecting or
	  timing out, so that the socket is still valid. Otherwise
	  there is no reliable way to detect that the socket is no longer
	  connected.

	* server/CommClient.h, server/CommClient.cpp, server/Account.cpp,
	  server/Connection.h, server/Connection.cpp: Rename close() to
	  disconect() to more accuratly reflect its function.

	* server/CommServer.h, server/CommServer.cpp: Add an implementation
	  based on epoll which is used if available. Much more efficient
	  and scalable.

	* tools/cycmd.cpp: Fix a couple of memory leaks.

2004-11-21  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Check for epoll.

2004-11-20  Al Riddoch  <alriddoch@zepler.org>

	* client/CreatorClient.cpp, rulesets/Py_BBox.h, rulesets/Py_Optime.h,
	  rulesets/Py_Point3D.h, rulesets/Py_Quaternion.h,
	  rulesets/Py_Vector3D.h: Re-order Python.h includes to get rid of
	  some stupid warnings.

	* rulesets/Py_World.cpp: Add a cast when passing float time to
	  WorldTime which takes in int.

2004-11-20  Al Riddoch  <alriddoch@zepler.org>

	* server/Idle.cpp, server/Idle.h: New Idle class missing from
	  previous commit.

2004-11-20  Al Riddoch  <alriddoch@zepler.org>

	* server/CommListener.cpp,
	  server/CommMetaClient.cpp, server/CommMetaClient.h, 
	  server/CommPSQLSocket.cpp, server/CommPSQLSocket.h
	  server/CommServer.cpp, server/CommServer.h,
	  server/CommUnixListener.cpp, server/server.cpp:
	  Replace CommIdleSocket with pure virtual inferface Idle,
	  and use multiple inheritance in classes which are both sockets
	  and idlers. Rename add() in CommServer to make its function cleaner,
	  and move its implementation into the cpp file in preparation for
	  a more powerful CommServer implementation.

2004-11-20  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/MindFactory.cpp, rulesets/Py_Object.h,
	  rulesets/Py_Operation.h, rulesets/PythonScript.h,
	  rulesets/Python_API.cpp: Include Python.h first to avoid some
	  header conflicts.

2004-11-19  Al Riddoch  <alriddoch@zepler.org>

	* Release version 0.3.6.

2004-11-19  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/define_world.py: Add the NPC settler to the world.

2004-11-19  Al Riddoch  <alriddoch@zepler.org>

	* README: Updated to latest contents of README.sgml

	* cyphesis.spec.in, rulesets/Makefile.am: Remove the acorn and
	  werewolf rules from the distribution, to simplify things.

2004-11-19  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/world/objects/tools/Cleaver.py: Scrub some debug
	  output.

2004-11-19  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/Knowledge.py: Fix nasty problem caused because
	  the default arguments to constructor meant that all knowledge
	  was shared between all entities, causing invalid pointers in
	  the wrong places.

	* rulesets/MemMap.h: Add const to find method, as it should be.

2004-11-18  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.cpp: Add some checks and error reporting that
	  prevent a segfault when distance_to is used in the mind code.

2004-11-18  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp, rulesets/Plant.cpp: Encapsulate the
	  debugging output relating to tool use into the debug macro, so it
	  is no longer printed.

	* rulesets/basic/mind/goals/common/move.py: Re-write a couple
	  of movement goals so they work more reliably.

	* rulesets/basic/mind/goals/humanoid/construction.py: Comment out
	  debugging output.

	* rulesets/mason/define_world.py: More additions to NPC settler test.

2004-11-18  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/editor.py: Improve the define_world API by making
	  the type argument optional.

2004-11-18  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/NPCMind.py: Use primary type as key in
	  mind.things when name is not useful.

2004-11-18  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/goals/common/move.py:
	  Try and make some of the move goals a bit more legible.

	* rulesets/basic/mind/goals/humanoid/construction.py:
	  Fix a bunch of bugs in the resource gathering goals.
	  These now basically work.

	* rulesets/mason/define_world.py: Add knowledge of a test location
	  to the settler NPC testing code.

2004-11-17  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/goals/common/move.py: Fix mistake converting
	  pursuit goal from get_xyz() to distance_to().

2004-11-17  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/goals/humanoid/construction.py: New currently
	  non-functional goals for construction related tasks.

	* rulesets/mason/define_world.py: Add new test for construction
	  goals.

2004-11-17  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.h, modules/Location.cpp, rulesets/Entity.h:
	  Finally remove the getXyz() implementation, this getting
	  rid of absolute coords entirely.

2004-11-17  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Thing.cpp, rulesets/Py_Mind.cpp,
	  client/Py_CreatorClient.cpp: Remove get_xyz() from the API
	  available to Python. Its never necessary to deal in absolute
	  coordinates.

2004-11-17  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/acorn/mind/PigMind.py,
	  rulesets/basic/mind/goals/common/misc_goal.py,
	  rulesets/basic/mind/goals/common/move.py,
	  rulesets/mason/define_world.py,
	  rulesets/mason/mind/PigMind.py: Re-write all code that uses
	  get_xyz() to use the code for calculating relative distance
	  vector.

2004-11-17  Al Riddoch  <alriddoch@zepler.org>

	* Purge a bunch of very historic python files from the client
	  directory.

2004-11-17  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/MemMap.cpp: Add checks so that only visible entities
	  in the memory map are returned by the find function.

2004-11-16  Al Riddoch  <alriddoch@zepler.org>

	* server/CommServer.h: Add a method to remove CommIdleSocket
	  objects.

	* server/CommIdleSocket.cpp: Automatically remove this object
	  from the server when its destroyed.

	* server/CommPSQLSocket.cpp: Return an error if we get an error
	  reading from the RDBMS socket. This seems to indicate that the
	  connection is lost. Losing connection to database should not now
	  cause this code to segfault.

2004-11-16  Al Riddoch  <alriddoch@zepler.org>

	* server/server.cpp: Remove some debug output.

2004-11-16  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Add support for Python 2.4 and drop support
	  for 1.5 and 1.6.

2004-11-16  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp, common/stringstream.h, rulesets/MemMap.cpp,
	  rulesets/World.cpp, server/CommClient.cpp, server/Persistor_impl.h,
	  server/Restorer_impl.h, server/WorldRouter.cpp, server/server.cpp,
	  tools/cyisoload.cpp: Switch code to including <sstream> directly
	  and remove obsolete wrapper header.

2004-11-16  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Plant.cpp: Quick hack to allow axe to be used to
	  convert felled tree into a lumber object.

2004-11-16  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Clarify error message on tool use.

	* rulesets/Thing.cpp: Allow setting of mode attribute from args
	  of move op for efficiency.

	* server/Player.cpp, server/Admin.cpp, server/Player.cpp:
	  Add TO to all accounts at the account level, so the client
	  can tell they are for the account.

2004-11-15  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Try and improve some more configure errors.

	* rulesets/Plant.cpp: Prevent a segfault in the unit tests.

2004-11-14  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Thing.cpp: Tighten up check on Move ops, and improve
	  efficiency by removing temporaries.

2004-11-13  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/world/objects/tools/Axe.py,
	  rulesets/Plant.cpp: Make trees rotate 90 degress when they are
	  chopped, simulating being cut down.

2004-11-12  Al Riddoch  <alriddoch@zepler.org>

	* server/CommMDNSPublisher.cpp: Add some commented debug output.

2004-11-12  Al Riddoch  <alriddoch@zepler.org>

	* server/CommMDNSPublisher.cpp: Fix segfault problems by using an
	  RFC compliant service type. Fill out the error handling and
	  reporting and clean out the debug output.

2004-11-11  Al Riddoch  <alriddoch@zepler.org>

	* server/CommMDNSPublisher.cpp, server/CommMDNSPublisher.h: New
	  class to publish service using zeroconf.

	* server/server.cpp: Use new CommMDNSPublisher class.

	* configure.ac: Detect howl libraries, optionally. Clean up a bunch
	  of unused variables.

2004-11-08  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Print a more friendly message including a URL for
	  more info if the required WF libraries can't be found.

2004-11-07  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.h, server/WorldRouter.cpp: Modify operation()
	  to it takes a non-const reference, thus removing the need to
	  copy broadcast ops to change the TO attribute.

2004-11-06  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp, rulesets/EntityProperties.cpp,
	  rulesets/Py_Map.cpp, rulesets/Thing.cpp: Use pre-increment in for
	  loops.

	* server/WorldRouter.cpp: Optimise inserting ops into the queue.

2004-11-06  Al Riddoch  <alriddoch@zepler.org>

	* aiclient/ClientConnection.cpp, client/BaseClient.cpp,
	  client/CharacterClient.cpp, client/ClientConnection.cpp,
	  common/Database.cpp, common/FormattedXMLWriter.cpp,
	  common/inheritance.cpp, common/refno.h, common/terrain_utils.cpp,
	  common/type_utils.h, common/utility.cpp, modules/WorldTime.cpp,
	  modules/WorldTime.h, physics/Collision.cpp, rulesets/Area.cpp,
	  rulesets/BaseMind.cpp, rulesets/Character.cpp, rulesets/Entity.cpp,
	  rulesets/Line.cpp, rulesets/MemMap.cpp, rulesets/MemMap_methods.h,
	  rulesets/Movement.cpp, rulesets/Plant.cpp, rulesets/Py_Map.cpp,
	  rulesets/Py_Object.cpp, rulesets/Py_Operation.cpp,
	  rulesets/Py_Oplist.cpp, rulesets/PythonMindScript.cpp,
	  rulesets/PythonThingScript.cpp, rulesets/Python_API.cpp,
	  rulesets/Stackable.cpp, rulesets/TerrainProperty.cpp,
	  rulesets/Thing.cpp, rulesets/World.cpp, server/Account.cpp,
	  server/CommClient.cpp, server/CommServer.cpp, server/Connection.cpp,
	  server/EntityFactory.cpp, server/Lobby.cpp, server/Persistance.cpp,
	  server/Player.cpp, server/Restoration.cpp, server/ServerRouting.cpp,
	  server/WorldRouter.cpp, tests/EntityExerciser.h,
	  tests/IGEntityExerciser.h, tests/inheritancetest.cpp,
	  tools/cycmd.cpp, tools/cyconvertrules.cpp, tools/cydbload.cpp,
	  tools/cyloadrules.cpp:
	  Tweak for loops to avoid creating a temporary iterator each
	  iteration.

	* tests/type_utilstest.cpp: New test for function which does
	  list conversions.

2004-11-05  Al Riddoch  <alriddoch@zepler.org>

	* common/Property.cpp, common/Property.h, common/Property_impl.h:
	  Add a default add() method to the Property base class, as its
	  often the same in derived classes.

	* rulesets/TerrainProperty.cpp, rulesets/TerrainProperty.h:
	  Remove add() method, as its now covered by the default in
	  the base class.

	* rulesets/Entity.cpp: Fix for loop not to create temporary for
	  end() on every iteration.

2004-11-05  Al Riddoch  <alriddoch@zepler.org>

	* common/Property.h: Remove obsolete FIXME comment.

2004-11-04  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Remove maintainer mode option.

2004-11-04  Al Riddoch  <alriddoch@zepler.org>

	* cyphesis.spec.in: Resolve issues with upgrading from earlier
	  versions by adding a trigger if cyphesis-service is removed
	  when installing this rpm.

2004-11-04  Al Riddoch  <alriddoch@zepler.org>

	* cyphesis.spec.in: Ensure rpm spec correctly obsoletes the old
	  mason and service rpms.

	* modules/Location.cpp: Get rid of accidentally commited change
	  that screws up orientation.

	* rulesets/Character.cpp: Provide more info about ops which
	  have TO set incorrectly.

	* rulesets/MemMap.cpp: Don't set TO on look ops from memory.

	* rulesets/basic/mind/NPCMind.py: Don't set TO on tick ops
	  from the mind.

2004-11-04  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Add notes, and a check to ensure that
	  ops from the mind don't have TO set.

	* rulesets/basic/mind/NPCMind.py,
	  rulesets/basic/mind/goals/common/misc_goal.py,
	  rulesets/basic/mind/goals/humanoid/mason.py: Don't set TO or FROM
	  on goals from the mind.

2004-11-04  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Plant.h, rulesets/Plant.cpp: Add handler for chop so
	  we can chop down vegetation.

	* rulesets/basic/world/objects/tools/Axe.py: Modify Axe to comply
	  with new tool use mechanism.

	* rulesets/basic/mind/goals/humanoid/transaction.py,
	  rulesets/basic/mind/goals/common/misc_goal.py,
	  rulesets/mason/define_world.py: Update butcher goals to use tool
	  use mechanism.

	* rulesets/Python_API.cpp: Ensure entities created from Python
	  have an objtype.

2004-11-02  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.cpp, rulesets/Entity.h: Add has() method
	  to query if an entity has an attribute with a given name.

	* rulesets/Character.cpp, rulesets/Character.h: Implement tool
	  wield and use operations.

	* data/mason.xml: Add operations list to the cleaver.

	* rulesets/mason/world/objects/tools/Cleaver.py: Simplify the chop
	  operation the cleaver expects to get from its user.

	* tools/cyloadrules.cpp: Remove some commented out cruft and
	  debugging output.

2004-11-02  Al Riddoch  <alriddoch@zepler.org>

	* common/inheritance_impl.h, common/inheritance.h,
	  common/inheritance.cpp: Add a new method for copying new
	  operation into an existing operation object, for scenarios
	  where operator new is undesirable.

2004-11-02  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.cpp, rulesets/Entity.h: Make get(), set(), and
	  addToMessage() non-virtual, and convert them to using new property
	  mechanism. Add the necessary properties in the constructor.

	* rulesets/Area.cpp, rulesets/Area.h, rulesets/Character.cpp,
	  rulesets/Character.h, rulesets/Line.cpp, rulesets/Line.h,
	  rulesets/Plant.cpp, rulesets/Plant.h, rulesets/Stackable.cpp,
	  rulesets/Stackable.h, rulesets/World.cpp, rulesets/World.h:
	  Remove virtual get() set() and addToMessage() methods. These
	  are now entirely in Entity.

	* rulesets/World.cpp, rulesets/World.h: Remove some functions
	  for handling terrain data now handled by properties.
	  Clean up Set code to get rid of nasty unnecessary exception
	  try / catch block.

2004-11-02  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Thing.cpp: Clean up Set code to get rid of
	  nasty unnecessary exception try / catch block.

2004-11-02  Al Riddoch  <alriddoch@zepler.org>

	* tests/Charactertest.cpp, tests/Creatortest.cpp:
	  Update tests to check for all static attributes.

	* tests/Entitytest.cpp, tests/Structuretest.cpp,
	  tests/Thingtest.cpp: Update the number of attributes
	  entities should have, now that LOC may not be present.

2004-11-02  Al Riddoch  <alriddoch@zepler.org>

	* common/Property.cpp: Add required type checks to property set
	  methods.

	* modules/Location.cpp: Don't send LOC attribute when the
	  pointer is NULL.

	* rulesets/EntityProperties.cpp: Add a Property specialisation
	  for list of IDs.

	* rulesets/MemMap.cpp: Fix the memory code to use the correct
	  PARENTS attribute rather than type, which is not an Atlas
	  attribute.

	* tests/IGEntityExerciser.h: Add debugging output to attribute
	  checks.

2004-10-31  Al Riddoch  <alriddoch@zepler.org>

	* server/Lobby.cpp: Tweak incorrect header order.

2004-10-31  Al Riddoch  <alriddoch@zepler.org>

	* common/Property.cpp, common/Property.h, common/Property_impl.h:
	  Add new ImmutableProperty for properties that cannot be
	  modified, and hold a const reference.

	* rulesets/EntityProperties.cpp: Add some specialisations of
	  Property to handle attributes of Entity.

	* rulesets/LineProperty.h, rulesets/LineProperty.cpp:
	  Property class for handling linear list of coordinates.

	* rulesets/TerrainProperty.cpp, rulesets/TerrainProperty.h:
	  Property class for handling Mercator terrain.

2004-10-29  Al Riddoch  <alriddoch@zepler.org>

	* cyphesis.spec.in: Modify the rpm spec to build fewer packages,
	  so that everything required to run a server is in one package.

2004-10-27  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.h, rulesets/Character.cpp: Add new variable for
	  storing currently tool.

2004-10-27  Al Riddoch  <alriddoch@zepler.org>

	* common/Property.cpp, common/Property.h, common/Property_impl.h:
	  New class to automate and simplify handled of hard coded
	  proerties.

	* tests/Propertytest.cpp: Test for new Property class.

2004-10-27  Al Riddoch  <alriddoch@zepler.org>

	* common/globals.cpp: Change default startup TOD to 9am so that
	  its more light.

2004-10-27  Al Riddoch  <alriddoch@zepler.org>

	* common/inheritance_impl.h: Oops, missing factory template
	  specialisation.

2004-10-27  Al Riddoch  <alriddoch@zepler.org>

	* common/Generic.h: Add required RootOperation include.

	* common/inheritance.h, common/inheritance.cpp, common/custom.cpp:
	  Add operation factory to the inheritance class, and to all
	  the calls which install new ops.

	* tests/inheritancetest.cpp: Add new test for the op factory
	  capability of inheritance.

2004-10-26  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/goals/common/misc_goal.py: Clarify logic
	  in get_knowledge().

	* rulesets/mason/define_world.py: Make the butcher work all day for
	  now. Give all the warriors arrows. Add a test function for the
	  deer.

2004-10-26  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/werewolf/world/objects/tools/Gallows.py: Make sure
	  Point3D module is imported.

	* rulesets/basic/mind/goals/humanoid/transaction.py: Fix a couple
	  of bugs with pig seller code.

2004-10-25  Al Riddoch  <alriddoch@zepler.org>

	* Release version 0.3.5.

2004-10-25  Al Riddoch  <alriddoch@zepler.org>

	* Increment version to 0.3.5.

2004-10-25  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/werewolf/world/objects/tools/Gallows.py,
	  rulesets/basic/world/objects/tools/Bow.py,
	  rulesets/basic/world/objects/plants/Tree.py,
	  rulesets/basic/world/objects/buildings/House.py,
	  rulesets/basic/mind/goals/humanoid/transaction.py,
	  rulesets/basic/mind/goals/common/misc_goal.py:
	  Fix bugs initialising Location ensuring the second
	  arg is a Point3D, not a Vector3D for position.
	  Fixes pig purchasing.

	* rulesets/basic/mind/goals/humanoid/mason.py:
	  Fix the velocity check for escaping pigs.

	* rulesets/Py_Point3D.cpp: Fix Point3D subtraction operator to
	  allow subtraction of both Point and Vector. Fixes pig merchant
	  goal for keeping pigs.

2004-10-24  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Vector3D.cpp: Change isValid() to work with older
	  versions of python with bool support in the API.

2004-10-23  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Add a note to check the code.

	* rulesets/basic/mind/goals/humanoid/transaction.py: Remove debug
	  output.

	* rulesets/basic/mind/goals/common/move.py: New goal to accompany
	  another person.

	* rulesets/basic/mind/goals/common/misc_goal.py: Use new accompany
	  goal for hirelings.

	* rulesets/Python_API.cpp: Fix distance_to arg checking error
	  message.

	* rulesets/Py_Vector3D.cpp: Add square magnitude and distance checking
	  methods.

2004-10-23  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/Knowledge.py: Simplify constructor.

	* rulesets/Entity.h, rulesets/Entity.cpp: Make getXyz() inline.

	* modules/Location.h: Remove obsolete unimplemented
	  getXyz() method.

2004-10-23  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.cpp: Ensure that orientation is not used
	  when its invalid.

	* rulesets/Py_Mind.cpp, rulesets/Py_Thing.cpp: Assert that the
	  return value of getXyz() is valid.

	* rulesets/mason/define_world.py: Add a test function to add
	  a deer and a chicken.

2004-10-11  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.cpp, modules/Location.h: Add new function for
	  usefully calculating the distance vector of another entity.

	* tests/distancetest.cpp: Update test to check new distance
	  function.

	* rulesets/Python_API.cpp: Make the new distance vector function
	  available to python rather than the relative postion function.

	* rulesets/basic/mind/Knowledge.py, rulesets/basic/mind/NPCMind.py:
	  Ensure that Knowledge really does handle arbitrary triples.

	* rulesets/basic/mind/goals/common/misc_goal.py: Add new version
	  of transaction goal for transactions for hirelings.

	* rulesets/basic/mind/goals/humanoid/transaction.py: Complete
	  the implementation of the trigger goal for hirelings.

	* rulesets/mason/define_world.py: Move the mercenaries closer to
	  origin for debugging.

2004-10-05  Al Riddoch  <alriddoch@zepler.org>

	* client/ClientConnection.cpp, common/globals.cpp, common/globals.h,
	  server/CommUnixListener.cpp, tools/cycmd.cpp: Add a global and a
	  config option for the unix socket filename. Update man pages
	  to document the config option.

2004-10-05  Al Riddoch  <alriddoch@zepler.org>

	* client/client.cpp, common/globals.cpp, server/server.cpp,
	  tools/cycmd.cpp: Get rid of nasy cast, and use string accessor
	  for varconf variables.

2004-10-05  Al Riddoch  <alriddoch@zepler.org>

	* tools/cycmd.cpp, tools/cyloadrules.cpp: Update tools to support
	  centralised varconf options on the command line. Update man
	  pages accordingly.

2004-10-05  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Python_API.cpp: Process python output into clean log
	  output.

2004-10-04  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Ensure that database notices and errors
	  get reported cleanly by the log system.

2004-10-04  Al Riddoch  <alriddoch@zepler.org>

	* server/Connection.cpp: Move the code to handle destruction of
	  a connection into the destructor. The destroy method can go
	  once this is well tested.

	* server/CommListener.cpp: Return -1 on error.

	* server/Persistance.cpp: Return a different error code depending
	  on why database init failed.

	* server/server.cpp: Try and provide more helpfull error messages
	  depending on why database init failed.

2004-10-03  Al Riddoch  <alriddoch@zepler.org>

	* Require varconf 0.6.2 for its superior command line handling.

	* client/client.cpp, common/globals.cpp, server/server.cpp,
	  server/slave.cpp, tools/cycmd.cpp, tools/cyloadrules.cpp,
	  tools/cypasswd.cpp: loadConfig() now returns the index of
	  the first non-option commandline arg.

	* client/client.cpp: Use new config feature to allow user to
	  specify the client function to use on the command line far
	  more easily.

2004-10-03  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.cpp, physics/Collision.cpp, rulesets/Character.cpp,
	  rulesets/Entity.cpp, rulesets/Movement.cpp, rulesets/Movement.h,
	  rulesets/Pedestrian.cpp: Make sure orientation is not used if it
	  is not valid.

2004-10-03  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/world/objects/buildings/House3.py: Fix script
	  to pass Point to Location constructor for pos.

2004-10-03  Al Riddoch  <alriddoch@zepler.org>

	* client/client.cpp, common/globals.cpp, common/globals.h,
	  common/inheritance.cpp, common/inheritance.h, server/server.cpp,
	  server/slave.cpp, tools/cycmd.cpp, tools/cyloadrules.cpp,
	  tools/cypasswd.cpp:
	  Use int for returning error status.

2004-10-03  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp, common/Database.h, common/accountbase.cpp,
	  common/accountbase.h, server/Persistance.cpp, server/Persistance.h,
	  server/server.cpp, tools/cyloadrules.cpp, tools/cypasswd.cpp:
	  Use int for returning error status.

2004-10-03  Al Riddoch  <alriddoch@zepler.org>

	* server/CommListener.cpp, server/CommListener.h,
	  server/CommUnixListener.cpp, server/CommUnixListener.h:
	  Use int for returning error status.

2004-10-03  Al Riddoch  <alriddoch@zepler.org>

	* server/CommClient.cpp, server/CommClient.h, server/CommListener.cpp,
	  server/CommListener.h, server/CommMetaClient.cpp,
	  server/CommMetaClient.h, server/CommPSQLSocket.cpp,
	  server/CommPSQLSocket.h, server/CommServer.cpp, server/CommSocket.h,
	  server/CommUnixListener.cpp, server/CommUnixListener.h:
	  Use int for returning error status.

2004-10-02  Al Riddoch  <alriddoch@zepler.org>

	* client/BaseClient.cpp, client/BaseClient.h,,
	  client/CharacterClient.cpp, client/CharacterClient.h,
	  client/ClientConnection.cpp, client/ClientConnection.h,
	  client/CreatorClient.cpp, client/CreatorClient.h,
	  client/ObserverClient.cpp, client/ObserverClient.h,
	  client/Py_CreatorClient.cpp, client/Py_CreatorClient.h,
	  client/client.cpp, server/CommListener.cpp,
	  server/CommListener.h, server/CommMetaClient.cpp,
	  server/CommMetaClient.h, server/CommUnixListener.cpp,
	  server/CommUnixListener.h, server/server.cpp, tools/cycmd.cpp:
	  Use int for returning error status.

2004-10-02  Al Riddoch  <alriddoch@zepler.org>

	* server/Account.h, server/Admin.cpp, server/Admin.h,
	  server/Player.cpp, server/Player.h: Use int for returning
	  error status from characterError().

2004-10-02  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_BBox.cpp, rulesets/Py_Location.cpp,
	  rulesets/Python_API.cpp: Eliminate some raw stderr output,
	  and replace with python errors, and calls to the log subsystem.

2004-10-02  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Python_API.cpp: Add new python wrapper for
	  relativePosition().

	* common/Database.cpp: Don't need trailing ; on database queries.

2004-09-30  Al Riddoch  <alriddoch@zepler.org>

	* Fix a couple of autoconf macros to stop them from spitting errors.

2004-09-29  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/define_world.py: Add terrain init to default 
	  world init function.

	* Update rpm spec removing the acorn dependency from mason.

	* Release version 0.3.4.

2004-09-29  Al Riddoch  <alriddoch@zepler.org>

	* Fix the manpage rules to work with make dist.

	* Update rpm specs dependencies, and add man pages.

	* Increment version to 0.3.3.

2004-09-28  Al Riddoch  <alriddoch@zepler.org>

	* Complete the manpages, and add copyright and other metadata.

2004-09-28  Al Riddoch  <alriddoch@zepler.org>

	* Add manual pages to the build.

	* tools/cyloadrules.cpp: Fix usage information to be clearer.

2004-09-28  Al Riddoch  <alriddoch@zepler.org>

	* client/BaseClient.cpp, client/BaseClient.h: Rename files for
	  already renamed CommClient class, to avoid name conflict.

	* client/ObserverClient.h: Update for new header name.

2004-09-27  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp, common/terrain_utils.cpp: Disable debugging
	  output.

	* server/Persistor.cpp: Don't update the main entity table if we
	  have no attributes modified other than terrain.

2004-09-27  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp: Remove some debug output.

2004-09-25  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Add multicolumn unique index to array tables
	  to ensure contents is sane.

2004-09-25  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Supress debug output.

	* common/terrain_utils.cpp: Free up database results after processing
	  and supress debug output.

2004-09-24  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.h, modules/Location.cpp: Remove obsolete
	  broken distance functions.

2004-09-24  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp: Use new distance function for determining
	  visible world contents.

2004-09-24  Al Riddoch  <alriddoch@zepler.org>

	* data/mason.xml, data/basic.xml: Tweak rules so that sty and house
	  are light enough to move around.

2004-09-24  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/goals/common/move.py: Update to use new Point3D
	  type for pos.

2004-09-24  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Pedestrian.cpp: Make sure not to transform things
	  with an invalid quaternion.

	* server/WorldRouter.cpp: Remove excessive debugging output.

2004-09-24  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Switch to new distance algorithm for
	  broadcasts.

2004-09-24  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.cpp, modules/Location.h: Improve algorithm
	  of distance function to handle corner cases, and add a second
	  interface so that both scalar distance and relative position
	  can be found.

	* tests/distancetest.cpp: Update tests to test for cases where
	  distance to or from an entity directly below.

2004-09-23  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.cpp, modules/Location.h: Add new improved
	  function to measure the distance between two entities.

	* tests/distancetest.cpp: New test for new distance measuring
	  function.

2004-09-22  Al Riddoch  <alriddoch@zepler.org>

	* data/acorn.xml, data/mason.xml: Fixed spelling of alcohol. Well
	  spotted anubis.

2004-09-22  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.cpp: Transform velocity and orientation when
	  parent changes due to parent destruction.

2004-09-22  Al Riddoch  <alriddoch@zepler.org>

	* common/const.cpp: Turn off persistence again by default.

	* rulesets/Pedestrian.cpp: Update collision resolution to
	  transform velocity and orientation when parent changes.

2004-09-22  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.cpp: Added comment about transforming velocity and
	  orientation.

	* tests/transformtest.cpp: Add more tests for quaternion manipulation.

2004-09-21  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Creator.cpp: Ensure self-destruct delete ops have
	  an argument.

	* tests/transformtest.cpp: Add a vector rotation test to clarify
	  quaternion sign conventions.

2004-09-20  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Fixe debug output to work with new
	  pos type.

	* modules/Location.cpp: Fix one of the transforms, so distance
	  calculation works again.

2004-09-20  Al Riddoch  <alriddoch@zepler.org>

	* physics/Collision.cpp: Need to check whether orientation
	  is valid, and if not apply just translation.

	* rulesets/Py_Location.cpp: Fix an error message to give the right
	  type.

2004-09-20  Al Riddoch  <alriddoch@zepler.org>

	* physics/Vector3D.h, physics/Vector3D.cpp, modules/Location.h,
	  modules/Location.cpp: Convert to using WFMath::Point instead of
	  WFMath::Vector for position.

	* physics/Collision.h, physics/Collision.cpp: Update collision code
	  to use new pos type.

	* rulesets/Py_Point3D.h, rulesets/Py_Point3D.cpp: New python
	  wrappers for WFMath::Point.

	* rulesets/Py_Location.cpp, rulesets/Py_Vector3D.cpp,
	  rulesets/Python_API.cpp:
	  Update python wrappers to take into account new pos type.
	  Ensure that only apropriate functionality is available for
	  point and vector.

	* rulesets/Character.cpp, rulesets/Entity.cpp, rulesets/Entity.h,
	  rulesets/Line.cpp, rulesets/Movement.cpp, rulesets/Movement.h,
	  rulesets/Pedestrian.cpp, rulesets/Pedestrian.h,
	  rulesets/Plant.cpp, rulesets/Thing.cpp, rulesets/World.cpp,
	  server/EntityFactory.cpp, server/WorldRouter.cpp,
	  server/WorldRouter.h: Update the rest of the code for new pos
	  type, converting all places where entity parenting is changed
	  to use WFMath toParentCoords() and toLocalCoords() methods,
	  so that orientation is handled correctly.

	* tests/transformtest.cpp: New test to ensure that toParentCoords()
	  and toLocalCoords() perform as expected.

	* tests/Creatortest.cpp, tests/Locationtest.cpp, tests/Worldtest.cpp,
	  tests/collisiontest.cpp, tests/emergencetest.cpp:
	  Update the rest of the tests.

2004-09-18  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/define_world.py: Fix some typos that messed up
	  terrain, and put a mercenary in the wrong place.

2004-09-18  Al Riddoch  <alriddoch@zepler.org>

	* server/EntityFactory.cpp: Replace check for NULL factory pointer
	  in installFactory() with an assert, as NULL should never occur.

2004-09-18  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/define_world.py: Reproduce bootstrap terrain from
	  World.cpp.

2004-09-17  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/define_world.py: Install new terrain from the client.

2004-09-17  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Implement function for modifying array rows.

	* common/const.cpp: Enable persistence for testing.

	* common/terrain_utils.cpp: Implement function for updating terrain
	  in database after a change.

	* rulesets/World.cpp, rulesets/attributes.h: Add an update flag for
	  terrain, and use it to indicate to the Persistor.

	* rulesets/World.h: Add accessors for variables which track modified
	  terrain, and a function to clear them.

	* server/Persistor.cpp: Implement call to function to update terrain
	  in database.

	* server/Restoration.cpp: Ensure that if world entity is already
	  in database, it gets hooked up appropriatly.

2004-09-14  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp, common/Database.h: Fix queries on ID relation
	  tables. Add methods to result functions for decoding the contents
	  of fields more directly. Implement selecting from array tables.

	* common/terrain_utils.cpp, common/terrain_utils.h: New functions
	  for handling terrain in array database tables.

	* rulesets/World.cpp, rulesets/World.h: Add functionality to track
	  changes to the terrain for persistence purposes.

	* server/EntityFactory.cpp, server/EntityFactory.h, server/server.cpp:
	  Modify the way world entity persistence is bootstrapped to be
	  more consistent.

	* server/Persistor.cpp: Provide specialisations to handle world so
	  that terrain is persisted. Implement storing terrain at entity
	  creation.

	* server/Restoration.cpp, server/Restoration.h: Remove obsolete
	  restoration code. Return a status more accuratly representing
	  when restoration fails because of error, or if there is nothing
	  to restore.

	* server/Restorer.cpp, server/Restorer.h, server/Restorer_impl.h:
	  Convert to using methods for restoring data in the Database class.
	  Implement restoring terrain from the database.

2004-09-07  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Implement inserting into array tables.
	  Modify tables so that key columns are NOT NULL.

	* server/Persistor.cpp: Test creating array rows.

2004-09-07  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.h, common/Database.cpp: Implement creating tables
	  for storing array data.

	* server/Persistor.cpp: Register a 2D array table for storing terrain
	  height point data.

2004-09-06  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Add stubs for new methods.

2004-09-06  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Update FIXME so its clear its the same
	  as all the other orientation related FIXMEs.

	* server/Connection.cpp: New FIXME for password based Logout which
	  won't work.

	* common/Database.h: Add interface for an idea which may help with
	  terrain persistence.

2004-09-06  Al Riddoch  <alriddoch@zepler.org>

	* server/Connection.cpp, rulesets/Creator.cpp, rulesets/Character.cpp:
	  Check and clean up places where args are checked before querying
	  their contents.

	* rulesets/Character.cpp: Assert that Movement::getMoveOperation()
	  always returns an operation, rather than a normal tolerant test.
	  Remove a FIXME about the Python code operations conversion functions.

2004-09-06  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.cpp, rulesets/MemMap.cpp: Modify FIXME text so
	  its clearer which ones are part of the same problem.

	* rulesets/Thing.cpp: Use a Delete pointer for a Delete operation.

	* server/CommServer.cpp, server/CommServer.h: Change references
	  to clients into sockets. Remove unused version of removeSocket()
	  which takes an error message.

2004-09-05  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Python_API.cpp: Use the Generic operation class for ops
	  with no hard coded type.

	* rulesets/Movement.cpp: Make the time periods used when checking
	  collisions dependent on the standard tick time.

2004-09-05  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Creator.cpp: Update a FIXME comment with a new possible
	  solution.

2004-09-05  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/BaseMind.cpp: Use parent of sub op when dispatching
	  sight and sound ops to mind scripts.

2004-09-05  Al Riddoch  <alriddoch@zepler.org>

	* modules/WorldTime.cpp: Use 0-11 for months instead of 1-12.

	* tests/WorldTimetest.cpp: Test the "season" querying interface.

2004-09-05  Al Riddoch  <alriddoch@zepler.org>

	* modules/WorldTime.h, modules/WorldTime.cpp: Clean up typedef
	  and member names, and implement querying the season.

	* client/CharacterClient.cpp: Remove some obsolete unconverted
	  Python code.

	* physics/Collision.h: Update some comments.

	* rulesets/Py_WorldTime.cpp: Implement access to season lookup
	  from scripts.

2004-09-05  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/MemMap.cpp, rulesets/Py_Map.cpp, server/WorldRouter.h:
	  Update comments to remove obsolete FIXMEs.

2004-09-05  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp, server/Account.cpp:
	  Add serialno assignments to character inventory creation ops,
	  and ops from builtin mind.

	* server/WorldRouter.cpp: Remove an obsolete comment.

2004-09-04  Al Riddoch  <alriddoch@zepler.org>

	* client/CharacterClient.cpp, client/CharacterClient.h: Prefix
	  members with m_.

	* client/CommClient.cpp, client/CommClient.h, client/ObserverClient.h:
	  Rename CommClient to BaseClient to avoid name clash with CommClient
	  in the server directory.

2004-09-04  Al Riddoch  <alriddoch@zepler.org>

	* client/CommClient.h, client/CommClient.cpp, client/ObserverClient.h,
	  client/ObserverClient.cpp: Prefix members with m_, and remove
	  pointless inheritance from BaseEntity. Add virtual destructors
	  as we no longer inherit virtual destructors from BaseEntity.

2004-09-04  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Correct some comments.

2004-09-04  Al Riddoch  <alriddoch@zepler.org>

	* server/Connection.cpp, rulesets/Thing.h, rulesets/Entity.h,
	  rulesets/Entity.cpp, rulesets/Creator.h, rulesets/Creator.cpp,
	  rulesets/Character.h, rulesets/Character.cpp: Modify
	  externalOperation() so it no longer returns anything, ensuring
	  that Entity::externalOperation() passes its results back to
	  the world.

2004-09-04  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Check if a Setup op is for the mind
	  before dispatching to script, and ensure that Appearance
	  is always broadcast.

	* server/Account.cpp: No need to broadcase sight(create) when a
	  character is created by an account.

2004-09-04  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Creator.h, rulesets/Creator.cpp: Rename sendMind() to
	  sendExternalMind() to make it clear that its not the same as the
	  method in Character.

	* rulesets/Character.h, rulesets/Character.cpp: Remove world2body()
	  as it was identical in semantics to callOperation().

2004-09-04  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Creator.cpp: Allow creator to handle a few more op
	  types, and use switch to determine what to do.

	* rulesets/Character.cpp: Remove setting and checking of sub_to
	  on Use and Wield ops as it is not relevant.

2004-09-03  Al Riddoch  <alriddoch@zepler.org>

	* tests/IGEntityExerciser.h: Fix to work with gcc 3.4 stricter
	  template rules.

2004-09-03  Al Riddoch  <alriddoch@zepler.org>

	* tests/EntityExerciser.h: Update test harness for new dispatch
	  mechanism.

2004-09-03  Al Riddoch  <alriddoch@zepler.org>

	* client/CharacterClient.cpp, client/CharacterClient.h,
	  client/CommClient.cpp, common/BaseEntity.cpp,
	  common/BaseEntity.h, common/OOGThing.cpp,
	  common/OOGThing.h, common/op_switch.h,
	  rulesets/BaseMind.cpp, rulesets/BaseMind.h,
	  rulesets/Character.cpp, rulesets/Character.h,
	  rulesets/Creator.cpp, rulesets/Creator.h, rulesets/Entity.cpp,
	  rulesets/Entity.h, rulesets/Food.cpp, rulesets/Food.h,
	  rulesets/Missile.h, rulesets/Plant.cpp, rulesets/Plant.h,
	  rulesets/PythonMindScript.cpp, rulesets/PythonThingScript.cpp,
	  rulesets/Stackable.cpp, rulesets/Stackable.h, rulesets/Thing.cpp,
	  rulesets/Thing.h, rulesets/World.cpp, rulesets/World.h,
	  server/Account.cpp, server/Account.h, server/Admin.cpp,
	  server/Admin.h, server/CommClient.cpp, server/Connection.cpp,
	  server/Connection.h, server/ExternalMind.cpp, server/ExternalMind.h,
	  server/Lobby.cpp, server/Lobby.h, server/Player.cpp,
	  server/Player.h, server/WorldRouter.cpp:
	  Re-work basic op dispatch mechanism so result is passed by
	  a reference argument rather than returning by value.

2004-09-01  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.h, common/OOGThing.h, rulesets/Area.h,
	  rulesets/BaseMind.h, rulesets/Entity.h, rulesets/Food.h,
	  rulesets/Line.h, rulesets/MemEntity.h, rulesets/Missile.h,
	  rulesets/Plant.h, rulesets/Stackable.h, rulesets/Structure.h,
	  rulesets/Thing.h, rulesets/World.h, server/Account.h,
	  server/Connection.h, server/Lobby.h: Update the comments describing
	  the function of these classes.

	* rulesets/Character.h, server/Account.cpp, server/Connection.cpp,
	  server/ExternalMind.cpp, server/ExternalMind.h: Make ExternalMind
	  inherit from BaseEntity, eliminating the need for the name argument
	  to the constructor and simplifying the class greatly by dropping
	  loads of unused inherited functionality.

2004-08-29  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.cpp, common/BaseEntity.h,
	  rulesets/Character.cpp, rulesets/Creator.cpp,
	  server/CommClient.cpp, server/ExternalMind.cpp,
	  server/ExternalMind.h, client/CharacterClient.cpp,
	  client/CommClient.cpp: Remove the message method from BaseEntity
	  and everything that inherits from it - its redundant.

	* tests/Charactertest.cpp, tests/Creatortest.cpp,
	  tests/EntityExerciser.h: Sort out the tests so they no longer use
	  message, and try and get the character class tests working a bit
	  better.

2004-08-28  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.h, common/BaseEntity.cpp, rulesets/BaseMind.h,
	  rulesets/Character.h, rulesets/Character.cpp, rulesets/Entity.cpp,
	  rulesets/Entity.h, server/Connection.cpp, tests/EntityExerciser.h:
	  Remove externalMessage() completely as its redundant, and remove
	  externalOperation() from the BaseEntity class, and into
	  Entity as its only applicable in-game.

	* tests/Charactertest.cpp, tests/Creatortest.cpp:
	  Add tests for more IG classes.

2004-08-28  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Correct some comments.

2004-08-28  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseWorld.h, server/CommSocket.h, server/CommIdleSocket.h:
	  Make constructors of some base classes protected.

	* server/Account.cpp: Note a possible bug in the character
	  creation code.

	* server/CommIdleSocket.cpp, server/CommIdleSocket.h,
	  server/CommListener.cpp, server/CommListener.h,
	  server/CommLocalClient.cpp, server/CommMetaClient.cpp,
	  server/CommMetaClient.h, server/CommPSQLSocket.cpp,
	  server/CommPSQLSocket.h, server/CommRemoteClient.cpp,
	  server/CommSocket.cpp, server/CommSocket.h,
	  server/CommUnixListener.cpp, server/CommUnixListener.h:
	  Clean up the Comm classes for consistency and readability.

2004-08-27  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/PythonMindScript.h, rulesets/PythonScript.h,
	  rulesets/PythonThingScript.h, rulesets/Script.h, rulesets/Script.cpp:
	  Make types in function declarations more concise.

2004-08-27  Al Riddoch  <alriddoch@zepler.org>

	* server/Account.cpp, server/Account.h, server/Connection.h,
	  tools/cycmd.cpp: Tweak SigC++ includes to be compatible with
	  SigC++ 2.0.

2004-08-24  Al Riddoch  <alriddoch@zepler.org>

	* client/Py_CreatorClient.cpp, common/BaseEntity.cpp,
	  common/BaseEntity.h, modules/Location.cpp, modules/Location.h,
	  rulesets/Area.cpp, rulesets/Area.h, rulesets/Character.cpp,
	  rulesets/Character.h, rulesets/Entity.cpp, rulesets/Entity.h,
	  rulesets/Line.cpp, rulesets/Line.h, rulesets/MemMap.cpp,
	  rulesets/Pedestrian.cpp, rulesets/Plant.cpp, rulesets/Plant.h,
	  rulesets/Py_Mind.cpp, rulesets/Py_Object.cpp, rulesets/Py_Thing.cpp,
	  rulesets/Python_API.cpp, rulesets/Stackable.cpp,
	  rulesets/Stackable.h, rulesets/Thing.cpp, rulesets/World.cpp,
	  rulesets/World.h, server/Account.cpp, server/Account.h,
	  server/Admin.cpp, server/Connection.cpp, server/Lobby.cpp,
	  server/Lobby.h, server/Player.cpp, server/Player.h,
	  server/ServerRouting.cpp, server/ServerRouting.h,
	  tests/Areatest.cpp, tests/Entitytest.cpp, tests/Foodtest.cpp,
	  tests/Linetest.cpp, tests/Planttest.cpp, tests/Stackabletest.cpp,
	  tests/Structuretest.cpp, tests/Thingtest.cpp, tests/Worldtest.cpp:
	  Replace addToObject() with addToMessage() throughout.

	* server/Account.cpp, server/Lobby.cpp: Use BaseEntity::addToMessage().

	* server/Player.cpp: Make adding character types attribute to Message
	  more efficient.

2004-08-17  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp: Correct a debug message, and clean up some
	  code.

	* rulesets/Entity.cpp: Re-write handling for contains attribute
	  to be more efficient in addToObject().

2004-08-17  Al Riddoch  <alriddoch@zepler.org>

	* tests/Areatest.cpp, tests/Entitytest.cpp, tests/Foodtest.cpp,
	  tests/Linetest.cpp, tests/Planttest.cpp, tests/Stackabletest.cpp,
	  tests/Structuretest.cpp, tests/Thingtest.cpp, tests/Worldtest.cpp,
	  tests/inheritancetest.cpp, tests/utilitytest.cpp, tools/cycmd.cpp,
	  tools/cyconvertrules.cpp, tools/cydbload.cpp, tools/cyisoload.cpp,
	  tools/cyloadrules.cpp, tools/cypasswd.cpp: Convert code to using
	  Atlas Message typedefs as found in Atlas-C++ 0.6 to aid
	  conversion later.

2004-08-17  Al Riddoch  <alriddoch@zepler.org>

	* client/ClientConnection.cpp, client/ClientConnection.h,
	  client/CommClient.cpp, client/CommClient.h,
	  client/CreatorClient.cpp, client/CreatorClient.h,
	  client/Py_CreatorClient.cpp: Convert code to using Atlas Message
	  typedefs as found in Atlas-C++ 0.6 to aid conversion later.

2004-08-16  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.cpp, common/BaseEntity.h, common/BaseWorld.h,
	  common/Database.cpp, common/Database.h, common/FormattedXMLWriter.cpp,
	  common/FormattedXMLWriter.h, common/accountbase.cpp,
	  common/accountbase.h, common/custom.cpp, common/inheritance.cpp,
	  common/inheritance.h, common/operations.h, common/type_utils.h,
	  common/utility.cpp, common/utility.h, modules/Location.cpp,
	  modules/Location.h, rulesets/Area.cpp, rulesets/Area.h,
	  rulesets/BaseMind.cpp, rulesets/Character.cpp, rulesets/Character.h,
	  rulesets/Creator.cpp, rulesets/Entity.cpp, rulesets/Entity.h,
	  rulesets/Entity_getLocation.h, rulesets/Food.cpp, rulesets/Line.cpp,
	  rulesets/Line.h, rulesets/MemMap.cpp, rulesets/MemMap.h,
	  rulesets/Pedestrian.cpp, rulesets/Plant.cpp, rulesets/Plant.h,
	  rulesets/Py_Mind.cpp, rulesets/Py_Object.cpp, rulesets/Py_Object.h,
	  rulesets/Py_Operation.cpp, rulesets/Py_Thing.cpp,
	  rulesets/Python_API.cpp, rulesets/Stackable.cpp, rulesets/Stackable.h,
	  rulesets/Thing.cpp, rulesets/World.cpp, rulesets/World.h,
	  server/Account.cpp, server/Account.h, server/Admin.cpp,
	  server/Admin.h, server/CommClient.cpp, server/CommClient.h,
	  server/CommListener.cpp, server/CommListener.h,
	  server/CommLocalClient.cpp, server/CommLocalClient.h,
	  server/CommMetaClient.h, server/CommPSQLSocket.h,
	  server/CommRemoteClient.cpp, server/CommRemoteClient.h,
	  server/CommServer.cpp, server/CommServer.h, server/CommSocket.cpp,
	  server/CommSocket.h, server/CommUnixListener.cpp,
	  server/CommUnixListener.h, server/Connection.cpp,
	  server/Connection.h, server/EntityFactory.cpp,
	  server/EntityFactory.h, server/Lobby.cpp, server/Lobby.h,
	  server/Persistance.cpp, server/Persistance.h,
	  server/PersistantThingFactory.h, server/Persistor.cpp,
	  server/Player.cpp, server/Player.h, server/Restorer.h,
	  server/Restorer_impl.h, server/ServerRouting.cpp,
	  server/ServerRouting.h, server/TrustedConnection.cpp,
	  server/TrustedConnection.h, server/WorldRouter.cpp,
	  server/WorldRouter.h: Convert code to using Atlas Message
	  typedefs as found in Atlas-C++ 0.6 to aid conversion later.

2004-08-07  Al Riddoch  <alriddoch@zepler.org>

	* common/FormattedXMLWriter.h: Add some notes about converting this
	  class for use with any Atlas codec.

	* server/CommClient.h, server/CommIdleSocket.h, server/CommServer.cpp,
	  server/CommServer.h, server/CommSocket.h, server/ServerRouting.h,
	  server/WorldRouter.cpp:
	  Improve the names of some typedefs and clean up some comments.

	* server/WorldRouter.h: Remove declaration of obsolete unimplemented
	  setSerialno() member function.

2004-08-05  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp, server/WorldRouter.h: Code formatting
	  cleanups, and some improved comments.

2004-07-31  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Improve debug output.

2004-07-30  Al Riddoch  <alriddoch@zepler.org>

	* Makefile.am, index.dox, Doxyfile: Add support for doxygen.

	* server/ServerRouting.cpp, server/ServerRouting.h,
	  server/ServerRouting_methods.h: Document a class a bit.

2004-07-30  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp, server/CommClient.cpp:
	  Clean up some error output, making sure it goes to the right place.

	* common/FormattedXMLWriter.cpp, common/FormattedXMLWriter.h:
	  Use ostream as we are only writing, not reading. Improve comments.

2004-07-30  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/BaseMind.cpp: Remove some debug output.

	* Increment version to 0.3.2.

2004-07-28  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/MemMap.cpp: Make sure LOC and CONTAINS are kept consistant
	  and valid in memory maps. This might get rid of some segfaults.

2004-07-26  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Don't give minds to player characters.
	  Improve commenting.

2004-07-25  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Remove some obsolete commented out code.

2004-07-22  Al Riddoch  <alriddoch@zepler.org>

	* Release 0.3.1.

2004-07-22  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/goals/common/misc_goal.py: Remove debugging
	  output from the spot_something() goal.

2004-07-22  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp, common/Database.h: Add function to check
	  whether an Atlas table has a given key.

	* tools/cyloadrules.cpp: Use hasKey() function to make sure we
	  don't get errors when inserting rules.

2004-07-22  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/MemEntity.h, rulesets/MemMap.cpp, server/WorldRouter.cpp:
	  Remove some debugging output.

2004-07-21  Al Riddoch  <alriddoch@zepler.org>

	* tests/Worldtest.cpp: Update test for new world base class.

2004-07-21  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/BaseMind.cpp, rulesets/MemMap.cpp, rulesets/MemMap.h,
	  rulesets/Py_Map.cpp: Modify python API so it passes in time
	  to map.update and map.get. Use time elapsed to decide if something
	  is ready for removal. Newly created entities are now less likely
	  to get removed before they are verified.

	* rulesets/basic/mind/NPCMind.py,
	  rulesets/basic/mind/goals/humanoid/mason.py,
	  rulesets/acorn/mind/SkelMind.py, rulesets/mason/mind/SkelMind.py:
	  Update python code to new API.

2004-07-21  Al Riddoch  <alriddoch@zepler.org>

	* Clean up files for distribution.

2004-07-21  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/MemMap.cpp: Very carefully ensure that the garbage
	  collection iterator is not reset to the beginning too often
	  so that we cover the whole mind.

	* rulesets/MemEntity.h: Only report time skew if the time passed
	  is non-zero.

	* rulesets/BaseMind.cpp: Some useful debugging output.

2004-07-21  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/PythonMindScript.cpp: Go back to using getAdd.

	* rulesets/MemEntity.h: Tweak check for backwards time so we
	  only report an error if it really is backwards.

	* rulesets/BaseMind.cpp, rulesets/MemEntity.h,
	  rulesets/MemMap.cpp, rulesets/MemMap.h: Implement a function
	  which slowly iterates over the contents of the mind checking
	  for things which are obsolete, and removes them.

2004-07-20  Al Riddoch  <alriddoch@zepler.org>

	* tools/cyconvertrules.cpp: Add code to handle conversion of rules
	  about minds.

	* Re-convert old rules files to make sure they include the mind
	  data.

2004-07-20  Al Riddoch  <alriddoch@zepler.org>

	* client/CreatorClient.cpp, rulesets/BaseMind.cpp,
	  rulesets/MemEntity.cpp, rulesets/MemEntity.h,
	  rulesets/MemMap.cpp, rulesets/MemMap.h, rulesets/Py_Map.cpp:
	  Set time on memory entities when we update them.

	* common/BaseWorld.h: Make object accessor const.

	* common/Database.cpp, common/Database.h, common/accountbase.cpp,
	  server/Connection.cpp, server/Persistance.cpp,
	  server/WorldRouter.cpp: Rename function to get new ID from
	  database to more correctly reflect its role.

	* rulesets/PythonMindScript.cpp: Use get rather than getAdd
	  to sort out to and from of ops send to mind scripts.

2004-07-20  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/define_world.py: Add a couple more test functions.

	* rulesets/MemMap.h: Add accessor for internal data for debugging.

	* rulesets/MemMap.cpp: Comments and debugging output to help solve
	  memory bloat.

	* rulesets/MemEntity.h, rulesets/MemEntity.cpp: Add flag to track
	  whether entities in memory are visible to the NPC.

	* rulesets/Entity.cpp: FIXME note for coordinate conversion.

	* rulesets/BaseMind.cpp: Track the visibility of entities in
	  the mind.

2004-07-16  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Try out creating database tables without an
	  OID column.

2004-07-14  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.h, common/Database.cpp: Modify relation code
	  to allow partial support for foreign key constrains to maintain
	  referential integrity. Full support will work when (if) primary
	  keys are inherited.

	* server/Persistance.h, server/Persistance.cpp: Use updated relation
	  code for the accounts to characters relation.

2004-07-14  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseWorld.h, rulesets/Creator.cpp, rulesets/Thing.h,
	  rulesets/World.cpp, server/WorldRouter.cpp, server/WorldRouter.h:
	  Modify the world interface to get rid of some pointless
	  infeffiencies.

	* server/Account.cpp, server/Admin.cpp, server/Connection.cpp,
	  server/Lobby.cpp, server/ServerRouting.h, server/WorldRouter.cpp,
	  server/WorldRouter.h: Change getSerialNo to newSerialNo to make it
	  clear what it does.

2004-07-14  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.h, common/BaseEntity.cpp, common/refno.h,
	  server/Account.cpp, rulesets/Creator.cpp, server/WorldRouter.cpp:
	  Move refno functions which don't need to be methods into
	  their own header.

	* common/BaseWorld.h, common/BaseWorld.cpp, rulesets/Character.cpp,
	  rulesets/Creator.cpp, server/WorldRouter.cpp, server/WorldRouter.h:
	  Make BaseWorld no longer inherit from anything, as we were not
	  using this inheritance at all.

2004-07-14  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Get rid of leak from handling delete op
	  reply. Eliminate unnecessary copy reading TO of all ops.

2004-07-13  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/BaseMind.cpp: Make sure we don't delete ourself from
	  map.

	* server/WorldRouter.h, server/WorldRouter.cpp: Add more advanced
	  handling for delete ops, so the response is broadcast before
	  it is removed.

2004-07-13  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Clean up a special case for TO="all" on
	  ops, which we now disallow. Remove a verbose tests for NULL
	  pointers in the world dictionary and replace with a simple assert.

2004-07-12  Al Riddoch  <alriddoch@zepler.org>

	* common/FormattedXMLWriter.cpp common/FormattedXMLWriter.h:
	  Utility class to write Atlas to a stream with formatting for
	  human readability.

2004-07-12  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp, common/Database.h: Add capability to specify
	  extra columns in generic Atlas database tables. Query the results
	  columns more robustly. Add a ruleset name column to the rules
	  table.

	* server/EntityFactory.cpp: Re-write rule loader to handle new
	  format rules. Tighten up strictness of rule data. It is no
	  longer possible to specify defaults for location in the rule.

	* tools/cyconvertrules.cpp: Ensure that the playable flag is
	  copied across when converting rules.

	* tools/cyloadrules.cpp: Adapt to load the new format rules,
	  including handling the ruleset name column.

2004-07-08  Al Riddoch  <alriddoch@zepler.org>

	* client/CommClient.cpp, rulesets/MemMap.cpp, server/CommServer.cpp,
	  server/EntityFactory.cpp, server/Persistor_impl.h,
	  server/Restorer.cpp, server/Restorer_impl.h:
	  Fix code to comply with stricter gcc 3.4.1 template rules.

2004-07-08  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/define_world.py: Remove duplicate fir tree.

	* rulesets/Entity.cpp: Remove duplicate copy of Entity::getLocation
	  template.

	* rulesets/Entity_getLocation.h: Update real version of
	  Entity::getLocation template to get latest changes.

2004-07-05  Kai Blin  <blin@gmx.net>

	* mason.xml: Made the fir weight 150 kg
	* rulesets/basic/mind/goals/common/misc_goal.py: added browse()
	  goal
	* rulesets/basic/mind/panlingua/interlinguish.py: added
	  browse_word so we can learn the goal browse
	* rulesets/mason/define_world.py: added a test_browse function
	  that tests deer browsing on trees. Also added a browse() entry
	  into the deer's goal list.
	* rulesets/mason/world/objects/plants/Fir.py: made the fir react
	  on the eat_operation

2004-07-05  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Plant.cpp: Slow down the rate of recovery for damaged
	  plants.

2004-07-05  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Plant.cpp: Implement recovering damage/health in all
	  plants.

2004-06-29  Al Riddoch  <alriddoch@zepler.org>

	* Warn if an up to date version of python is not available.

2004-06-29  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/basic/mind/NPCMind.py, rulesets/BaseMind.cpp,
	  modules/WorldTime.h: WorldTime now handles time in
	  integer seconds.

	* rulesets/Python_API.cpp: Handle all variations of args with one
	  call to PyArg_ParseTuple as multiple calls are not
	  allowed.

2004-06-28  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Ensure that Use and Wield ops are
	  subscribed from mind.

2004-06-28  Al Riddoch  <alriddoch@zepler.org>

	* Fixes to nowhere's commit to define_world.py:
	  Fix python syntax of wolf goal to predate squirrels.
	  Fix m.learn for squirrel to use goals, not knowledge.
	  Replace hard tabs with normal spaces.

2004-06-28  Al Riddoch  <alriddoch@zepler.org>

	* Update birch bounding box to new straight tree model.

2004-06-28  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.cpp, common/BaseEntity.h, common/custom.cpp,
	  common/inheritance.cpp, common/op_switch.h, common/operations.cpp,
	  common/operations.h, common/types.h, rulesets/Character.cpp,
	  rulesets/Character.h, tests/EntityExerciser.h, tests/allOperations.h:
	  Add, install, implement and test new op types for Use and Wield.

2004-06-26  Kai Blin  <blin@gmx.net>

	* Renamed pinekernel to fircone.

2004-06-26  Kai Blin  <blin@gmx.net>

	* Add a pinekernel rule, and make squirrel forage for acorns and
	  pine kernels. Make wolf hunt the squirrel, too.

2004-06-26  Al Riddoch  <alriddoch@zepler.org>

	* Add internal wall structure for house3, and setup rule for
	  new blockhouse model.

2004-06-26  Al Riddoch  <alriddoch@zepler.org>

	* Add to the list of predators that chicken avoids.

	* rulesets/Thing.cpp, rulesets/Entity.cpp: Don't read bbox in
	  Entity::getLocation, as it needs to be trivially modifiable,
	  so it is now only read in Entity::merge.

2004-06-25  Al Riddoch  <alriddoch@zepler.org>

	* Add a mushroom rule, and make deer and pigs eat them.

2004-06-25  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Thing.cpp: Fix move op sight propagation so that
	  the corrected height is sent.

2004-06-24  Al Riddoch  <alriddoch@zepler.org>

	* Fix bounding box for boat.

2004-06-24  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Creator.cpp: Allow a creator to create things.

2004-06-24  Al Riddoch  <alriddoch@zepler.org>

	* Add type for wooden building materials.

2004-06-24  Al Riddoch  <alriddoch@zepler.org>

	* Add a barrel type.

2004-06-24  Al Riddoch  <alriddoch@zepler.org>

	* Sort out sqirrel bounding box.

2004-06-24  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Creator.cpp: Allow a creator to move around the world.

	* rulesets/Character.cpp: Get rid of some extraneous debugging output.

2004-06-24  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_WorldTime.cpp, rulesets/Py_World.cpp:
	  Change the rest of the methods to use METH_NOARGS for simplicity.

	* rulesets/Pedestrian.cpp: Experimental fix to stop desination
	  based movement from bipassing the collision detection.

2004-06-24  James Turner  <james@worldforge.org>

	* Add inn entity type to mason.xml

2004-06-23  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Location.cpp, rulesets/Py_Map.cpp, rulesets/Py_Mind.cpp,
	  rulesets/Py_Object.cpp, rulesets/Py_Operation.cpp,
	  rulesets/Py_Quaternion.cpp, rulesets/Py_Thing.cpp,
	  rulesets/Py_Vector3D.cpp, rulesets/Python_API.cpp:
	  Change some methods to use METH_NOARGS for simplicity.

2004-06-23  Al Riddoch  <alriddoch@zepler.org>

	* Fix bounding boxes for fir and oak scaling.

	* common/globals.cpp: Default to starting at dawn.

	* modules/DateTime.h: Make accessors to static vars static.

	* server/WorldRouter.cpp: Handle time offest more sanely.

2004-06-23  Al Riddoch  <alriddoch@zepler.org>

	* Fix up bounding boxes for pig and chicken.

	* server/CommListener.cpp: Set linger option to prevent sockets
	  clagging up on shutdown.

2004-06-23  Al Riddoch  <alriddoch@zepler.org>

	* Fix up bounding boxes for pig and chicken.

2004-06-21  Al Riddoch  <alriddoch@zepler.org>

	* common/const.h, common/const.cpp: Decrease sight range setting,
	  and increase minimum box size.

2004-06-21  Al Riddoch  <alriddoch@zepler.org>

	* common/const.h, common/const.cpp: Increase sight range setting.

2004-06-21  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Change check in new Entity code to ensure
	  that entities already have valid location at this point.

	* server/EntityFactory.cpp: Implement randomized starting position
	  in entity factory.

2004-06-21  Al Riddoch  <alriddoch@zepler.org>

	* tests/Worldtest.cpp: Handle new pure virtual methods in world
	  base class.

2004-06-21  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Slightly randomize starting position
	  of characters to avoid getting stuck.

	* rulesets/mason/define_world.py: Move the world contents around a bit
	  to make room for larger spawn area.

	* rulesets/World.cpp: Make sure we don't degfault if we get a height
	  outside current area of terrain.

	* client/ClientConnection.cpp, client/CharacterClient.cpp:
	  Set an error condition if the server disconnects unexpectedly,
	  and thus return an error to the script causing an exit.

2004-06-20  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp, rulesets/World.h: Add accessor to get height
	  at a particular point.

	* server/Account.cpp: Remove redundant check on new character
	  location.

	* common/BaseWorld.h, server/WorldRouter.cpp, server/WorldRouter.h,
	  rulesets/Thing.cpp: Add new function for correcting height
	  of entities to ground level, and use it whenever new entities
	  are created, or whenever an entity moves.

2004-06-20  Al Riddoch  <alriddoch@zepler.org>

	* server/Account.h, server/Admin.cpp: Add fallthrough case so
	  that admin accounts can handle set ops the same way as player
	  accounts do.

2004-06-20  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Python_API.cpp: Clean up use of standard error to go
	  via the log subsystem.

	* rulesets/basic/editor.py, rulesets/basic/mind/NPCMind.py,
	  rulesets/basic/mind/panlingua/interlinguish.py,
	  rulesets/mason/define_world.py:
	  Expand handling of the verb "know" so that knowledge
	  is a triple, including predicate, so that know can be used
	  to inform a character of any knowledge. Generalise the client
	  code, and tweak the client data to include the right information.

	* mason.xml: Add new rule for mercenaries.

	* rulesets/basic/mind/goals/humanoid/transaction.py: Add new
	  dynamic goal for NPCs offering their services for hire.

	* rulesets/basic/mind/panlingua/interlinguish.py:
	  Add new words related to hirable NPCs

	* rulesets/mason/define_world.py: Start programming up warriors
	  to be hirable.

2004-06-18  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/define_world.py, rulesets/World.cpp,
	  mason.xml: New map work.

2004-06-15  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp, common/globals.cpp, rulesets/Area.cpp,
	  rulesets/Python_API.cpp, server/Connection.cpp,
	  server/Persistance.cpp: Ensure that all output goes either via
	  the log system, or only in debug macros.

2004-06-15  Al Riddoch  <alriddoch@zepler.org>

	* server/Account.cpp: Remove debugging output.

2004-06-13  Al Riddoch  <alriddoch@zepler.org>

	* Make sure ruleset script files are correctly handled by
	  a build run from outside the source directory.

2004-06-12  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.h, common/BaseEntity.cpp, client/CommClient.cpp:
	  Get rid of obsolete BaseEntity constructor.

2004-06-11  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.cpp: Get rid of dependency on Entity.

	* Fix up the tests.

2004-06-11  Al Riddoch  <alriddoch@zepler.org>

	* server/Restoration.h, server/CommUnixListener.h,
	  server/CommSocket.h, server/CommSocket.cpp,
	  server/CommServer.h, server/CommMetaClient.h,
	  server/CommMetaClient.cpp, server/CommListener.h,
	  server/CommListener.cpp, server/CommIdleSocket.h,
	  server/CommIdleSocket.cpp, rulesets/Area.h,
	  modules/WorldTime.h, common/OOGThing.h, common/OOGThing.cpp:
	  Get rid of some naughty stray implicit constructors.

2004-06-11  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.h, modules/Location.cpp: Clean up constructors
	  and interface to check whether bbox is solid.

	* rulesets/Area.cpp, rulesets/Movement.cpp, rulesets/Structure.h,
	  rulesets/Structure.cpp: Update to modified Location API.

	* rulesets/World.cpp: Fix misuse of implicit construction.

2004-06-11  Al Riddoch  <alriddoch@zepler.org>

	* tools/cyconvertrules.cpp: Fully implement rule conversion
	  to new format, including formatted output.

2004-06-10  Al Riddoch  <alriddoch@zepler.org>

	* Remove obsolete or useless tools, and clean up Makefile.

	* Clean up TODO files.

2004-06-09  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/world/objects/animals/Squirrel.py: Fix import error.

	* server/Admin.cpp: Add debug output to installing a class.

	* tools/cycmd.cpp: Implement a quick install command to add a new
	  temporary type to the server.

2004-06-09  Al Riddoch  <alriddoch@zepler.org>

	* tools/cypasswd.cpp, tools/cyloadrules.cpp, tools/cycmd.cpp: Fix
	  usage functions to output to standard error.

	* server/Admin.cpp: Add quick code to install new types.

	* tools/cyconvertrules.cpp: Add placeholder for tool to convert
	  old format rules files into a new format to be common with
	  indri.

2004-06-06  Al Riddoch  <alriddoch@zepler.org>

	* Fix dependencies in the rpm spec.

2004-06-03  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Handle empty strings in config file
	  so they are less likely to cause problems.

2004-06-01  Al Riddoch  <alriddoch@zepler.org>

	* server/CommUnixListener.cpp, server/CommUnixListener.h:
	  Clean up member variable names in CommUnixListener, store
	  the socket path to avoid regenerating it, and provide
	  an accessor for the path.

	* server/server.cpp: Report the pathname of failed listen socket
	  if we can't open it.

2004-06-01  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Thing.cpp: Fix sight range calculations for Appearance
	  and Disappearance ops.

2004-05-28  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp, rulesets/MemMap.cpp, server/server.cpp:
	  Relegate some diagnostic output on shutdown to debug output.

2004-05-26  Al Riddoch  <alriddoch@zepler.org>

	* server/Account.cpp, server/Account.h: Added new code to allow
	  players to securely modify guise and height of their character.

2004-05-25  Al Riddoch  <alriddoch@zepler.org>

	* Release 0.3.0

2004-05-25  Al Riddoch  <alriddoch@zepler.org>

	* cyphesis.spec.in: Final deps tweak.

	* cyphesis.vconf: Enable metaserver by default.

2004-05-25  Al Riddoch  <alriddoch@zepler.org>

	* cyphesis.sysconfig, cyphesis.init: Fix init script so it
	  doesn't parameterise database name (which doesn't work)
	  exits correctly on fatal errors, and remove the code to
	  load obsolete server-side map files.

	* cyphesis.spec.in: Fix deps.

2004-05-24  Al Riddoch  <alriddoch@zepler.org>

	* common/stringstream.h: Get rid of local sstream implementation
	  as all worthwhile compilers now include it.

2004-05-23  Al Riddoch  <alriddoch@zepler.org>

	* tools/cywatchdog.cpp, tools/cyctrl.cpp, tools/cycmd.cpp,
	  server/CommUnixListener.cpp, client/ClientConnection.cpp:
	  Use var/tmp for temporary files and sockets.

	* Give sty type a default bbox, rather than using instance
	  attributes.

	* Clean up data files in the top level Makefile.am.

	* Remove some unused files from the distribution.

2004-05-21  Al Riddoch  <alriddoch@zepler.org>

	* Disable unused gettext.

	* Remove obsolete libs from spec.

	* Make sure all source files are included with distribution.

	* Fix tests to work with distcheck.

2004-05-17  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/BaseMind.cpp: Re-order the way ops are handled to avoid
	  re-adding deleted entities to memory.

	* Fix greet goals so it works more immediatly.

	* Add a quick client function for populating the world with a minimal
	  test case for AI memory.

2004-05-16  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Python_API.cpp: Add to python search path directly, rather
	  than using an environment hack.

2004-05-15  Al Riddoch  <alriddoch@zepler.org>

	* Fix the tests so they link.

2004-05-15  Al Riddoch  <alriddoch@zepler.org>

	* server/server.cpp, server/WorldRouter.cpp, rulesets/MemMap.cpp:
	  Add logging of various shutdown faces, to try and track the
	  excessive memory usage.

2004-05-14  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Thing.cpp: Use more efficient distance calculation.

2004-05-14  Al Riddoch  <alriddoch@zepler.org>

	* tests/collisiontest.cpp, tests/emergencetest.cpp: Fix up tests
	  after header changes.

2004-05-14  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Thing.cpp, rulesets/World.cpp, server/WorldRouter.cpp:
	  Delete commented out code for old range checks.

	* modules/Location.h, physics/BBox.h, physics/Collision.cpp,
	  physics/Vector3D.h, rulesets/Entity.h: Remove obsolete math
	  functions for doing silly calculations with boxes.

2004-05-14  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Remove some verbose debugging output.

2004-05-13  Al Riddoch  <alriddoch@zepler.org>

	* tests/Worldtest.cpp: Fix up tests.

2004-05-13  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp: Removed unused variables.

2004-05-12  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Thing.cpp: Convert movement appearance and disappearance
	  to use new sight range calculations.

2004-05-12  Al Riddoch  <alriddoch@zepler.org>

	* common/const.cpp, common/const.h: Add constants for handling
	  size based visibility calculations.

	* rulesets/World.cpp, server/WorldRouter.cpp: Convert op broadcast
	  and viewing distance to being handled by a visibility calculation
	  based on size and distance, rather than distance alone. Movement
	  appearance and disappearance is yet to be done.

2004-05-11  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Thing.cpp: Send an Appearance op from new entities
	  rather than Sight(Create).

	* server/WorldRouter.cpp: Accept Appearance and Disappearance
	  as ops which can be broadcast.

2004-05-11  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseWorld.h, server/CommServer.cpp, server/CommServer.h,
	  server/ServerRouting.cpp, server/ServerRouting.h,
	  server/ServerRouting_methods.h, server/WorldRouter.cpp,
	  server/WorldRouter.h: Modify idle to return if there are ops due
	  so that select can be called with zero timeout. Server now processes
	  op as quickly as possible and hopefully is still responsive.

2004-05-11  Al Riddoch  <alriddoch@zepler.org>

	* client/CommClient.cpp, rulesets/Entity.cpp, rulesets/Entity.h,
	  rulesets/Entity_getLocation.h, server/EntityFactory.cpp:
	  Make Entity::getLocation a template, so it works with maps on
	  types other than entity.

	* rulesets/BaseMind.cpp, rulesets/BaseMind.h, 
	  rulesets/MemEntity.cpp, rulesets/MemEntity.h,
	  rulesets/MemMap.cpp, rulesets/MemMap.h, rulesets/Py_Map.cpp:
	  Make MemEntity inherit from Entity, and BaseMind inherit from
	  MemEntity, and use MemEntity for all objects in MemMap, so we
	  can have extra functionality on MemEntity.

2004-05-11  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.h: Strip out obsolete collision code.

2004-05-11  Al Riddoch  <alriddoch@zepler.org>

	* physics/Vector3D.h, physics/BBox.h: Strip out obsolete collision
	  code.

2004-05-11  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.h: Remove redundant forward declaration.

	* rulesets/MemEntity.h, rulesets/MemEntity.cpp: New classes
	  for entities in AI memory.

2004-05-10  Al Riddoch  <alriddoch@zepler.org>

	* Clean up building an externally available from code in the
	  common directory.

2004-05-10  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/MemMap.h, rulesets/MemMap.cpp: Clear up some terminology
	  in variable and function names and comments.

2004-05-10  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/MemMap.h, rulesets/MemMap.cpp: Merge add() and update()
	  into a single method, as they are identical in function. Add comments
	  documenting each method.

	* rulesets/Py_Map.cpp: Use the same function for add() and update()
	  bindings, but maintain two methods in python for compatability.

	* rulesets/BaseMind.cpp, client/CreatorClient.cpp: Update calls
	  to MemMap API.

2004-05-10  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/MemMap.cpp, rulesets/MemMap.h: More cleanup of AI
	  memory code.

2004-05-10  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/MemMap.cpp, rulesets/MemMap.h: Major cleanup of AI
	  memory code, including lots more error reporting, and more
	  efficient handling of add/update.

2004-05-07  Al Riddoch  <alriddoch@zepler.org>

	* server/server.cpp, common/globals.cpp, client/client.cpp:
	  Workaround C++s nasty implicit conversion behavoir.

	* common/system.cpp: Be smarted about POSIX signal handling for
	  segfaults and aborts.

	* Update TODO.

2004-05-07  Al Riddoch  <alriddoch@zepler.org>

	* server/Account.cpp: Don't update character table when persistence
	  is disabled.

2004-05-07  Al Riddoch  <alriddoch@zepler.org>

	* tools/cycmd.cpp: Improve server monitoring by correctly separating
	  OOG ops from IG ops being monitored, and by calculating number
	  and rate of ops monitored.

2004-05-07  Al Riddoch  <alriddoch@zepler.org>

	* common/system.cpp: Add handler for abort signals so they can be
	  reported in the logs.

2004-05-07  Al Riddoch  <alriddoch@zepler.org>

	* common/system.cpp: Add handler for segfaults so they can be reported
	  in the logs.

2004-05-06  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseWorld.h, server/Connection.h, server/ServerRouting.cpp,
	  server/ServerRouting.h, server/ServerRouting_methods.h,
	  server/WorldRouter.cpp, server/WorldRouter.h:
	  Get rid of obsolete return value, from idle functions, and
	  adjust WorldRouter::idle() so it only dispatches a certain
	  number of ops at a time.

	* server/Admin.cpp: Remove debugging output for monitoring code.

	* server/ExternalMind.cpp, server/ExternalMind.h: Rename member
	  variables to fit with convention.

	* tools/cycmd.cpp: Document monitor features.

2004-05-03  Al Riddoch  <alriddoch@zepler.org>

	* common/inheritance.cpp: Fix Root type entry, which incorrectly had
	  objtype "instance".

2004-05-01  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.cpp, common/utility.cpp, rulesets/World.cpp,
	  server/Account.cpp, server/Admin.cpp, server/ServerRouting.cpp,
	  tools/cycmd.cpp: Change objtype from "object" to "obj" in keeping
	  with the new Atlas spec., and tolerate either version from
	  clients for now.

2004-04-27  Al Riddoch  <alriddoch@zepler.org>

	* common/const.cpp, common/const.h, server/EntityFactory.cpp,
	  server/Restoration.cpp: Add flag to disable saving of state
	  to the database.

2004-04-24  Al Riddoch  <alriddoch@zepler.org>

	* tools/cycmd.cpp: Handle all ops from server, including unknowns.
	  Log them to screen including type, to and from.

	* server/Admin.cpp: Ensure we distconnect from World.Dispatch
	  from signal once admin has logged out, or if account is destroyed.

2004-04-23  Al Riddoch  <alriddoch@zepler.org>

	* tools/cycmd.cpp: Add new command to enable and disable server
	  monitoring.

	* server/WorldRouter.cpp, common/BaseWorld.h: Add facility to
	  notify using a SigC signal each type an op is dispatched.

	* server/CommClient.h, server/CommClient.cpp: Fix typo in
	  overridden method which meant it didn't work.

	* server/Admin.h, server/Admin.cpp: Add handler for Monitor operation
	  which turns on and off sending all IG ops to the admin client.

	* rulesets/Python_API.cpp, common/types.h, common/Generic.h,
	  common/BaseEntity.h: Fix Generic op so it can be used, and
	  clean up its use. Add an enumeration for monitor ops.

2004-04-22  Al Riddoch  <alriddoch@zepler.org>

	* Add some chickens.

	* rulesets/Py_Map.cpp: Handle null entities cleanly.

	* rulesets/Plant.cpp: Don't drop generic seeds.

	* common/const.cpp: Cut down sight range.

2004-04-21  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/MemMap.cpp: Ensure that updates can modify LOC of entities
	  in characters memory, or it often doesn't get set at all. Simplify
	  the process of adding a new id.

	* rulesets/Character.cpp: Don't need to send out nearly as many looks
	  to bootstrap mind code.

2004-04-20  Al Riddoch  <alriddoch@zepler.org>

	* common/operations.cpp: Fix typo in Setup ops, which meant that
	  setup never worked.

	* server/Restoration.cpp: Comment out unused obsolete function.

2004-04-20  Al Riddoch  <alriddoch@zepler.org>

	* server/Restorer.h, server/Restorer.cpp, server/Persistor_impl.h,
	  server/Persistor.cpp, rulesets/Plant.h: Implement plant
	  attribute persistance.

	* rulesets/Plant.cpp: Fix a few plant typos.

	* Add chicken goals.

2004-04-19  Al Riddoch  <alriddoch@zepler.org>

	* Fix some tree related rules

	* rulesets/Plant.cpp, rulesets/Plant.h: Implement touching to release
	  seeds on all plants.

	* rulesets/World.cpp: Get rid of mountains on one side.

	* Add some auto generated forests to world init script.

	* rulesets/mason/world/objects/plants/Fir.py,
	  rulesets/mason/world/objects/plants/Oak.py: Simplify some scripts.

	* server/CommListener.cpp: Set RESUSEADDR on listen sockets.

	* server/Persistor.cpp, server/Persistor.h, server/Persistor_impl.h:
	  Fix persistance of plant's static fruits attribute.

2004-04-19  Al Riddoch  <alriddoch@zepler.org>

	* Add lists of forest areas for automatic forect population.

2004-04-19  Al Riddoch  <alriddoch@zepler.org>

	* Fix types for boat and jetty.

	* rulesets/World.cpp: New random terrain for Ludex demo.

	* Define new boandary objects, and start work on major map
	  improvements.

2004-04-19  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Python_API.cpp: Add comments on new Python type API.

2004-03-20  Al Riddoch  <alriddoch@zepler.org>

	* common/const.cpp: Make sight range bigger.

	* rulessets/Area.cpp: Make area bboxes non-solid.

2004-03-15  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Add a FIXME for a very old obsolete test.

	* rulesets/World.cpp: Update setTerrain so it too accepts the
	  data in new format.

2004-03-15  Al Riddoch  <alriddoch@zepler.org>

	* physics/Collision.cpp: Sort out a weird floating pointe problem
	  with emergence test. Now works. Remove debug output.

	* tests/emergencetest.cpp: Implement a suitable minimal set of tests.

	* rulesets/Movement.cpp: Switch to using the new code.

2004-03-15  Al Riddoch  <alriddoch@zepler.org>

	* physics/Collision.h, physics/Collision.cpp: Work on code predicting
	  when entity leaves parent.

	* tests/emergencetest.cpp: Add test for emergence code.

2004-03-08  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Fix bootstrap bug by ensuring that all pending
	  queries are cleared before launching a new query directly.

2004-03-05  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp: Modify terrain structure to track
	  the new format already implemented in apogee.

2004-03-05  Al Riddoch  <alriddoch@zepler.org>

	* aiclient/ClientConnection.cpp, client/CreatorClient.cpp,
	  client/Py_CreatorClient.cpp, rulesets/Movement.cpp,
	  rulesets/Pedestrian.cpp: Clean up some debug flags.

2004-03-02  Al Riddoch  <alriddoch@zepler.org>

	* modules/WorldTime.cpp: Remove an old #warning.

	* server/Admin.cpp: Comment out a currently unused
	  variable.

2004-02-27  Al Riddoch  <alriddoch@zepler.org>

	* client/client.cpp, common/globals.cpp: Remove some dodgey
	  casts required by strange versions of gcc, which should
	  be handled by the provided patch.

2004-02-14  Al Riddoch  <alriddoch@zepler.org>

	* Clean up Makefile.ams a bit.

2004-02-12  Al Riddoch  <alriddoch@zepler.org>

	* physics/Collision.cpp: Improve comments, and describe exit prediction
	  algorithm.

2004-01-22  Al Riddoch  <alriddoch@zepler.org>

	* client/CharacterClient.cpp, client/ClientConnection.cpp,
	  client/CommClient.cpp, server/Account.cpp,
	  server/CommClient.cpp, server/Connection.cpp,
	  tools/cycmd.cpp: Update required headers, now that they
	  are not all pulled in by Atlas/Objects/Decoder.h.

2004-01-22  Al Riddoch  <alriddoch@zepler.org>

	* Completely eliminate use of Instantiate() method throughout.

2004-01-22  Al Riddoch  <alriddoch@zepler.org>

	* common/custom.cpp, common/inheritance.cpp, common/operations.cpp,
	  server/EntityFactory.cpp: Use new Atlas-C++ Class() method
	  for class objects.

2004-01-15  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/define_world.py: Add a test forest object, called
	  Sherwood.

2004-01-12  Al Riddoch  <alriddoch@zepler.org>

	* server/Connection.cpp, server/Admin.cpp: Improve some important
	  error messages to include more context.

	* rulesets/World.cpp: Tweak default landscape so it has some
	  water for testing boats.

	* Add boat type to ruleset, and an instance to the define_world
	  script.

2004-01-12  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Fix logic error in direction
	  processing code.

	* rulesets/Area.cpp: Add debugging code.

2004-01-10  Al Riddoch  <alriddoch@zepler.org>

	* common/nls.h, server/server.cpp: Try out gettext based
	  internationalisation.

2004-01-09  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Fix some bugs which can occur if from
	  normalising a zero-length vector.

2004-01-06  Al Riddoch  <alriddoch@zepler.org>

	* Add rule for forest entity.

2004-01-02  Al Riddoch  <alriddoch@zepler.org>

	* server/Connection.cpp: Clarify error messages and debug output.

2004-01-01  Al Riddoch  <alriddoch@zepler.org>

	* Fix postgreSQL autoconf macro so it handles version numbers with
	  non-numeric suffixes.

2003-12-12  Al Riddoch  <alriddoch@zepler.org>

	* physics/Collision.cpp, physics/Collision.h: Update some comments,
	  and implement getEmergenceTime.

2003-12-08  Al Riddoch  <alriddoch@zepler.org>

	* server/CommPSQLSocket.h: Change database vacuum intervals to
	  more reasonable ammounts.

	* server/CommPSQLSocket.cpp: Init m_vacuumFull to false, rather
	  than 0.

2003-12-05  Al Riddoch  <alriddoch@zepler.org>

	* tests/EntityExerciser.h: Delete all returned operations when
	  testing.

	* rulesets/Plant.cpp: Check if bbox is valid before testing its
	  height. Initialise the height at which plants produces fruit.

2003-12-05  Al Riddoch  <alriddoch@zepler.org>

	* tests/EntityExerciser.h, tests/utilitytest.cpp: Get rid of
	  some warnings.

2003-11-25  Al Riddoch  <alriddoch@zepler.org>

	* physics/Collision.h, physics/Collision.cpp: Add stubs for
	  functions to detect emergence from within an containing entity.

2003-11-25  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Improve debugging output.

2003-11-24  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Fix logic when charging mind touch op
	  args.

2003-11-22  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Additional error reporting for bad update
	  queries.

	* rulesets/Plant.h: Add accessor for number of fruits.

	* rulesets/Python_API.cpp: Remove experimental Python type code.

	* server/Persistor_impl.h: Fix persisting plant fruits, and 
	  character attributes.

2003-11-22  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Plant.cpp: Fix TickOperation() so it only runs if the
	  script doesn't handle it.

	* rulesets/mason/world/objects/plants/Tree.py: Remove tickop
	  handler which is now in the base class.

2003-11-21  Al Riddoch  <alriddoch@zepler.org>

	* Ensure var directory for unix socket is available at install time.

2003-11-19  Al Riddoch  <alriddoch@zepler.org>

	* tools/cyphesis-setup: Comment out use of cydbload, no longer valid
	  in this version.

2003-11-18  Al Riddoch  <alriddoch@zepler.org>

	* Remove unecessary AC_ARG_PROGRAM call from configure.ac

2003-11-14  Al Riddoch  <alriddoch@zepler.org>

	* tools/cyloadrules.cpp: Ensure that tools still work with modified
	  non-blocking database API.

2003-10-30  Al Riddoch  <alriddoch@zepler.org>

	* common/const.h, common/const.cpp: Add constant for square
	  sight range.

	* physics/Vector3D.h, physics/Vector3D.cpp: Move distance
	  function into .cpp file.

2003-10-30  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Add <cassert> for gcc 3.3

2003-10-29  Al Riddoch  <alriddoch@zepler.org>

	* common/const.h: Make constants static for efficiency.

	* common/const.cpp, common/const.h: Add constant minimum size for
	  entities without boxes.

	* physics/BBox.cpp, physics/BBox.h: Move box size function into
	  .cpp file, and make sure of minimum size if box is not valid.

2003-10-29  Al Riddoch  <alriddoch@zepler.org>

	* common/const.cpp, common/const.h, common/random.h,
	  physics/BBox.h, physics/Collision.cpp, physics/Collision.h,
	  physics/Quaternion.cpp, physics/Quaternion.h, physics/Vector3D.h,
	  rulesets/Movement.cpp, rulesets/Plant.cpp, rulesets/Python_API.cpp,
	  tests/collisiontest.cpp: Update variables relating to geometry
	  from double to float as this is the type used internall by
	  WFMath.

	* physics/Vector3D.cpp, physics/Quaternion.cpp, physics/Quaternion.h:
	  Remove legacy code.

	* server/CommPSQLSocket.cpp: Reformatting.

2003-10-29  Al Riddoch  <alriddoch@zepler.org>

	* physics/BBox.h: Add functions for determing diagonal size of
	  bounding box.

2003-10-28  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.h: Add a registry for all tables.

	* common/Database.cpp: Add names of all database tables to the
	  registry. Clean up, fix and fully implement running maintainance
	  commands on all tables on request.

	* server/CommPSQLSocket.h, server/CommPSQLSocket.cpp: Implement
	  timing variables for handling regular running of database
	  maintainance commands. Add code to schedule the commands to
	  idle method, alternating between VACUUM FULL and VACUUM ANALYZE.

2003-10-27  Al Riddoch  <alriddoch@zepler.org>

	* common/random.h: Fix code so there is no floating point exception
	  if randint is passed min == max.

	* rulesets/Plant.cpp: Ensure that fruitchance is always initialised.

2003-10-27  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.h, common/Database.cpp: Add function which
	  schedules queries required for routine database maintainance.

2003-10-27  Al Riddoch  <alriddoch@zepler.org>

	* server/server.cpp: Add database socket to the idle set, so it
	  gets called for regular database maintainance.

	* server/CommPSQLSocket.cpp, common/Database.cpp: Clean up and
	  disable the debugging output.

2003-10-27  Al Riddoch  <alriddoch@zepler.org>

	* server/server.cpp: Add communications object to handle getting
	  the response to database queries without blocking.

	* server/Persistance.h: Make database connection exposed so
	  that CommPSQLSocket can access it.

	* server/CommPSQLSocket.cpp: Add debugging output, and implement
	  dispatching new queries once we have response to previous.

	* common/Database.h, common/Database.cpp: Switch code to submit
	  all command queries via the async que, so we don't block
	  waiting for them to complete. Currently very noisy.

2003-10-26  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Pedestrian.cpp: Re-order and simplify code for handling
	  characters mode string. Implement changing characters direction
	  at collision.

2003-10-25  Al Riddoch  <alriddoch@zepler.org>

	* server/CommPSQLSocket.cpp: Implement processing the response to
	  async queries.

	* common/Database.h, common/Database.cpp: Add new data and interface
	  for managing a queue of queries so they can be processed
	  asyncronously.

2003-10-24  Al Riddoch  <alriddoch@zepler.org>

	* tests/EntityExerciser.h, server/CommPSQLSocket.cpp:
	  Add <cassert> to keep gcc 3.3 happy.

	* tools/cyconfig.cpp: Clean up formatting.

2003-10-24  Al Riddoch  <alriddoch@zepler.org>

	* server/CommPSQLSocket.cpp: Add some query processing code, and
	  comments about code to be written.

2003-10-24  Al Riddoch  <alriddoch@zepler.org>

	* server/CommPSQLSocket.h, server/CommPSQLSocket.cpp,
	  common/Database.h: Work in progress on Comm object to handle
	  non-blocking database communication.

	* physics/Collision.cpp: Remove obsolete FIXME about non-valid
	  velocity.

2003-10-24  Al Riddoch  <alriddoch@zepler.org>

	* physics/Collision.cpp: Handle detecting collisions with a non-moving
	  target.

	* rulesets/Movement.cpp: Turn off debugging output.

2003-10-23  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Pedestrian.cpp: Skip collision detection pass if we have
	  stopped moving.

2003-10-23  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Movement.cpp: Add valid checks when comparing velocity.

	* rulesets/Character.cpp: Remove code which ignore pos if it is
	  the same as current.

2003-10-23  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Rename some variable in mindMoveOp()
	  to more accuratly reflect their meaning. Move direction
	  calculation code so it is now based on updated position, not
	  old position.

2003-10-23  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Movement.h, rulesets/Pedestrian.h: Update movement
	  interface to reflect the different jobs done by genMoveOperation().

	* rulesets/Movement.cpp: Fix badly named argument.

	* rulesets/Pedestrian.cpp: Shift code around a little to ensure
	  it is clear that genMoveUpdate() only produces an op if one
	  is necessary, but genMoveOperation() should always return
	  one.

	* rulesets/Character.cpp: Get rid of confusing logic now
	  That we know genMoveOperation() never returns NULL.

2003-10-23  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Re-work mind movement processing code,
	  eliminating some nasty corner cases, and making the whole
	  lot more readable.

2003-10-23  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp, rulesets/Entity.cpp, rulesets/Thing.cpp:
	  Avoid explicit constructor + copy constructor when assigning
	  vector classes from Atlas.

2003-10-22  Al Riddoch  <alriddoch@zepler.org>

	* tests/collisiontest.cpp: Fix collisiontest to work with modified
	  vertex/plane function interface.

2003-10-22  Al Riddoch  <alriddoch@zepler.org>

	* physics/Collision.h, physics/Collision.cpp: Fix vertex/plane
	  collision function by removing returned normal, because it is
	  always the plane normal. Implement returning collision
	  normal from the mesh collision function.

2003-10-21  Al Riddoch  <alriddoch@zepler.org>

	* physics/Collision.cpp: Fix corner case in mesh collision code
	  so it is no longer possible to creep slowly through a solid
	  object.

2003-10-20  Al Riddoch  <alriddoch@zepler.org>

	* physics/Collision.cpp: Modify collision behavoir so we only
	  detect collisions in the future, while still detecting
	  collisions that are in progress. Add debugging and some
	  FIXMEs.

	* rulesets/Movement.h, rulesets/Movement.cpp,
	  rulesets/Pedestrian.cpp: Switch to using new collision
	  code.

2003-10-18  Al Riddoch  <alriddoch@zepler.org>

	* tests/collisiontest.cpp: Add Location collision function test.

	* physics/Collision.cpp: Fix box transformation and displacement
	  code. Handle locations which don't have an orientation. Test
	  now works.

2003-10-18  Al Riddoch  <alriddoch@zepler.org>

	* physics/Collision.cpp: Small fix to mesh collision function,
	  and add controlled debugging output.

	* tests/collisiontest.cpp: Fixes to mesh collision test. Now works.

2003-10-18  Al Riddoch  <alriddoch@zepler.org>

	* tests/collisiontest.cpp: Add mesh collision function test,
	  and find that it doesn't work.

2003-10-17  Al Riddoch  <alriddoch@zepler.org>

	* physics/Collision.h, physics/Collision.cpp: Fix mesh collision
	  functions. Modify return status of vertex/plane collision
	  return value so its more useful.

2003-10-17  Al Riddoch  <alriddoch@zepler.org>

	* physics/Collision.cpp: Fix vertex/plane collision prediction
	  function.

2003-10-17  Al Riddoch  <alriddoch@zepler.org>

	* physics/Collision.cpp: Add notes on how collision code has
	  to be modified.

2003-10-17  Al Riddoch  <alriddoch@zepler.org>

	* physics/Collision.cpp: Main body of collision code in place.
	  Needs cleaning, debugging and testing.

2003-10-17  Al Riddoch  <alriddoch@zepler.org>

	* physics/Collision.cpp: Collision code now builds again.

2003-10-16  Al Riddoch  <alriddoch@zepler.org>

	* physics/Collision.h, physics/Collision.cpp: More work on
	  collision detection implementation.

2003-10-16  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.cpp, physics/Collision.cpp, physics/Collision.h,
	  physics/Vector3D.h: Move recently developed collision code into
	  module of its own, and give functions a new name.

	* tests/collisiontest.cpp: Update test accordingly.

2003-10-16  Al Riddoch  <alriddoch@zepler.org>

	* physics/Collision.h, physics/Collision.cpp: More work on
	  collision detection.

2003-10-15  Al Riddoch  <alriddoch@zepler.org>

	* physics/BBox.h, physics/Vector3D.h: Remove historical vector
	  and bbox classes.

2003-10-15  Al Riddoch  <alriddoch@zepler.org>

	* tests/collisiontest.cpp: Add unit test for new collision code.
	  Seems to work.

2003-10-15  Al Riddoch  <alriddoch@zepler.org>

	* physics/Vector3D.h: Clean up notes, and implement collision
	  prediction function.

2003-10-15  Al Riddoch  <alriddoch@zepler.org>

	* physics/Vector3D.h: Clean up collision code, and add work in
	  progress on function to predict collision between point and
	  plane.

	* modules/Location.cpp: Clean up methods and placeholder for new
	  oriented box prediction code.

2003-10-12  Al Riddoch  <alriddoch@zepler.org>

	* server/CommSocket.h, server/CommUnixListener.cpp,
	  server/CommUnixListener.h, server/CommServer.cpp,
	  server/CommMetaClient.cpp, server/CommMetaClient.h,
	  server/CommListener.cpp, server/CommListener.h,
	  server/CommClient.cpp, server/CommClient.h:
	  Add a new dispatch method to the socket interface, delaying
	  dispatch of incoming data until after it has been read, so that
	  a write timeout cannot occur during reading.

2003-09-22  Al Riddoch  <alriddoch@zepler.org>

	* aiclient/ClientAccount.cpp, aiclient/ClientAccount.h,
	  aiclient/ClientConnection.cpp, aiclient/ClientConnection.h,
	  aiclient/client.cpp, aiclient/client.h,
	  client/CharacterClient.cpp, client/CharacterClient.h,
	  client/ClientConnection.cpp, client/ClientConnection.h,
	  client/CreatorClient.h, example/client/CyphesisClient.cpp,
	  example/client/CyphesisClient.h, example/client/CyphesisClient2.cpp,
	  example/client/CyphesisClient2.h,
	  example/client/InheritanceClient.cpp,
	  example/client/InheritanceClient.h, tools/cycmd.cpp,
	  tools/cyconfig.cpp: Remove stray references to the LGPL.

2003-09-17  Al Riddoch  <alriddoch@zepler.org>

	* tests/Worldtest.cpp: Update test to take account of changes
	  in the BaseWorld interface.

	* server/WorldRouter.cpp: Report an error if an entity creation
	  attempt of unknown type is attempted.

	* server/EntityFactory.h, server/EntityFactory.cpp: Modify
	  unbound rule queue so it handles multiple rules depending
	  on a single parent.

2003-09-17  Al Riddoch  <alriddoch@zepler.org>

	* server/EntityFactory.h, server/EntityFactory.cpp: Add
	  a wait queue for rules whose parent is not yet installed,
	  so installing rules in any order can be handled, and
	  there is no problem with rules inheriting from each other.

2003-09-17  Al Riddoch  <alriddoch@zepler.org>

	* server/EntityFactory.cpp: Be much stricter about missing types,
	  and missing parents of types. Refuse to add types or instances
	  which have non-existant parents.

	* common/BaseWorld.h, rulesets/Thing.cpp, server/Account.cpp,
	  server/Account.h, server/EntityFactory.h,
	  server/WorldRouter.cpp, server/WorldRouter.h:
	  Change names of functions used to add new objects to the world
	  to reflect that they do this. Handle failure to create an
	  entity.

2003-09-15  Al Riddoch  <alriddoch@zepler.org>

	* tools/cyloadrules.cpp: Fix tool so that it detects if it
	  cannot connect to the database, and does not incorrectly report
	  that it has succeeded.

2003-09-10  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp: Assert that world is not NULL.

	* rulesets/Line.cpp: Turn off stray debugging flag.

	* tests/Areatest.cpp, tests/Foodtest.cpp, tests/Linetest.cpp,
	  tests/Planttest.cpp, tests/Stackabletest.cpp,
	  tests/Structuretest.cpp, tests/Thingtest.cpp, tests/Worldtest.cpp:
	  New tests for most C++ base IG classes, derived from the Entity
	  test.

2003-09-10  Al Riddoch  <alriddoch@zepler.org>

	* tests/allOperations.h: Add a header which pulls in headers for
	  every type of operation.

	* tests/BaseEntitytest.cpp, tests/Entitytest.cpp,
	  tests/OOGThingtest.cpp: Make use of the allOperations header,
	  and common IG test thoroughly.

2003-09-10  Al Riddoch  <alriddoch@zepler.org>

	* tests/EntityExerciser.h: Make entity reference protected for use
	  by other exercisers.

	* tests/IGEntityExerciser.h, tests/Entitytest.cpp: Implement
	  and use the attribute testing code.

2003-09-10  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.cpp: Add in the unimplemented subscribe
	  method.

	* tests/EntityExerciser.h: Add new functionality to properlly
	  exercise the dispatch/subscription mechansim.

	* tests/BaseEntitytest.cpp, tests/OOGThingtest.cpp: Update tests
	  to use new EntityExerciser functionality.

	* tests/IGEntityExerciser.h, tests/Entitytest.cpp: New test for
	  testing the IG Entity base class.

2003-09-10  Al Riddoch  <alriddoch@zepler.org>

	* tests/Locationtest.cpp: Quick simple test for Location.

2003-09-09  Al Riddoch  <alriddoch@zepler.org>

	* tests/OOGThingtest.cpp, tests/systemtest.cpp,
	  tests/inheritancetest.cpp: Include <cassert> as required.

	* tests/utilitytest.cpp: Test for Element to Objects conversion
	  functions.

2003-09-09  Al Riddoch  <alriddoch@zepler.org>

	* tests/systemtest.cpp: Test for signal handling, daemon
	  related, and password encryption code.

	* tests/EntityExerciser.h: Add testing dispatchers
	  as well as simple calling the operation methods directly.

	* tests/OOGThingtest.cpp: Test for OOGThing class.

	* tests/BaseEntitytest.cpp, tests/inheritancetest.cpp,
	  tests/logtest.cpp: Fix up copyright dates on recently added
	  files.

2003-09-09  Al Riddoch  <alriddoch@zepler.org>

	* tests/inheritancetest.cpp: New unit test for inheritance code.

2003-09-09  Al Riddoch  <alriddoch@zepler.org>

	* tests/logtest.cpp, tests/EntityExerciser.h,
	  tests/BaseEntitytest.cpp: Add some unit tests. Lots more to
	  come.

2003-09-08  Al Riddoch  <alriddoch@zepler.org>

	* client/Py_CreatorClient.cpp, client/Py_CreatorClient.h,
	  rulesets/Py_BBox.cpp, rulesets/Py_BBox.h, rulesets/Py_Location.cpp,
	  rulesets/Py_Location.h, rulesets/Py_Map.cpp, rulesets/Py_Map.h,
	  rulesets/Py_Mind.cpp, rulesets/Py_Mind.h, rulesets/Py_Object.cpp,
	  rulesets/Py_Object.h, rulesets/Py_Operation.cpp,
	  rulesets/Py_Operation.h, rulesets/Py_Oplist.cpp,
	  rulesets/Py_Oplist.h, rulesets/Py_Optime.cpp, rulesets/Py_Optime.h,
	  rulesets/Py_Quaternion.cpp, rulesets/Py_Quaternion.h,
	  rulesets/Py_Thing.cpp, rulesets/Py_Thing.h, rulesets/Py_Vector3D.cpp,
	  rulesets/Py_Vector3D.h, rulesets/Py_World.cpp, rulesets/Py_World.h,
	  rulesets/Py_WorldTime.cpp, rulesets/Py_WorldTime.h,
	  rulesets/PythonMindScript.cpp, rulesets/PythonThingScript.cpp,
	  rulesets/Python_API.cpp:
	  Clean up python API code, with decent names for types,
	  decent error reporting, and making the more paranoid checks
	  only present in debug build.

	* common/BaseEntity.cpp, common/BaseEntity.h, server/Account.cpp:
	  Remove pointless method setRefnoOp, and put it in the body as
	  an inline method.

	* common/BaseEntity.h, common/BaseWorld.cpp, common/Setup.h,
	  common/Tick.h, common/operations.h, common/custom.cpp,
	  common/types.h, common/utility.cpp, common/utility.h, 
	  modules/Location.h, physics/Vector3D.h, rulesets/BaseMind.cpp,
	  rulesets/Script.h, server/EntityFactory.h:
	  Clean up the dependency trees using more forward declarations.

	* common/inheritance.cpp, common/inheritance.h:
	  Move most of the implementation into the .cpp file as its
	  not suited to inlining.

	* rulesets/MemMap.cpp, rulesets/MemMap.h, rulesets/MemMap_methods.h:
	  Move contents of MemMap_methods.h into the .cpp file, as it is
	  not suited to inlining, and remove the file from the build.

2003-09-07  Al Riddoch  <alriddoch@zepler.org>

	* client/Py_CreatorClient.cpp: Clean up and re-classify error
	  reports in python code.

2003-08-30  Al Riddoch  <alriddoch@zepler.org>

	* server/Makefile.am: Move cyslave into EXTRAs so that its not
	  built by default.

	* server/CommListener.cpp: Check that listener is open before using
	  it.

	* common/log.h, common/log.cpp: Add log levels for output from
	  scripts.

	* rulesets/Python_API.cpp: Add new python objects which replace
	  sys.stdout and sys.stderr, and redirect output to the
	  cyphesis logging mechanism.

2003-08-25  Al Riddoch  <alriddoch@zepler.org>

	* tools/cypasswd.cpp: Fix up cypasswd to work with updated accountbase.
	  Needs more work on options, and admin account feature.

2003-08-25  Al Riddoch  <alriddoch@zepler.org>

	* common/accountbase.h, common/accountbase.cpp: Add init
	  method required to make the database connection.
	  Clear up bugs in putAccount, and get putAccount to return
	  true/false correctly.

	* common/Database.h, common/Database.cpp: Add extra arg to
	  updateSimpleRow so it can use any column as the key.

2003-08-24  Al Riddoch  <alriddoch@zepler.org>

	* tools/cypasswd.cpp: Remove an obsolete comment.

	* common/Database.h, common/Database.cpp: Add the method required
	  to update a row of a simle database table.

	* common/accountbase.h, common/accountbase.cpp: Re-implement
	  accountbase to use the new style accounts table.

2003-08-23  Al Riddoch  <alriddoch@zepler.org>

	* server/CommIdleSocket.h, server/CommIdleSocket.cpp,
	  server/CommListener.h, server/CommListener.cpp:
	  Fix virtual destructors.

	* server/CommMetaClient.h: Remove obsolete includes.

	* server/CommUnixListener.cpp, server/CommUnixListener.h:
	  Convert unix listener class to use the skstream listener
	  code.

2003-08-23  Al Riddoch  <alriddoch@zepler.org>

	* server/server.cpp: Handle the case correctly if the metaserver
	  socket setup does not work.

	* server/CommMetaClient.h, server/CommMetaClient.cpp: Re-write
	  CommMetaClient to use skstreams udp_socket_stream.

2003-08-23  Al Riddoch  <alriddoch@zepler.org>

	* server/CommListener.h, server/CommListener.cpp:
	  Convert listener class to use the skstream listener
	  code.

2003-08-21  Al Riddoch  <alriddoch@zepler.org>

	* configure.ac: Fix up help for python prefix option.

2003-08-19  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.h: Workaround for older compilers which
	  don't handle private sanely.

	* configure.ac: Re-write pthread test to handle more platforms.

2003-08-16  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp: Make server terrain random.

2003-08-16  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp: Add more terrain for testing.

2003-08-14  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp: Add lots more terrain to stress test clients.

2003-08-13  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Vector3D.cpp, rulesets/Py_Quaternion.cpp,
	  rulesets/Py_BBox.cpp: Add in-place construction and
	  destruction for all three python types which embed C++ objects.

2003-08-13  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Vector3D.cpp: Use in-place operator new on vector
	  object embedded in python object.

2003-08-13  Al Riddoch  <alriddoch@zepler.org>

	* common/const.cpp, common/const.h: Remove the now obsolete
	  hard coded default admin password.

2003-08-13  Al Riddoch  <alriddoch@zepler.org>

	* tools/cycmd.cpp: Make cycmd a little more flexible about remote
	  connections and account details, and allow it to attempt commands
	  without logging in.

2003-08-13  Al Riddoch  <alriddoch@zepler.org>

	* client/ObserverClient.cpp: Remove obsolete database include.

	* tools/cycmd.cpp: Modify cycmd so it now uses a unix socket connection
	  for local server by default.

2003-08-13  Al Riddoch  <alriddoch@zepler.org>

	* common/const.cpp, common/const.h: Add a const for the default
	  admin password hash, with a view to removing the plain text
	  default admin password.

	* server/Persistance.cpp: Ensure that the database contains an
	  admin account on startup.

	* common/Database.cpp: Move the call to register the ID generating
	  sequence out of the code for creating IG entity tables, as it is
	  also required by OOG entities, in particular the admin account
	  bootstrap.

	* client/ObserverClient.cpp, client/ObserverClient.h,
	  client/client.cpp: Modify client so that it no longer attempts to
	  get account details from the database, or from a hard coded default.
	  It will now attempt a trusted login, or rely on password provided
	  by config option.

2003-08-12  Al Riddoch  <alriddoch@zepler.org>

	* Add a define which indicates if we are building against
	  python 2.0 or later.

2003-08-08  Al Riddoch  <alriddoch@zepler.org>

	* Comment out the exported libs, as nothing is using them.

2003-08-07  Al Riddoch  <alriddoch@zepler.org>

	* server/Lobby.cpp: Add some debugging messages.

	* server/CommServer.cpp: Tweak select loop so that closed connections
	  are cleaned up as soon as they are detected.

	* rulesets/World.cpp: Make demo terrain a bit more mountainous.

	* Convert entire codebase over to using Atlas-C++ 0.4.90, as
	  start of transition to 0.6 API.

2003-07-25  Al Riddoch  <alriddoch@zepler.org>

	* common/type_utils.h, server/Account.cpp: Use wfmath
	  Atlas conversion functions correctly.

2003-07-21  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Python_API.cpp: Clean up initialisation of python modules to
	  make code readable.

2003-07-21  Al Riddoch  <alriddoch@zepler.org>

	* server/Persistance.cpp, server/Restoration.cpp: Use DatabaseResult
	  clear() method to free result objects.

	* server/CommMetaClient.cpp: Free address info in the event of a socket
	  failure.

2003-07-21  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.h, server/Account.cpp, server/Account.h,
	  server/Admin.h, server/Connection.cpp, server/Player.h,
	  server/WorldRouter.cpp: Change the form of the getEntityId()
	  method in the database code and re-work the code that uses it.

	* common/Database.cpp, common/Database.h: Use PQClear() to free
	  up database result objects, and provide a method to
	  free the contents of a DatabaseResult instance.

2003-07-21  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Python_API.cpp: Fix leaked python reference.

	* rulesets/World.cpp: Fix leaked terrain object.

2003-07-20  Al Riddoch  <alriddoch@zepler.org>

	* common/system.cpp: Add handler for SIGHUP, and clarify name of
	  signal handler. Fix error message typo.

2003-07-20  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Ensure world entity has its type set.

2003-07-20  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseWorld.h, server/WorldRouter.cpp, server/WorldRouter.h:
	  Remove old obsolete code for handling id generation.

2003-07-20  Al Riddoch  <alriddoch@zepler.org>

	* server/Persistor_impl.h: Avoid storing un-unitialised quaternion
	  values into database.

2003-07-19  Al Riddoch  <alriddoch@zepler.org>

	* server/EntityFactory.cpp: Add debugging output required to monitor
	  use of entity factory.

2003-07-19  Al Riddoch  <alriddoch@zepler.org>

	* server/Persistor_impl.h: Force zero's when persisting a non
	  valid bounding box, to ensure nan doesn't get sent to the
	  database.

2003-07-19  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Add support for boolean columns.

	* server/Persistor.cpp, server/Persistor_impl.h, server/Restorer.h,
	  server/Restorer_impl.h: Use a bool column to store whether or
	  not an entity has a bounding box, and use it apropriatly.

2003-07-19  Al Riddoch  <alriddoch@zepler.org>

	* Switch to using configure.ac

2003-07-19  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Debugging output to help debug
	  orientation.

2003-07-19  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_BBox.cpp, rulesets/Py_Quaternion.cpp,
	  rulesets/Python_API.cpp, server/Restorer_impl.h:
	  Add some casts and tweaks so that wrappers and
	  database code work with wfmath structures.

2003-07-18  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_BBox.cpp, rulesets/Python_API.cpp,
	  server/Restorer_impl.h: Put back the code won't work with WFMath.

2003-07-18  Al Riddoch  <alriddoch@zepler.org>

	* physics/BBox.h, physics/Quaternion.cpp, physics/Quaternion.h,
	  physics/Vector3D.h: Some cleanups.

2003-07-18  Al Riddoch  <alriddoch@zepler.org>

	* physics/BBox.cpp: New file to check BBox.h.

2003-07-18  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp: Tweak terrain to look a little better.

2003-07-18  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp, rulesets/Pedestrian.cpp:
	  Include atlasconv.h so that the conversions work.

2003-07-18  Al Riddoch  <alriddoch@zepler.org>

	* Migrate maths code to wfmath. Compiles and links, but lots has been
	  commented out.

2003-07-02  Al Riddoch  <alriddoch@zepler.org>

	* Clean up and improve rpm spec using new found techniques.

2003-06-20  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Fix variable name bug in non-debug build.

	* Update Makefile.ams so that distcheck works.

2003-06-20  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp: Take account of Mercator API changes.

2003-06-15  Al Riddoch  <alriddoch@zepler.org>

	* server/Connection.cpp, rulesets/Entity.cpp: Add the assert header
	  where required.

2003-05-29  Al Riddoch  <alriddoch@zepler.org>

	* physics/Quaternion.h: Intialise quaternion to unit length, in
	  case it leaks.

2003-05-28  Al Riddoch  <alriddoch@zepler.org>

	* server/Connection.cpp: Refuse to create an account if this
	  connection already has one.

2003-05-16  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp: Flatten out terrain a little, for a more
	  realistic test.

2003-05-13  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp: Add a bit more terrain.

2003-05-12  Al Riddoch  <alriddoch@zepler.org>

	* server/CommServer.cpp: Don't report Interrupted System Call on
	  select(), as this is normal when program is interrupted.

2003-05-11  Al Riddoch  <alriddoch@zepler.org>

	* tools/cycmd.cpp: Provide full details of entity attributes.

	* rulesets/World.cpp: Provide terrain basepoints by x,y index rather
	  than x,y position, as it makes more sense.

2003-05-09  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Movement.cpp, rulesets/Movement.h,
	  rulesets/Pedestrian.cpp, rulesets/Pedestrian.h: Make movement
	  classes a little more generic by removing references
	  to character.

2003-05-09  Al Riddoch  <alriddoch@zepler.org>

	* server/CommServer.cpp: Ensure that idle() gets called if
	  there are no waiting sockets.

2003-05-06  Al Riddoch  <alriddoch@zepler.org>

	* server/CommClient.h: Switch to using tcp_socket_stream.

2003-05-06  Al Riddoch  <alriddoch@zepler.org>

	* server/CommListener.cpp: Ensure that IPv6 bind address is
	  fully and correctly initialised.

2003-05-06  Al Riddoch  <alriddoch@zepler.org>

	* server/CommServer.cpp: Report errors with select(2).

2003-05-05  Al Riddoch  <alriddoch@zepler.org>

	* server/EntityFactory.cpp, rulesets/Python_API.h,
	  rulesets/Python_API.cpp, rulesets/PythonThingScript.h,
	  rulesets/PythonThingScript.cpp, rulesets/PythonMindScript.cpp,
	  rulesets/Py_World.cpp, rulesets/Py_Thing.h, rulesets/Py_Thing.cpp,
	  rulesets/Py_Operation.cpp, rulesets/Py_Map.cpp,
	  rulesets/Py_Location.cpp, rulesets/Movement.h, 
	  rulesets/MemMap_methods.h, rulesets/MemMap.h, rulesets/MemMap.cpp,
	  rulesets/Entity.cpp, rulesets/BaseMind.cpp, 
	  client/Py_CreatorClient.cpp:
	  Rename all references from thing to entity, as thing is
	  no longer the base class for IG entities.

	* rulesets/World.h, rulesets/World.cpp, rulesets/Thing.h,
	  rulesets/Structure.h, rulesets/Stackable.h, rulesets/Stackable.cpp,
	  rulesets/Plant.h, rulesets/Plant.cpp, rulesets/Missile.h,
	  rulesets/Line.h, rulesets/Line.cpp, rulesets/Food.h,
	  rulesets/Food.cpp, rulesets/Creator.h, rulesets/Character.h,
	  rulesets/Character.cpp, rulesets/Area.h, rulesets/Area.cpp:
	  Add a typedef for the parent class of all entity classes.

	* rulesets/Plant.h, rulesets/Plant.cpp:
	  Add in code to fully integrate hardcoded attributes.

2003-05-04  Al Riddoch  <alriddoch@zepler.org>

	* Clean up member variable names.

2003-05-03  Al Riddoch  <alriddoch@zepler.org>

	* server/Restoration.cpp: Send restored entities a setup op, so the
	  AI gets initialised as if the entity had just been created.

	* Clean up member variable names.

	* rulesets/mason/mind/SkelMind.py: Get skeleton to recognise
	  settlers.

2003-05-01  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.cpp, rulesets/World.h: Rework terrain attribute
	  handling to use new agreed format. Add terrain attribute
	  to the special ranged sight handling.

2003-04-30  Al Riddoch  <alriddoch@zepler.org>

	* tools/cyphesis-setup: Add #!/bin/sh to be sure it gets treated
	  as a script.

	* Add configure checks for Python 2.3, and update varconf checks.

2003-04-24  Al Riddoch  <alriddoch@zepler.org>

	* common/system.cpp: Clear the string portably.

	* Add some missing headers to the source lists.

2003-04-23  Al Riddoch  <alriddoch@zepler.org>

	* server/CommListener.cpp: Sort out error messages if we
	  can't work out what the address is.

2003-04-23  Al Riddoch  <alriddoch@zepler.org>

	* server/CommListener.cpp, server/CommLocalClient.cpp,
	  server/CommRemoteClient.cpp, server/CommRemoteClient.h,
	  server/CommClient.cpp: Clean up code for getting
	  presentation format addresses as connection id.

2003-04-23  Al Riddoch  <alriddoch@zepler.org>

	* server/CommListener.cpp: Add IPv6 listen code.

2003-04-22  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Thing.cpp, server/Account.cpp, server/Admin.cpp,
	  server/Connection.cpp, server/Lobby.cpp: Make setting
	  op args more efficient.

2003-04-22  Al Riddoch  <alriddoch@zepler.org>

	* server/CommMetaClient.h, server/CommMetaClient.cpp: Make metaserver
	  code IPv6 compatable.

2003-04-19  Al Riddoch  <alriddoch@zepler.org>

	* server/CommServer.h: Prevent copying of CommServer.

	* server/Connection.cpp: Handle setting args more efficiently.

2003-04-19  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/World.h, rulesets/World.cpp, rulesets/Stackable.h,
	  rulesets/Stackable.cpp, rulesets/Plant.h,
	  rulesets/Plant.cpp, rulesets/Line.h, rulesets/Line.cpp,
	  rulesets/Entity.h, rulesets/Entity.cpp, rulesets/Character.h,
	  rulesets/Character.cpp, rulesets/Area.h, rulesets/Area.cpp,
	  common/type_utils.h, rulesets/Py_Thing.cpp, rulesets/Py_Mind.cpp,
	  client/Py_CreatorClient.cpp: Modify the way entities are queried
	  to avoid return by value, and use references instead.

2003-04-19  Al Riddoch  <alriddoch@zepler.org>

	* Switch to requiring pkg-config versions of libs, and make
	  postgres check more verbose.

	* Disable metaserver by default. This is a devel server.

	* rulesets/World.cpp, rulesets/World.h: Add terrain using
	  Mercator to the world entity, including the required attribute
	  handlers.

2003-03-22  Al Riddoch  <alriddoch@zepler.org>

	* client/CommClient.cpp, client/CreatorClient.cpp,
	  client/ObserverClient.cpp, client/Py_CreatorClient.cpp,
	  common/BaseEntity.cpp, common/BaseEntity.h,
	  common/types.h, rulesets/Area.cpp, rulesets/BaseMind.cpp,
	  rulesets/Character.cpp, rulesets/Entity.cpp,
	  rulesets/Food.cpp, rulesets/Line.cpp,
	  rulesets/MemMap.cpp, rulesets/Pedestrian.cpp,
	  rulesets/Plant.cpp, rulesets/Py_Mind.cpp,
	  rulesets/Py_Object.cpp, rulesets/Py_Thing.cpp,
	  rulesets/Python_API.cpp, rulesets/Stackable.cpp,
	  rulesets/Thing.cpp, rulesets/World.cpp,
	  server/Account.cpp, server/Admin.cpp, server/CommClient.cpp,
	  server/CommServer.cpp, server/Connection.cpp,
	  server/EntityFactory.cpp, server/Lobby.cpp,
	  server/Persistance.cpp, server/Player.cpp,
	  server/ServerRouting.cpp, server/WorldRouter.cpp:
	  Switch to using Element as name for Atlas::Message::Object,
	  to avoid name clashes on Object, and bring into line with
	  the way Atlas-C++ will be.

2003-03-22  Al Riddoch  <alriddoch@zepler.org>

	* common/system.h, common/system.cpp: Add code to md5 hash
	  strings, like passwords.

	* server/Connection.cpp: Use md5 hash code for storing and
	  verifying passwords.

2003-03-21  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.h, modules/Location.cpp: Change location
	  member names to fit the Atlas attributes they map to, and
	  make it clear they are members.

2003-03-21  Al Riddoch  <alriddoch@zepler.org>

	* client/Py_CreatorClient.cpp, common/BaseEntity.cpp,
	  common/BaseEntity.h, rulesets/MemMap.cpp, rulesets/Py_Mind.cpp,
	  rulesets/Py_Thing.cpp, rulesets/Thing.cpp, rulesets/Thing.h,
	  server/Account.cpp, server/Admin.cpp, server/Connection.cpp,
	  server/Lobby.cpp, server/ServerRouting.cpp: 
	  Use a more efficient technique to set the attributes on
	  operation arguments without a copy.

	* common/BaseEntity.cpp, rulesets/Entity.cpp, rulesets/Thing.h,
	  rulesets/World.cpp, server/WorldRouter.cpp:
	  Move handling IG Look ops into the IG code in rulesets.

2003-03-20  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Re-work handling look ops for efficiency.

2003-03-18  Al Riddoch  <alriddoch@zepler.org>

	* Depend on devel skstream.

	* server/CommLocalClient.cpp, server/TrustedConnection.h,
	  server/TrustedConnection.cpp: Added trusted connection on local
	  unix socket clients, which does not require a password for logins.

2003-03-18  Al Riddoch  <alriddoch@zepler.org>

	* server/Connection.h, server/Connection.cpp: Add virtual method
	  to verify account credentials.

2003-03-16  Al Riddoch  <alriddoch@zepler.org>

	* common/globals.cpp, common/globals.h: Add global variable for
	  the local state directory.

	* server/Account.cpp, server/Admin.cpp, server/Admin.h,
	  server/Player.cpp: Tighten up some operation checking and add Create
	  handler to Admin in preparation for handling creation of new OOG
	  things.

	* server/CommLocalClient.cpp, server/CommLocalClient.h,
	  server/CommRemoteClient.cpp, server/CommRemoteClient.h,
	  server/CommUnixListener.cpp, server/CommUnixListener.h,
	  server/CommClient.cpp, server/CommClient.h,
	  server/CommListener.cpp, server/Connection.cpp,
	  server/Connection.h, server/server.cpp:
	  Create new listener and connection classes using unix sockets
	  to allow local trusted connections.

	* client/ClientConnection.cpp, client/ClientConnection.h,
	  client/CommClient.h, client/CreatorClient.cpp,
	  client/ObserverClient.cpp: Add capability to connect over
	  unix socket.

2003-03-07  Al Riddoch  <alriddoch@zepler.org>

	* Use " instead of < when including application headers.

	* Re-work the interface between server and worldrouter objects
	  so that the are less tied together, and more flexible.

2003-03-05  Al Riddoch  <alriddoch@zepler.org>

	* server/Admin.cpp, server/CommClient.h, server/ServerRouting.h:
	  Small cleanups.

2003-02-27  Al Riddoch  <alriddoch@zepler.org>

	* Clean up pkgconfig checks.

2003-01-30  Al Riddoch  <alriddoch@zepler.org>

	* Make use of new Atlas-C++ pkgconfig checks.

2003-01-30  Al Riddoch  <alriddoch@zepler.org>

	* Make use of new varconf pkgconfig checks.

2003-01-16  Al Riddoch  <alriddoch@zepler.org>

	* mason.xml, rulesets/mason/world/objects/plants/Fir.py: Add new
	  fir tree rule.

2003-01-12  Al Riddoch  <alriddoch@zepler.org>

	* mason.xml, rulesets/mason/world/objects/outdoor/Campfire.py:
	  Add three missing rules.

	* server/EntityFactory.cpp: Remove some old obsolete FIXMEs.

	* server/Restoration.cpp: Remove redundant extra connection of
	  world persistor.

2003-01-12  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp, common/Database.h: Add functions for removing
	  relation rows. Modify entity select method to handle an empty loc
	  correctly.

	* rulesets/Thing.cpp: Correct indenting.

	* rulesets/World.cpp: Trigger update in SetOperation() correctly.

	* server/Account.cpp, server/Persistance.cpp, server/Persistance.h:
	  Inform Persistance modules when the account loses a character, so
	  this change is reflected in the database.

	* server/Persistor.cpp: Move comments into the correct place.

	* server/Restoration.cpp, server/Restorer.cpp, server/Restorer.h,
	  server/Restorer_impl.h: Persist and restore the world entity
	  attributes. Remove redundant argument from Restorer::populate().

2003-01-12  Al Riddoch  <alriddoch@zepler.org>

	* server/Restorer.h, server/Restorer_impl.h: Add method to allow
	  decoding of a complete atlas map from a database record.

	* common/Database.cpp: Ensure failure is only returned if string
	  is not empty.

2003-01-11  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp, common/Database.h: Add method to generalise
	  encoding atlas maps to string. Make the codec used by the database
	  code into a typedef, so production systems can use a more efficient
	  one.

	* server/Persistor.cpp, server/Persistor_impl.h: Persist
	  Entity::attributes as an atlas encoded string column. Not yet
	  restored.

2003-01-06  Al Riddoch  <alriddoch@zepler.org>

	* server/Persistor.cpp, server/Persistor.h, server/Persistor_impl.h:
	  Separate the insertion of a new row from connecting and entities
	  signals to the persistor, and put them into different methods.
	  Modify constructor to allow subsidiary persistor objects to
	  be constructed, which don't try to register with the database.

	* server/Restorer.cpp, server/Restorer.h, server/Restorer_impl.h:
	  Each Restorer template instance has a static Persistor
	  which it connects up to entities as it restores them, ensuring
	  that changes to restored entities are persisted.

2003-01-06  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Re-write the way ops are passed to mind
	  so that a character still works if it has no AI mind.

2003-01-05  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Fix some errors in the entity table
	  creation code.

	* server/Persistor.cpp, server/Persistor.h, server/Persistor_impl.h:
	  Switch to using pointers instead of references with signals
	  to comply with sigc++ 1.2.

	* tools/cycmd.cpp: Add a missing header, require for sigc++ 1.2.

	* server/Persistance.cpp: Fixed error message.

2003-01-05  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp, common/Database.h: Modify relation
	  table create query to allow different types of relation,
	  with constraints to be added. Implement function to
	  add rows to a relation. Modify result iterator constrcter
	  so it returns end() if the result is empty.

	* server/Persistance.cpp, server/Persistance.h: New methods
	  to handle populating a newly restored account object
	  with characters, and syncing newly created characters to
	  the relation that links them with their account.

	* server/Account.cpp, server/Account.h: New method to
	  add existing characters to this account. Inform persistance
	  system when we get a newly created character.

	* server/Connection.cpp: Ask persistance system to populate
	  newly restored account with its characters.

2003-01-05  Al Riddoch  <alriddoch@zepler.org>

	* server/Connection.cpp, server/ServerRouting.h:
	  Rename function for querying account by its name.

	* server/Persistance.cpp, server/Persistance.h: Remove obsolete
	  function for loading Admin account.

2003-01-05  Al Riddoch  <alriddoch@zepler.org>

	* common/globals.cpp, common/globals.h, server/Connection.cpp,
	  server/Persistance.cpp, server/Persistance.h,
	  server/ServerRouting.cpp, server/server.cpp:
	  Move restricted flag out of persistance into globals.

	* server/Account.h, server/Admin.cpp, server/Connection_methods.h,
	  server/WorldRouter.cpp: Remove unnecessary includes.

	* server/ServerRouting.cpp: No longer necessary to load the admin
	  account at startup. Can be loaded on demand.

2003-01-03  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.h, server/Persistor.h: Make inheritance of
	  SigC::Object virtual, although multiple inheritance is not planned.

	* common/Database.cpp, common/Database.h: Remove legacy account
	  table, and add support for generic non-inherited tables for OOG
	  data.

	* common/Database.cpp, common/Database.h: Add general methods for
	  running queries and reporting errors, and cut down duplicated
	  code elsewhere by using them.

	* common/accountbase.cpp, common/accountbase.h: Remove code
	  that used old account table, and replace with stubs. New
	  account yet to be written.

	* server/Account.cpp, server/Account.h, server/Admin.cpp,
	  server/Admin.h, server/Player.cpp, server/Player.h:
	  Allow an id to be specified when creating an account.

	* server/Persistance.cpp: Re-write account persistance methods
	  to use new table.

	* server/Restoration.cpp: Clarify debug output.

2003-01-02  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.h: Declaration for register relations.

	* server/Account.cpp, server/Account.h, server/Admin.cpp,
	  server/Admin.h, server/Connection.cpp, server/Player.cpp,
	  server/Player.h, server/ServerRouting.cpp,
	  server/ServerRouting.h: Properlly separate username and id from
	  account, and use the database code to assign numerical ids to
	  account objects.  Eliminate extraneous member variables in account.

	* server/CommClient.cpp, server/CommServer.cpp,
	  server/CommServer.h, server/server.cpp:
	  Eliminate storing server name string twice.

2003-01-01  Al Riddoch  <alriddoch@zepler.org>

	* client/CreatorClient.cpp: Make reporting a little more verbose
	  now that ids are opaque.

2002-12-30  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Don't make update requests if no columns
	  are given to be updated.

	* common/Database.cpp, common/Database.h: Add new method to select
	  all rows in a given class table with a given location.

	* rulesets/Entity.cpp, rulesets/Entity.h: Make update_flags
	  public.

	* rulesets/Entity.cpp, rulesets/Thing.cpp, rulesets/attributes.h,
	  server/Persistor.cpp, server/Persistor_impl.h,
	  server/WorldRouter.cpp: Add new cont column to entity tables which
	  is zero if the entity has no contained entities.

	* server/Restoration.cpp, server/Restoration.h, server/Restorer.cpp,
	  server/Restorer.h, server/Restorer_impl.h:
	  Modify restorers so they now use a database result iterator to
	  indicate the row they should restore from.

	* server/Restoration.cpp: Implement new way of restoring world from
	  database using new function to fetch multiple complete entities
	  from database at the same time. Massive speedup.

2002-12-28  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.cpp, common/BaseEntity.h, rulesets/Character.cpp,
	  rulesets/Food.cpp, rulesets/Thing.cpp, rulesets/World.cpp:
	  Add arg to error method specifying where the error should go. Use
	  this arg to ensure that errors don't get broadcast.

	* common/Database.cpp, common/Database.h, common/const.cpp,
	  server/Persistor.cpp, server/Restoration.cpp,
	  server/WorldRouter.cpp: Change id and loc column in entity tables
	  to integer for performance. Add id generator sequence to database.

	* common/Database.cpp, common/Database.h, server/Persistance.cpp,
	  server/Persistance.h: Remove old legacy world, mind and server
	  tables as they are no longer used.

	* common/BaseEntity.cpp, common/Load.h, common/Save.h,
	  common/custom.cpp, common/op_switch.h, common/operations.cpp,
	  common/operations.h, common/types.h, rulesets/BaseMind.cpp,
	  rulesets/BaseMind.h, rulesets/Character.cpp, rulesets/Character.h,
	  server/Admin.cpp, server/Admin.h, server/server.cpp,
	  tools/cycmd.cpp: Remove Load and Save ops.

	* rulesets/Area.cpp, rulesets/Character.cpp, rulesets/Line.cpp,
	  rulesets/Plant.cpp: Fix != to |= when setting update flags.

	* server/CommMetaClient.cpp, server/CommMetaClient.h,
	  server/CommIdleSocket.h, server/CommServer.cpp,
	  server/CommServer.h, server/server.cpp:
	  Add mechanism for sockets to be called whenever the server
	  is idle, so that they do period things. Use this mechanis,
	  to handle sending periodic packets to the metaserver, removing
	  special case code from CommServer.

2002-12-23  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.h, common/BaseWorld.cpp, common/BaseWorld.h,
	  common/OOGThing.h, rulesets/Area.cpp, rulesets/Area.h,
	  rulesets/BaseMind.cpp, rulesets/Character.cpp,
	  rulesets/Character.h, rulesets/Creator.cpp, rulesets/Creator.h,
	  rulesets/Entity.cpp, rulesets/Entity.h, rulesets/Food.cpp,
	  rulesets/Food.h, rulesets/Line.cpp, rulesets/Line.h,
	  rulesets/MemMap.cpp, rulesets/Plant.cpp, rulesets/Plant.h,
	  rulesets/Stackable.cpp, rulesets/Stackable.h,
	  rulesets/Structure.h, rulesets/Thing.cpp, rulesets/Thing.h,
	  rulesets/World.cpp, rulesets/World.h, server/Account.cpp,
	  server/CommClient.cpp, server/CommClient.h,
	  server/Connection.cpp, server/Connection.h,
	  server/EntityFactory.cpp, server/Lobby.cpp, server/Lobby.h,
	  server/PersistantThingFactory.h,
	  server/PersistantThingFactory_impl.h,
	  server/Restorer.cpp, server/Restorer_impl.h, server/ServerRouting.cpp,
	  server/WorldRouter.cpp: Assign ID at entity construction time,
	  and make it constant, and thus unmodifiable.

2002-12-23  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.cpp, common/BaseEntity.h, common/OOGThing.h:
	  Add a protected constructor for initialising id at construction
	  time.

	* common/Database.cpp, common/Database.h, server/Restorer_impl.h:
	  Switch argument order so default row can be first row.

	* server/Persistor.cpp: Don't persist Creator objects.

	* server/Restoration.cpp: Clean up debugging output, and report
	  serious errors.

	* server/Restorer.cpp, server/Restorer.h: Add restorers for Character.

	* server/server.cpp: Add log calls for restoring from database.

2002-12-22  Al Riddoch  <alriddoch@zepler.org>

	* physics/Quaternion.h, physics/Vector3D.h: Add accessors to
	  allow direct modification of coordinates.

	* server/Persistor_impl.h: Remove duplicate attribute handler.

	* server/Restoration.cpp: And in the final code for loading
	  restored entities from database.

	* server/Restoration.h, server/Restorer.h,
	  server/Restorer_impl.h: Implement handler that populate
	  member variables of entity objects from database
	  structures.

	* server/ServerRouting.h: Make WorldRouter reference public.

	* server/WorldRouter.cpp, server/WorldRouter.h: Slight
	  modification to addObject(Entity *) to allow restored
	  objects to be added as well as new ones.

2002-12-21  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp, server/Admin.cpp:
	  Use consts::rootWorldId correctly.

	* server/Persistor.cpp, server/PersistantThingFactory.cpp,
	  server/PersistantThingFactory.h, server/EntityFactory.h,
	  server/EntityFactory.cpp: Add World specialisation of Persistor
	  so that row in entity database is maintained, but not created.

	* common/Database.h: Ensure iterator has != as well as ==.

	* common/Database.cpp: Check that tuples have been returned
	  in response to a select.

	* server/Restoration.cpp, server/Restoration.h,
	  server/Restorer.cpp: Restoration code now iterates over the
	  contents of the database, but does not attempt to actually
	  restore it yet.

2002-12-21  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp, common/Database.h: Implement methods
	  to query database results.

	* common/const.cpp, common/const.h: Add a const for the root
	  id.

	* server/Restoration.cpp, server/Restoration.h: Start implementing
	  code to restore world from database.

2002-12-21  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.h, common/Database.cpp: Add base to get rows
	  from entity tables. Flesh out the result iterator - untested.
	  Tweak various bits of query generating code to be a little
	  more efficient.

2002-12-20  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.h: Add class for handling results from database.

	* server/Restoration.cpp: Comment out pseudo-code.

	* server/Restorer.h: Methods declarations for code to decode database
	  results.

2002-12-19  Al Riddoch  <alriddoch@zepler.org>

	* server/EntityFactory.h, server/ExternalMind.h,
	  server/PersistantThingFactory.h: Fix header guard names.

	* server/server.cpp, server/Restoration.h, server/Restoration.cpp:
	  Add beginning of class to handle restoring world state from database.

2002-12-19  Al Riddoch  <alriddoch@zepler.org>

	* server/CommClient.cpp, server/CommServer.cpp, server/CommServer.h,
	  server/ServerRouting.cpp, server/ServerRouting.h,
	  server/server.cpp: Change the way main server object are created
	  to be more logical.

2002-12-19  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Make id column of entity tables a unique
	  primary key.

2002-12-19  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp, server/Persistor.cpp, server/Persistor_impl.h:
	  Clean up debugging output.

2002-12-19  Al Riddoch  <alriddoch@zepler.org>

	* server/EntityFactory.cpp, server/PersistantThingFactory.cpp,
	  server/PersistantThingFactory.h, 
	  server/PersistantThingFactory_impl.h,
	  server/Persistor.cpp: Cut down template bloat by minimising the
	  places where template instances are created.

2002-12-19  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Add in code to send the entity requests
	  to the database.

	* server/Persistor.cpp, server/Persistor_impl.h: Add type and
	  class columns, correct the name of the drunkness column,
	  and remove a bad test from the update query generator.

2002-12-18  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp, common/Database.h: Handle the way SQL INSERT
	  requires column headers and values to be separated.

	* server/Persistor.cpp, server/Persistor.h, server/Persistor_impl.h:
	  Add functions to generate INSERT queries for new entities.

2002-12-18  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Fix badly generated insert query.

	* rulesets/Character.h: Add accessors for some hard attributes.

	* rulesets/Entity.h, server/EntityFactory.cpp: Add a way of clearing
	  all the update flags, and clear them after creating the database
	  row.

	* server/Persistor.h, server/Persistor_impl.h, server/Persistor.cpp:
	  Progress on the SQL update query generating code. Now generates
	  what looks like good update queries.

2002-12-18  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.h: Provide accessor for update flags.

	* server/Persistor.h, server/Persistor_impl.h: Start adding
	  functions to build update query strings.

2002-12-17  Al Riddoch  <alriddoch@zepler.org>

	* server/CommMetaClient.cpp: Correctly initialise the size of
	  the from address structure.

	* server/EntityFactory.cpp: Delete persistor connection once
	  its been used.

	* server/EntityFactory.h: Ensure constructor is explicit.

2002-12-15  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Shuffle the way id is generated, so
	  its available for persistance.

	* server/EntityFactory.h, server/EntityFactory.cpp: Pass id
	  into entityfactory so it can be passed to database.

2002-12-15  Al Riddoch  <alriddoch@zepler.org>

	* server/server.cpp, server/WorldRouter.cpp,
	  server/EntityFactory.h, server/EntityFactory.cpp:
	  Change the way the EnitityFactory is created so it has a
	  reference to the world.

	* rulesets/Entity.h, rulesets/Entity.cpp: getLocation returns
	  whether an error occured setting location data.

	* common/Database.h, common/Database.cpp: Add stub functions
	  for generating queries to new format entity tables.

	* server/Persistor_impl.h, server/Persistor.h,
	  server/Persistor.cpp: Add hooks for syncing update to
	  database using new database functions.

2002-12-11  Al Riddoch  <alriddoch@zepler.org>

	* server/EntityFactory.cpp: Make sure each factory is unique
	  so that they can be deleted.

2002-12-11  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Fix error creating tables.

2002-12-11  Al Riddoch  <alriddoch@zepler.org>

	* server/PersistantThingFactory.h: Prevent a new Persistor from
	  being created when a factory is cloned.

	* server/EntityFactory.cpp: Add in the persistor hooks.

2002-12-10  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Clean up errors in new entity table
	  code.

	* server/EntityFactory.cpp: Switch to using new persistant
	  factories.

	* server/Persistance.cpp: Don't create test tables.

	* server/PersistantThingFactory.h:
	  Clean up the way templates are used here, and simplify.

	* Persistor.h, Persistor.cpp, Persistor_impl.h:
	  Implement object handles the persistance of the rulesets
	  classes. Currently does not implement any of the actual
	  persistance.

2002-12-10  Al Riddoch  <alriddoch@zepler.org>

	* server/PersistantThingFactory.h, server/PersistantThingFactory.cpp:
	  Work in progress on code to handle creating entities to be persisted.

	* server/WorldRouter.cpp: Get rid of hard tab.

	* rulesets/Thing.cpp: Clean up checks on new entities.

	* server/EntityFactory.cpp: Be stricter about entity classes which
	  aren't installed properlly. Add comments about implementing
	  persistance. Removed redundant handling of name attribute.

2002-12-06  Al Riddoch  <alriddoch@zepler.org>

	* server/Connection.cpp: Remove redundant includes

	* tools/cycmd.cpp: Re-factor code to work non-blocking, allow
	  non-admin logins, and generally be more useful.

2002-12-01  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Thing.cpp: Fix very long standing moving bug, which
	  sometimes caused big jumps in character position.

	* rulesets/Area.cpp, rulesets/Character.cpp, rulesets/Entity.cpp,
	  rulesets/Entity.cpp, rulesets/Entity.h, rulesets/Line.cpp,
	  rulesets/Plant.cpp, rulesets/Thing.cpp: Add in the hooks required
	  to inform persistance system when changes have taken place.

2002-11-28  Al Riddoch  <alriddoch@zepler.org>

	* common/const.cpp, common/const.h, rulesets/Creator.cpp,
	  rulesets/Entity.cpp, rulesets/Entity.h, server/WorldRouter.cpp:
	  Re-work omnipresent flag so it can only work in a debug build,
	  and has no performance impact on the production code.

2002-11-25  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.h, common/Database.cpp, server/Persistance.cpp:
	  Finish entity table creation code, and test it.

	* rulesets/Entity.cpp, rulesets/Entity.h, rulesets/EntityFactory.h,
	  rulesets/PythonThingScript.cpp, rulesets/PythonThingScript.h,
	  rulesets/Python_API.cpp, rulesets/Python_API.h,
	  rulesets/Thing.cpp, rulesets/Thing.h, server/EntityFactory.cpp,
	  server/EntityFactory.h, server/WorldRouter.cpp: Sort out
	  some incorrect use of Thing instead of Entity. Move some code
	  from Thing into Entity.

2002-11-25  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.h, common/Database.cpp: Method to register new
	  entity tables.

2002-11-24  Al Riddoch  <alriddoch@zepler.org>

	* server/CommListener.cpp: Report socket errors.

	* common/Database.h, common/Database.cpp: Re-write db code to use
	  the non-blocking C API.

2002-11-23  Al Riddoch  <alriddoch@zepler.org>

	* server/CommClient.cpp, server/CommClient.h, server/CommListener.h,
	  server/CommServer.cpp, server/CommServer.h: Remove code commented
	  out during refactoring.

2002-11-23  Al Riddoch  <alriddoch@zepler.org>

	* server/CommMetaClient.cpp: Compliance fix. htons is not a function.

2002-11-23  Al Riddoch  <alriddoch@zepler.org>

	* Increment to devel version 0.3, and start breaking things.

	* server/CommClient.cpp, server/CommClient.h, server/CommServer.cpp,
	  server/CommServer.h, server/server.cpp, server/CommListener.cpp,
	  server/CommListener.h, server/CommMetaClient.cpp,
	  server/CommMetaClient.h, server/CommSocket.cpp, server/CommSocket.h:
	  Refactor network code so metaserver and listen socket are no longer
	  special cases, opening up the way for a database connection handler.

2002-11-21  Al Riddoch  <alriddoch@zepler.org>

	* Enable static libs in the rpm spec.

	* Version 0.2 release.

2002-11-04  Al Riddoch  <alriddoch@zepler.org>

	* server/Connection.cpp: Reject account creation or login with zero
	  length username.

2002-11-04  Al Riddoch  <alriddoch@zepler.org>

	* server/Account.cpp: Correctly set refno on responses to OOG ops.

2002-11-02  Al Riddoch  <alriddoch@zepler.org>

	* acorn.xml, mason.xml: Fix weight to be mass.

2002-11-01  Al Riddoch  <alriddoch@zepler.org>

	* tools/cycmd.cpp, server/Admin.cpp: Clean up admin interface so its
	  a bit more Atlas compliant.

	* server/Connection.cpp, server/Player.cpp: Improve some checking.

	* server/EntityFactory.cpp: Remove dead commented out code.

2002-10-31  Al Riddoch  <alriddoch@zepler.org>

	* cyphesis.init: Add code to load rules and map into the database
	  before the service first starts up.

	* cyphesis.spec.in, cyclient.init: Add cyclient service, to populate
	  running server with game stuff.

	* configure.in: Bump up to version 0.1.95

2002-10-26  Al Riddoch  <alriddoch@zepler.org>

	* client/CreatorClient.cpp, rulesets/BaseMind.cpp,
	  rulesets/Character.cpp, rulesets/Food.cpp,
	  rulesets/Thing.cpp, server/Connection.cpp:
	  Tighten up some atlas type checks, to reduce the chances of
	  bugs caused by malicious or buggy clients.

2002-10-17  Al Riddoch  <alriddoch@zepler.org>

	* common/system.cpp: Ignore sigpipe so we don't abort on some
	  systems if the client quits unexpectedly.

2002-10-17  Al Riddoch  <alriddoch@zepler.org>

	* configure.in, cyphesis-config.in: Fix the way sysconfdir and
	  datadir are handled in the config script.

2002-10-10  Al Riddoch  <alriddoch@zepler.org>

	* init script fixes.

	* common/system.cpp: Ensure that parent of daemon exit status indicates
	  whether the daemon has started properlly.

	* server/Connection.cpp: Clarify error reporting.

2002-10-07  Al Riddoch  <alriddoch@zepler.org>

	* server/Account.cpp: Fix up handling of imaginary ops.

	* server/Connection.cpp: Clarify error reporting.

	* rpm spec fixes.

2002-10-05  Al Riddoch  <alriddoch@zepler.org>

	* tools/cyphesis-setup: Clean up syntax.

	* cyphesis.init, cyphesis.sysconfig, cyphesis.spec.in:
	  Init script and sysconfig for rpm and other packaging.

2002-10-03  Al Riddoch  <alriddoch@zepler.org>

	* Clean up README.

	* Set version to 0.1.93 and release.

2002-10-03  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Python_API.cpp: Add environment variables using a more
	  portable call to putenv() instead of setenv().

2002-10-03  Al Riddoch  <alriddoch@zepler.org>

	* Build file fixes.

2002-10-03  Al Riddoch  <alriddoch@zepler.org>

	* common/system.h, common/system.cpp, server/server.cpp: Moved all
	  the system dependant signal handling and background handling
	  code into system module, and implemented propper handling of
	  going into the background, including reporting error status
	  back to the waiting parent using exit status and user signals.

2002-10-02  Al Riddoch  <alriddoch@zepler.org>

	* physics/Vector3D.h: Cleaned up arithmetic operators.

	* Clarified rpm descriptions.

	* Big changes to make README more accurate and readable.

2002-09-17  Al Riddoch  <alriddoch@zepler.org>

	* tools/cyphesis-setup: Re-write of script to handle server setup.
	  Should handle more weird happenings now.

2002-09-14  Al Riddoch  <alriddoch@zepler.org>

	* server/Admin.cpp: Cleaned up an unimplemented feature, and added it
	  to the TODO.

	* server/Account.h, server/Account.cpp: Removed unused obsolete code
	  for checking character types.

	* rulesets/Python_API.cpp: Add new globals module to python API which
	  exposes core settings to the python scripts.

	* rulesets/basic/hooks/ruleset_import_hooks.py: Abolish autogeneration
	  of this file using new globals module in the python API.

	* configure.in, cyphesis-config.in: Expose conf and data dirs.

	* tools/cyphesis-setup: New script to set the server up.

	* tools/cyconfig.cpp: New tool to make persistant changes to the
	  server config.

2002-09-13  Al Riddoch  <alriddoch@zepler.org>

	* server/ServerRouting.cpp, common/const.h, common/const.cpp: Put all
	  the build dependant code in const.cpp, so no other file is
	  dependant on config.h.

	* Add a cyphesis-config script, so other programs can tell where its
	  installed.

	* Rework many of the build files so they are cleaner.

	* Fix the readline C++ sanity check.

2002-09-11  Al Riddoch  <alriddoch@zepler.org>

	* Added IG help.

2002-09-08  Al Riddoch  <alriddoch@zepler.org>

	* tools/cycmd.cpp: Add support for server OOG chat to admin client,
	  and note its shortcomings in BUGS.

2002-09-06  Al Riddoch  <alriddoch@zepler.org>

	* physics/BBox.h: Fixed farPoint() so it now does return the far
	  point, rather than the near point.

	* modules/Location.h, rulesets/Python_API.cpp: Handle NULL parent
	  in location.

	* NPC script bug fixes.

2002-09-05  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/PythonMindScript.cpp: Increase verbosity of reported
	  python script errors.

	* rulesets/basic/mind/goals/animal/herd.py: Fix typo which meant
	  mind code was not working.

2002-09-04  Al Riddoch  <alriddoch@zepler.org>

	* Added various nifty bits of mason behavoir.

	* rulesets/Py_Operation.cpp: Always return an error, if the script
	  does something invalid with the python API.

	* rulesets/BaseMind.cpp: Implement operation triggers in
	  the mind scripts.

	* Document some bugs, bring TODO up to date, and bump up version
	  to 0.1.92.

2002-08-30  Al Riddoch  <alriddoch@zepler.org>

	* common/globals.cpp: Only persist this sessions command line
	  options if the user is overriding the installation directory.

	* cyphesis.vconf, client/Py_CreatorClient.cpp,
	  client/Py_CreatorClient.h, client/client.cpp:
	  Add client functionality to allow diferent scripts to be run to
	  perform different functions on the server.

	* client/CharacterClient.cpp: Add debug option.

	* rulesets/Character.h: Make mind operation functions virtual,
	  so they can be overridden.

	* common/BaseWorld.h, server/WorldRouter.cpp,
	  server/WorldRouter.h: Add server functions to search for
	  entities by name or type.

	* rulesets/Creator.h, rulesets/Creator.cpp: Allow creator to
	  specify a look without an id to search for entities with
	  a given name or type.

	* client/CreatorClient.cpp, client/CreatorClient.h,
	  client/ObserverClient.cpp, client/ObserverClient.h,
	  client/Py_CreatorClient.cpp, rulesets/basic/editor.py,
	  rulesets/mason/define_world.py:
	  Add support for looking for entities in the world by name or
	  type from client script, so client scripts can modify existing
	  world.

	* rulesets/Entity.cpp, rulesets/Movement.cpp,
	  rulesets/Py_Object.cpp, rulesets/Py_Operation.cpp,
	  rulesets/Py_Oplist.cpp, rulesets/Python_API.cpp,
	  rulesets/Stackable.cpp, rulesets/Thing.cpp,
	  rulesets/World.cpp, server/Account.cpp,
	  server/CommServer.cpp, server/Connection.cpp,
	  server/Player.cpp, server/ServerRouting.cpp,
	  server/server.cpp, tools/cycmd.cpp,
	  tools/cywatchdog.cpp: Code formatting cleanups.

	* rulesets/basic/world/objects/tools/Bow.py: Fix up bow so it now
	  fires correctly.

2002-08-26  Al Riddoch  <alriddoch@zepler.org>

	* server/CommServer.cpp: Simplify handling of socket errors,
	  and remove pointless warning.

2002-08-23  Al Riddoch  <alriddoch@zepler.org>

	* mason.xml, rulesets/mason/world/objects/plants/Birch.py,
	  rulesets/mason/world/objects/plants/Hickory.py,
	  rulesets/mason/world/objects/plants/Willow.py:
	  Fix missing scripts for trees.

2002-08-22  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Operation.cpp: Filled in missing SetArgs() functionality
	  for operations in the Python API.

	* moraf.xml: Add an atlas entity map for mason.

2002-08-14  Al Riddoch  <alriddoch@zepler.org>

	* server/CommClient.h, server/CommClient.cpp: Move exception
	  class to body, so noone else feels tempted to use it.
	  Remove excess debugging output.

2002-08-14  Al Riddoch  <alriddoch@zepler.org>

	* server/CommClient.cpp, server/CommServer.cpp: Move exception
	  handling into the read method, and ensure correct handling
	  of the reading flag.

	* server/CommClient.h: Fix exception constructor to be
	  ISO compliant.

2002-08-14  Al Riddoch  <alriddoch@zepler.org>

	* server/CommServer.cpp, server/CommClient.h, server/CommClient.cpp:
	  Experimental version of a more comprehensive way to handle
	  client write timeouts, and a possible way to handle traffic
	  shaping in future.

2002-08-13  Al Riddoch  <alriddoch@zepler.org>

	* server/CommClient.h: Don't disconnect connections when writing
	  times out.

2002-08-11  Al Riddoch  <alriddoch@zepler.org>

	* Added pkgconfig and sigc++ autotools macros into acinclude.m4
	  as only one or the other should be required, not both.

	* server/Connection.h, server/Connection.cpp: Move large methods
	  into .cpp file to avoid bloat. Add in non ref method
	  for removing deleted objects, as references are a problem.

	* Account.h, Account.cpp: characterDestroyed method now
	  takes value rather than reference because of sigc++. Add
	  necessary headers.

2002-08-11  Al Riddoch  <alriddoch@zepler.org>

	* Modifify configure tests to detect sigc++ 1.2.

	* common/BaseEntity.h, server/Connection.h: Fix sigc++ headers
	  for sigc++ 1.2

2002-08-08  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/EntityFactory.cpp, server/Account.cpp,
	  server/Connection.h, server/EntityFactory.h:
	  Ensure code is complient with the published sigc++ api.

2002-07-28  Al Riddoch  <alriddoch@zepler.org>

	* server/Account.cpp, server/Connection.cpp: Get rid of
	  character existance check on login, as dead ones are now handled
	  using SigC signals.

	* rulesets/Entity.h, rulesets/Entity.cpp, rulesets/Py_World.cpp:
	  Remove pointless deleted flag, as the only time its true is when
	  the object has been deleted, and accessing would cause a segfault.

2002-07-27  Al Riddoch  <alriddoch@zepler.org>

	* tools/cyloadrules.cpp, server/server.cpp,
	  aiclient/ClientConnection.cpp, client/ClientConnection.cpp,
	  common/inheritance.h: Use const iterators and references
	  whenever possible.

	* client/CommClient.cpp, client/CreatorClient.cpp,
	  client/ObserverClient.cpp, client/Py_CreatorClient.cpp,
	  common/BaseEntity.cpp, common/BaseEntity.h,
	  common/types.h, rulesets/Area.cpp, rulesets/BaseMind.cpp,
	  rulesets/Character.cpp, rulesets/Entity.cpp,
	  rulesets/Food.cpp, rulesets/Line.cpp,
	  rulesets/MemMap.cpp, rulesets/Pedestrian.cpp,
	  rulesets/Plant.cpp, rulesets/Py_Mind.cpp,
	  rulesets/Py_Object.cpp, rulesets/Py_Thing.cpp,
	  rulesets/Python_API.cpp, rulesets/Stackable.cpp,
	  rulesets/Thing.cpp, rulesets/World.cpp,
	  server/Account.cpp, server/Admin.cpp, server/CommClient.cpp,
	  server/CommServer.cpp, server/Connection.cpp,
	  server/EntityFactory.cpp, server/Lobby.cpp,
	  server/Persistance.cpp, server/Player.cpp,
	  server/ServerRouting.cpp, server/WorldRouter.cpp:
	  Switch to using Fragment as name for Atlas::Message::Object,
	  to avoid name clashes on Object.

	* common/BaseEntity.h: Make BaseEntity inherit from SigC::Object,
	  so signals and callbacks can be used, and add destroyed
	  signal.

	* common/accountbase.h, physics/BBox.h, physics/Quaternion.h,
	  physics/Vector3D.h, rulesets/MemMap_methods.h,
	  rulesets/Movement.cpp, rulesets/Plant.h,
	  rulesets/Py_Operation.cpp, rulesets/PythonMindScript.cpp,
	  rulesets/PythonThingScript.cpp, rulesets/Script.cpp,
	  common/inheritance.cpp: Cleaned up Atlas::Message::Object
	  use, and excessive use of "using ...".

	* rulesets/Movement.h, rulesets/Pedestrian.h:
	  Use forward declarations rather than including Move.h

	* server/Account.cpp, server/Account.h, server/Connection.cpp,
	  server/Connection.h: Use destroyed signal to ensure references
	  to in game entities are removed when those entities are
	  destroyed. Ensure Connection is only destroyed once.

2002-07-25  Al Riddoch  <alriddoch@zepler.org>

	* tools/cycmd.cpp, client/CommClient.h, client/CommClient.cpp: Fixed
	  up client code so it does not rely on username being the same as
	  account id.

	* tools/cycmd.cpp: Added look and logout commands to administrate
	  users logged in.

	* server/server.cpp: Fixed metaserver code so it only sends
	  termination packet if metaserver functionality is enabled.

	* server/Connection.h, server/Connection.cpp, server/CommServer.cpp,
	  server/CommClient.h, server/Account.cpp: Fix logouts so they
	  do cause the client connection to be closed.

	* Finished switch from Fire operation to Burn.

2002-07-25  Al Riddoch  <alriddoch@zepler.org>

	* Change fire operation to burn operation, to avoid clash with
	  fire entity. Change currently incomplete.

2002-07-23  Al Riddoch  <alriddoch@zepler.org>

	* common/const.h: Fix } position.

2002-07-23  Al Riddoch  <alriddoch@zepler.org>

	* common/const.cpp, common/const.h: Make consts modifiable in
	  the debug build.

	* common/op_switch.h, rulesets/Character.cpp, rulesets/Character.h:
	  Fix missing logout op in op switchers.

	* server/Account.cpp, server/Connection.cpp: Handle logouts
	  a bit differently, and return the info response process
	  expects.

	* server/CommClient.cpp: Set connection id to client ip and port.

	* server/CommServer.cpp: Tighten up the way eof is handled.

	* server/ServerRouting.cpp: Set lobby id.

2002-07-21  Al Riddoch  <alriddoch@zepler.org>

	* server/Connection.cpp: Clarified errors on malformed logins.

2002-07-14  Al Riddoch  <alriddoch@zepler.org>

	* ALL: Cleaned up headers into correct order.

	* common/log.h, common/log.cpp: Write some logging code which
	  handles message of different types using syslog or standard
	  error, depending on whether we are running as a daemon.

	* ALL: Switched to using log() for all output.

2002-07-14  Al Riddoch  <alriddoch@zepler.org>

	* tools/cyloadrules.cpp: Give rules in heigher level rulesets
	  priority over base rulesets.

	* common/Database.cpp: Supress debugging output.

2002-07-10  Al Riddoch  <alriddoch@zepler.org>

	* server/Connection.cpp: Spelling errors.

	* configure.in: Remove unused cruft.

2002-07-01  Al Riddoch  <alriddoch@zepler.org>

	* tools/cypasswd.cpp, tools/cyloadrules.cpp: Cleaned up tool source.

2002-06-26  Al Riddoch  <alriddoch@zepler.org>

	* server/CommClient.h: Cleaned some stray headers.

2002-06-26  Al Riddoch  <alriddoch@zepler.org>

	* tools/cycmd.cpp, server/CommClient.h,
	  example/client/InheritanceClient.h, client/ClientConnection.h,
	  client/ClientConnection.cpp: Switched to new skstream header
	  location.

2002-06-26  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.h: Remove stray code.

	* common/globals.cpp: Fix incorrect usage of share dir.

	* server/Account.cpp, server/CommClient.cpp, server/CommClient.h,
	  server/CommServer.cpp, server/Connection.cpp, server/Connection.h,
	  server/Connection_methods.h, server/ExternalMind.cpp,
	  server/Lobby.cpp: Use reference instead of pointer in send
	  methods.

	* server/CommClient.h, server/CommClient.cpp: Adding missing handling
	  for Logout.

2002-06-24  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp, rulesets/Python_API.cpp: Remove some
	  debugging output.

	* tools/cydbload.cpp, tools/cyloadrules.cpp: Check atlas files
	  exists.

2002-06-23  Al Riddoch  <alriddoch@zepler.org>

	* server/CommClient.cpp: Fix leak if connection is deleted before
	  negotiation is complete.

2002-06-19  Al Riddoch  <alriddoch@zepler.org>

	* server/CommServer.h, server/CommClient.h, server/CommServer.cpp,
	  server/CommClient.cpp: Re-factor the way client connections are
	  handled, so closed and blocked connections are disposed of more
	  cleanly.

2002-06-14  Al Riddoch  <alriddoch@zepler.org>

	* client/CreatorClient.cpp, client/CreatorClient.h,
	  client/Py_CreatorClient.cpp, rulesets/basic/editor.py: Add
	  features to allow query and manipulation of the world from
	  the client.

	* rulesets/mason/define_world.py: Give the world a name.

2002-06-12  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/acorn/world/objects/plants/seeds/Apple.py,
	  rulesets/mason/world/objects/plants/seeds/Apple.py,
	  rulesets/Character.cpp: Fix spelling of alcohol.

2002-06-11  Al Riddoch  <alriddoch@zepler.org>

	* configure.in: Bug fixes and tidying up.

	* rulesets/mason/define_world.py: Remove acorn stuff, and get it
	  running.

	* cyphesis.spec.in: Fix library dependancies.

2002-06-11  Al Riddoch  <alriddoch@zepler.org>

	* tools/Makefile.am, server/Makefile.am, client/Makefile.am,
	  autogen.sh, configure.in: Removed some overcomplicated and
	  unrealistic build options. Sort out all the library checking
	  to use the macros.

	* Makefile.am: Reinclude acorn maps for packaging as Acorn.

	* cyphesis.spec.in: Bring rpm spec up to date, with packages
	  for server, libs and game data.

	* rulesets/Makefile.am: Fixed distribution of ruleset hooks .in file.

2002-06-10  Al Riddoch  <alriddoch@zepler.org>

	* Write rpm spec dividing stuff up into server package, lib
	  packages, and game packages. Clean up configure, and use autoconf
	  to process ruleset_import_hooks.py.

2002-06-10  Al Riddoch  <alriddoch@zepler.org>

	* Makefile.am, cyphesis.spec.in: Clean up install process, and update
	  rpm spec.

2002-06-09  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/mason/define_world.py: Start re-work of NPC initialisation
	  for mason.

2002-06-08  Al Riddoch  <alriddoch@zepler.org>

	* common/const.h: Increase the sight range.

	* server/WorldRouter.cpp: Put in some warnings, as I want to
	  know when ops are getting broadcast.

	* server/server.cpp: Ensure stdout is not used when in daemon mode.

	* tools/cydbload.cpp: Rename the daftly named class WorldBase
	  to WorldAccessor.

	* mason.xml, cyphesis.vconf: Stop using the Acorn ruleset in Mason,
	  as it contains strange stuff, and remove the playable farmer
	  class from basic. Now games themselves define the only
	  playable types, and mason contains its own copies of classes
	  it has in common with acorn.

2002-05-21  Michael Koch <konqueror@gmx.de>

	* configure.in: added --enable-debug

2002-05-21  Al Riddoch  <alriddoch@zepler.org>

	* server/ServerRouting.cpp, server/ServerRouting.h,
	  server/ServerRouting_methods.h: Workaround for older GNU compilers
	  that can't inline under certain circumstances.

2002-05-19  Al Riddoch  <alriddoch@zepler.org>

	* server/Account.cpp: Provide names on accounts for uclient.

2002-05-19  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Fix loss of set ops from mind.

2002-05-18  Al Riddoch  <alriddoch@zepler.org>

	* client/ObserverClient.cpp, server/Account.cpp, server/Connection.h,
	  server/Routing.h: Formatting cleanup

	* client/Py_CreatorClient.cpp, rulesets/Area.cpp, rulesets/Area.h,
	  rulesets/Character.cpp, rulesets/Character.h, rulesets/Entity.cpp,
	  rulesets/Entity.h, rulesets/Line.cpp, rulesets/Line.h,
	  rulesets/Plant.cpp, rulesets/Plant.h, rulesets/Py_Mind.cpp,
	  rulesets/Py_Thing.cpp, rulesets/Stackable.cpp, rulesets/Stackable.h:
	  Replace operator[] with get() method for querying attributes.
	  Make this get() method const, and re-write the internals so
	  that it more cleanly handles attributes.

	* common/BaseWorld.h: Re-write world.getObject() so that it
	  no longer uses std::map::operator[], as the old method was
	  inserting NULLs into the world dictionary when non-existant
	  entities were queried.

	* rulesets/Character.cpp: Clean up outstanding issues when movement
	  position is supplied, and is very close to being correct, and
	  clarify comments about movement when neither destination nor
	  source are provided.

	* rulesets/Character.cpp: Modify mind2body interface so that setting
	  the TO of ops is done in the individual handlers, and copying
	  the operation globally is avoided.

	* rulesets/MemMap_methods.h: Remove dodgy debug code.

	* rulesets/Pedestrian.cpp: Clarify movement fixme.

	* rulesets/Py_Operation.cpp: Clarify operation time handler fixme.

	* rulesets/Stackable.cpp: Clarify fixme's in combine and divide
	  handlers.

	* server/CommServer.cpp: Remove redundant fixme.

	* server/Connection.cpp, server/ServerRouting.cpp,
	  server/ServerRouting.h, server/ServerRouting_methods.h,
	  server/server.cpp:
	  Move inline ServerRouting::getObject into class header.

	* server/WorldRouter.cpp, server/WorldRouter.h:
	  Clean up  includes, and move updateTime into the main body of the
	  file. Clean up code formatting when handling maps and dictionaries.
	  Clarify error output and comments about NULL objects in the world
	  dictionary.

2002-05-17  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Operation.cpp, rulesets/Py_Operation.h: Add a variant
	  of the python Operation wrapper which handles const operations.

	* rulesets/PythonMindScript.cpp, rulesets/PythonThingScript.cpp:
	  Pass const versions of operations to the python scripts, rather
	  than having to copy them.

	* server/ServerRouting.cpp: Add build date, time and version to
	  server info.

2002-05-16  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/MemMap.h: C++ compliance fix.

2002-05-16  Al Riddoch  <alriddoch@zepler.org>

	* client/CommClient.cpp, client/ClientConnection.cpp, tools/cycmd.cpp:
	  Ensure clients use username in login ops.

	* common/BaseEntity.cpp, common/op_switch.h, rulesets/BaseMind.cpp:
	  Modify the way op switchers work so they can be used for functions
	  that return any type.

	* rulesets/Character.cpp, rulesets/Character.h: Re-write world2mind
	  layer so that rather than copying ops that are to be sent to
	  the mind, the w2m functions returning a flag indicating whether
	  the op should be passed to the mind. Made w2m and mind op handlers
	  final, as they are never overridden.

	* rulesets/Creator.cpp: Correct comments.

	* rulesets/MemMap.cpp: Add comments clarifying behavoir, and remove
	  old pseudo-code.

	* server/Account.cpp, server/Account.h: Ensure that an accounts
	  character dictionary only ever contains characters. Other entities
	  that the account chooses to create will no be stored here. Add
	  function to be called at login time to make sure that characters
	  stored here are still around.

	* server/Connection.cpp, server/Connection.h, server/ExternalMind.cpp,
	  server/ExternalMind.h: When external mind of a character is
	  destroyed, ensure that the character is removed from the
	  connection's object reference store.

2002-05-15  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.h, server/WorldRouter.cpp, common/BaseWorld.h,
	  rulesets/Creator.cpp, rulesets/World.cpp: Removed unused and
	  unnecessary code from BaseWorld class, and move some stuff into
	  the WorldRouter where it belongs.

	* rulesets/Character.cpp: Fixed a bug in the way ops from the
	  mind are handled which caused a segfault.

	* rulesets/Character.h, rulesets/Creator.h: Made some functions
	  which are never overridden non-virtual for speed.

	* rulesets/MemMap.cpp, rulesets/MemMap.h, rulesets/MemMap_methods.h:
	  Cleaned up the memmap code to get rid of inefficiency, and badly
	  written code.

	* rulesets/Movement.cpp: Code formatting cleanup.

	* server/Routing.h: Remove old commented out code.

2002-05-14  Al Riddoch  <alriddoch@zepler.org>

	* server/Account.cpp, server/Connection.cpp: Switched to using
	  USERNAME of accounts rather that ID for login and account creation.
	  Toughened up the connection code, so invalid login/create ops
	  are handled.

	* server/Connection.h: Removed unused getObject method.

	* rulesets/Character.cpp, rulesets/Character.h: Get rid of
	  inefficiency handling ops from internal and external mind. Fix
	  leak of some ops.

	* common/BaseWorld.h, server/WorldRouter.cpp, server/WorldRouter.h:
	  Add method for getting a new serialno.

	* rulesets/Thing.cpp, rulesets/Thing.h, server/WorldRouter.cpp:
	  Set refno on ops as they come back from entities. Set serialnos
	  on same ops at the same time, but do not set serialnos
	  on ops that come in from elsewhere, as those are now handled at
	  source.

	* rulesets/Creator.cpp, rulesets/Character.cpp:
	  Ensure that ops from external client preserve their serialno,
	  and assign new serialnos to other ops created at the same time.

2002-05-13  Al Riddoch  <alriddoch@zepler.org>

	* server/Connection.cpp: Fix slight inefficiency in processing ops.

	* server/Account.cpp: Make sure accounts have names.

2002-05-11  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/BaseMind.cpp: Fix NPC behavoir by ensuring that tick
	  and setup ops reach scripts.

2002-05-11  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp, rulesets/Movement.cpp, rulesets/Movement.h:
	  Tweaked movement code to cut down on redundant ticks when movement
	  has reached destination. Fixed bug where character jumped if it
	  walked into a building.

	* rulesets/Pedestrian.cpp: Modified collision resolution so that
	  movement does not slow down if it is deflected.

2002-05-10  Al Riddoch  <alriddoch@zepler.org>

	* modules/Location.cpp, modules/Location.h, physics/BBox.h,
	  physics/Vector3D.h, rulesets/Character.cpp, rulesets/Entity.cpp,
	  rulesets/MemMap.cpp, rulesets/Movement.cpp, rulesets/Pedestrian.cpp,
	  rulesets/Py_BBox.cpp, rulesets/Py_Location.cpp,
	  server/Account.cpp, server/WorldRouter.cpp:
	  Get rid of operator bool() in vector and related classes,
	  so that errors are less likely to emerge in code. Make use
	  of Vector3D::isZero() where apropriate.

2002-05-10  Al Riddoch  <alriddoch@zepler.org>

	* physics/Quaternion.h: Added required comparison operators, and
	  get rid of operator bool, to ensure that no implicit conversion
	  happens where it shouldn't. Add operator required for debugging
	  Quaternion.

	* modules/Location.cpp: Use new isValid() method instead of
	  relying on operator bool.

	* rulesets/Movement.h, rulesets/Pedestrian.cpp, rulesets/Pedestrian.h:
	  Fix up interface for genFaceOperation() so it works the right
	  way round, and orientation is not actually set until the Move
	  op is genuinly dispatched.

	* rulesets/Character.cpp: Add clearer debugging output.
	  Fix up handling orientation in move ops from mind, and generate
	  the move ops for simple change in orientation correctly.

2002-05-10  Al Riddoch  <alriddoch@zepler.org>

	* physics/Quaternion.cpp, physics/Quaternion.h: Revert hack to
	  quaternion sign convention, now that this has been resolved
	  by Ron in wfmath.

2002-05-09  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Pedestrian.cpp: Fixed collision resolution so it
	  no longer affects orientation of colliding entities.

2002-05-08  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Movement.cpp, rulesets/Pedestrian.cpp: Hardened collision
	  code to try and catch the bug simon is seeing. Fixed some slight
	  bugs and inefficiencies in the process.

2002-05-07  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Pedestrian.cpp: Fix bug in movement logic that meant
	  small moves occured instantaneously.

	* rulesets/Line.cpp: Fix to line code. Thanks to Wolfgang Beutner
	  for pointing out the bug.

2002-05-05  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Creator.cpp: Admin's creator entity serves no purpose
	  if it is no longer connected to a client, so it now destroys
	  itself if it is disconnected.

2002-05-03  Al Riddoch  <alriddoch@zepler.org>

	* tools/cycmd.cpp: Fix atlas object output, so list and map contents
	  are shown.

2002-05-02  Al Riddoch  <alriddoch@zepler.org>

	* tools/cydbload.cpp, tools/cyisoload.cpp, tools/cyloadrules.cpp:
	  Clean up unused headers, and incorrect use of fstream in
	  some tools.

2002-04-30  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp: Get rid of default db username, so that
	  the current unix username is used instead.

2002-04-30  Al Riddoch  <alriddoch@zepler.org>

	* server/Persistance.h, server/Persistance.cpp:
	  Removed legacy code for passing admin account data to the
	  python client.

2002-04-25  Al Riddoch  <alriddoch@zepler.org>

	* server/Connection.cpp: Correctly handle connections on account
	  object, so multiple logins on same account does not result in
	  corruption or crashes.

2002-04-25  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.cpp, rulesets/Entity.h, rulesets/Character.cpp,
	  rulesets/Character.h, rulesets/Thing.cpp, rulesets/Food.cpp:
	  Renamed weight member as mass, and use this name in Atlas,
	  as this is a better convention, and has already been adopted in
	  stage.

	* Switched python code to using mass instead of weight, as it is
	  a more accurate term.

	* common/globals.cpp, common/globals.h, tools/cyloadrules.cpp:
	  Put admin modifiable config in etc instead of share directory.

	* Don't build cycmd if readline is not available. Untested, and
	  probably nasty.

2002-04-12  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.cpp, common/BaseEntity.h, common/BaseWorld.cpp,
	  common/Database.cpp, common/accountbase.h, modules/WorldTime.h,
	  rulesets/Py_World.cpp, server/Admin.cpp, server/Persistance.cpp,
	  server/Persistance.h:
	  Clean up includes.

	* rulesets/Entity.cpp, rulesets/Entity.h: Write improved way of
	  handling immutable object attributes.

	* server/EntityFactory.cpp, server/Player.cpp, server/Player.h:
	  Implement a character_types attribute on the player account,
	  by adding "playable" tag to rules database, and setting
	  up a set of character types when rules are read from database.

2002-03-19  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp, server/ServerRouting_methods.h,
	  server/ServerRouting.h, server/ServerRouting.cpp,
	  server/Routing.h, server/Routing.cpp, server/Connection.h,
	  server/Admin.cpp:
	  Removed inheritance from Routing by Connection and ServerRouting,
	  as there is almost no functionality in common. Get rid of global
	  idDict in ServerRouting is it serves little or no useful purpose.
	  IG objects are now managed in WorldRouter, and OOG objects in
	  ServerRouting.

	* common/BaseWorld.h: Made accessor method const, as it should be.

2002-03-12  Al Riddoch  <alriddoch@zepler.org>

	* server/server.cpp, rulesets/Python_API.cpp, rulesets/Line.cpp,
	  modules/Location.cpp, client/CreatorClient.cpp:
	  Removed some obsolete comments.

	* server/WorldRouter.h, server/WorldRouter.cpp: Add member to
	  deliver operation to known entity. Make use if it to avoid
	  having to recurse in operation() when broadcasting. Ensure
	  that the container of new entities is managed from here.

	* rulesets/Thing.cpp: Tell world to create new entities at the
	  same position as the creator if no other info is provided.
	  Do not attempt to handle setting up the default containership
	  of entity once created, as this is always handled by the
	  WorldRouter from now on.

	* rulesets/Py_World.cpp: Implement getting time info from world.

	* rulesets/Py_Location.cpp: Implement handling of the orientation
	  attribute from python.

	* rulesets/MemMap.cpp: Update comments about unimplemented code.

	* rulesets/Creator.cpp: Check for string.empty() instead of "".

	* rulesets/BaseMind.cpp: Remove reference python code.
	  Cleanly handle and delete operations returned when savinf mind state.

	* client/CharacterClient.cpp: Move delete to the right place.

2002-03-11  Al Riddoch  <alriddoch@zepler.org>

	* tools/cycmd.cpp, server/Lobby.cpp, server/Connection.cpp,
	  rulesets/Character.cpp, client/client.cpp,
	  client/ObserverClient.cpp: ISO C++ compliance fixes.

2002-03-11  Al Riddoch  <alriddoch@zepler.org>

	* client/ClientConnection.h, client/ClientConnection.cpp:
	  Added a select() timeout to the connection polling, so the
	  client thrashes a bit less.

2002-03-11  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Eliminate unnecessary call to opEnumerate()
	  and enhance debugging output.

	* server/Player.cpp: Correct the use of string.compare() in older
	  versions of libstdc++.

	* common/types.h: Added enumeration for other operations, not
	  handled by the core, but considered valid. Added new type
	  for storing mapping between operation parents and their
	  enumerated type.

	* common/op_switch.h: Separate handling of operations known to
	  be invalid from operations which are valid, but not explicitly
	  added to the core.

	* common/inheritance.h, common/inheritance.cpp, common/custom.cpp:
	  Provide global operation mapping where enumeration of operations
	  can be looked up. Install all types handled by the core, and
	  types known to be used in scripts.

	* common/BaseEntity.h, common/BaseEntity.cpp: Add object specific
	  operation mapping where operation types each object is subscribed
	  to can be enumerated, and others are rejected. Add mechanism
	  so that objects can add to the mapping, this subscribing to
	  operations. This makes enumerating operations much cheaper, and
	  eliminates the overhead of handling ops an object has no interest
	  in.

	* rulesets/Thing.h, rulesets/Thing.cpp: Add mechanism so scripts
	  can subscribe to operations.

	* rulesets/Character.h, rulesets/Character.cpp:
	  Add subscription mechanism for ops going to and from
	  the mind.

	* rulesets/BaseMind.h, rulesets/BaseMind.cpp:
	  Add subscription mechanism for sight and sound perception
	  operations sub operations, and provide an interface to it
	  for scripts.

	* server/Connection.cpp, server/Admin.cpp, server/Account.cpp,
	  rulesets/World.cpp, rulesets/World.h, rulesets/Thing.cpp,
	  rulesets/Stackable.cpp, rulesets/Plant.cpp, rulesets/Food.cpp,
	  rulesets/Character.cpp, rulesets/BaseMind.cpp:
	  Add subscriptions to operations for all core base classes.

	* rulesets/Python_API.cpp: When script is created, go through
	  methods, and subscribe to the operations which are handled by
	  them.

	* rulesets/Character.cpp: When calculating orientation of a walking
	  character, assume it is standing upright.

	* physics/Vector3D.h: Add versions of mag() and distance() which
	  omit the square root calculations, so that when their values
	  are only used for comparison, the expensive square root
	  calculations can be ommited. Add new version of collision
	  and range checking functions which provide the optimal
	  interface to the application. Add versions of methods which
	  modify this rather than creating a new operation to eliminate
	  wasted copies.

	* physics/Quaternion.cpp: Make use of faster interface provided
	  by Vector3D.

	* physics/BBox.h: Add new version of collision checking function
	  which provides optimal interface to the application.

	* modules/Location.h, modules/Location.cpp: Add new functions
	  to optimally calculate the distance between any two entities.

	* modules/Location.h: Re-write collision and range functions to
	  make much more optimal use of Vector3D, BBox and distance
	  functionality.

	* rulesets/Py_Vector3D.cpp, rulesets/Pedestrian.cpp,
	  rulesets/Movement.cpp, rulesets/Entity.cpp, rulesets/Character.cpp:
	  Eliminate implicit copies from vector arithmetic.

	* rulesets/Pedestrian.cpp, rulesets/MemMap.cpp, common/const.h:
	  Re-write code which uses magnitude of vectors to use the square
	  of the magnitude instead, as it is much cheaper to calculate.

2002-03-09  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Location.cpp: Re-wrote commented out orientation
	  code so it uses the correct variable names.

2002-03-08  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.cpp, common/BaseEntity.h, rulesets/Entity.h,
	  server/Connection.cpp: Remove destroy from the base class, and
	  make it non-virtual, as it is not used this way.

	* rulesets/Entity.cpp: Clean up destroy, ensuring that contains
	  is managed correctly.

	* server/WorldRouter.cpp: Eliminate duplicate contains management.

2002-03-08  Al Riddoch  <alriddoch@zepler.org>

	* server/Persistance.cpp, server/Connection.cpp, server/Admin.cpp,
	  server/Account.cpp, rulesets/Thing.h, rulesets/Thing.cpp,
	  rulesets/Stackable.cpp, rulesets/Py_Location.cpp,
	  rulesets/Entity.h, rulesets/Entity.cpp, rulesets/Creator.cpp,
	  rulesets/Character.cpp, common/BaseEntity.h, common/BaseEntity.cpp:
	  Get rid of flags used to determine object type, and get rid
	  of use of C style casts to cast between object pointers.
	  Replace both with dynamic casts. Clean up some stray casts
	  left behind from older versions of object structure.

	* physics/Vector3D.cpp: Added note explaining when to use
	  Vector3D::relMag() instead of mag().

2002-03-08  Al Riddoch  <alriddoch@zepler.org>

	* Changed typedef names to ones which make more sense, and are
	  clearer. There is no change in functionality in this commit.

2002-03-08  Al Riddoch  <alriddoch@zepler.org>

	* common/globals.cpp, common/globals.h, rulesets/Python_API.cpp,
	  tools/cyloadrules.cpp: Make rulesets list a vector for
	  efficiency.

	* common/utility.cpp, common/utility.h: New function to create
	  an operation from a message Object.

	* rulesets/BaseMind.cpp, rulesets/MemMap.cpp, rulesets/MemMap.h,
	  rulesets/MemMap_methods.h, rulesets/Py_Map.cpp: Clean up
	  mind/memory interface, eliminating copies, unecessary allocations,
	  and passing more apropriate types around.

	* server/CommClient.cpp, rulesets/Py_Operation.cpp: Make use of
	  operation converter where it is apropriate.

2002-03-07  Al Riddoch  <alriddoch@zepler.org>

	* common/inheritance.h: Cleaner handling of erroneous type
	  additions, and eliminate leakage.

2002-03-07  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.h, server/WorldRouter.cpp, rulesets/Thing.cpp,
	  rulesets/Entity.h, rulesets/Entity.cpp, common/types.h,
	  common/BaseWorld.h: Switched to using sets instead of lists
	  for contains, and other data structore for performance.

	* rulesets/Line.cpp: Added debugging.

	* rulesets/MemMap.cpp, rulesets/MemMap.h, rulesets/MemMap_methods.h:
	  Switch to using vectors instead of lists for performance.

2002-03-06  Al Riddoch  <alriddoch@zepler.org>

	* common/types.h: Added typedefs for some sequences used in
	  geomaps.

	* common/type_utils.h:
	  Utility functions for types in types.h, used with Atlas.

	* rulesets/Line.h, rulesets/Line.cpp, rulesets/Area.h,
	  rulesets/Area.cpp: Converted hard attributes over to the
	  correct type, and implemented setting and observing those
	  attributes.

2002-03-06  Al Riddoch  <alriddoch@zepler.org>

	* server/Routing.h: Map dictionary function more robust.

	* rulesets/Pedestrian.cpp: Increased debugging output.

	* rulesets/Character.cpp: Ensure it is handled if no move
	  op is created.

	* physics/Vector3D.h: Ensure operator!= is implemented as
	  compiler cannot be relied upon to use operator== instead.

	* common/inheritance.h, common/Database.cpp: ISO C++ fixes.

2002-03-06  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Line.h, rulesets/Line.cpp, rulesets/Area.h,
	  rulesets/Area.cpp, server/EntityFactory.cpp: Added stub
	  base classes for new geometric entities.

	* server/ServerRouting.cpp, server/Lobby.h, server/Lobby.cpp,
	  server/Connection.cpp: Fleshed out lobby functionality,
	  so that accounts/connections are no longer responsible
	  for managing their own appearance and disappearance.

	* server/Account.cpp: Send info of logout.

2002-03-06  Al Riddoch  <alriddoch@zepler.org>

	* tools/cycmd.cpp, server/WorldRouter.cpp, server/EntityFactory.cpp,
	  server/Connection.cpp, server/Admin.cpp, server/Account.cpp,
	  rulesets/World.cpp, rulesets/Thing.cpp, rulesets/Py_Operation.cpp,
	  rulesets/MemMap_methods.h, rulesets/MemMap.cpp, rulesets/Entity.cpp,
	  rulesets/Character.cpp, rulesets/BaseMind.cpp:
	  Use empty() instead of size() == 0 for STL sequence types.

	* rulesets/ThingFactory.h, server/EntityFactory.cpp: Modified the
	  way adding classes to the inheritance tree is handled, so types
	  no longer have to inherit directly from a C++ class.

	* server/WorldRouter.cpp: Modified the way broadcast operations are
	  handled to make them more efficient, and catch NULL pointers in
	  the world dictionary.

2002-03-05  Al Riddoch  <alriddoch@zepler.org>

	* tools/cycmd.cpp, client/ClientConnection.cpp:
	  Removed c_str() where not required.

	* server/CommServer.cpp: Cleaned up removal of dead connections.

	* server/server.cpp, server/Persistance.cpp: Get rid of leaks
	  of factory and database connection objects.

	* common/inheritance.h: Detect and flag errors introduced into
	  type tree.

	* rulesets/MindFactory.h: Add method to shutdown factory.

2002-03-03  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp, common/Database.h, common/accountbase.h,
	  server/Persistance.cpp, server/Persistance.h,
	  tools/cydbload.cpp, tools/cyloadrules.cpp, tools/cypasswd.cpp:
	  Modified class structure of database related classes to get
	  rid on nasty inheritance based idea. Add functionality
	  to handle updating a row as distinct from inserting. Made
	  id column the primary key. Updated tools to make propper use
	  of update functionality.

2002-03-03  Al Riddoch  <alriddoch@zepler.org>

	* client/CreatorClient.cpp: Fix operation semantics for admin
	  puppetting to new convention.

	* common/Database.cpp: Add optional support for database password.

	* physics/Quaternion.h: Add extra way of setting up a Quaternion.

	* rulesets/MindFactory.cpp, server/Connection.cpp:
	  Move some output into debugging.

	* rulesets/Python_API.cpp, rulesets/Py_Quaternion.h,
	  rulesets/Py_Quaternion.h: Add support for quaternions into the
	  scripting API.

	* rulesets/mason/define_world.py: Switch to using quaternions to
	  send orientation data to the server.

2002-02-22  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.h, server/WorldRouter.cpp, server/EntityFactory.h,
	  server/Account.h, server/Account.cpp, common/BaseWorld.h:
	  Clean up interface so that entities are passed around more simply.

	* server/EntityFactory.cpp:
	  Get rid of redundant code, and ensure that all classes, even
	  undefined ones, have a type info node.

2002-02-18  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseWorld.h:
	  Prevent slicing.

	* ./server/Player.cpp:
	  Add settler class to mason ruleset.

2002-02-18  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.h:
	  Private un-implemented copy constructor and assignment operator,
	  so slicing won't occur.

	* physics/Vector3D.h:
	  Switched collision detection with parent so only the case where
	  the subject is completely clear of the object is checked for.

	* rulesets/Creator.cpp:
	  Implemented differentiation between priveleged in-game ops, and
	  normal in-game ops.

	* rulesets/Movement.cpp:
	  Increased verbosity of debugging output.

	* rulesets/Pedestrian.cpp:
	  Correctly implemented target based movement with changing containers.

2002-01-28  Al Riddoch  <alriddoch@zepler.org>

	* client/ClientConnection.cpp, client/CommClient.h,
	  common/globals.cpp, common/globals.h, server/server.cpp,
	  tools/cycmd.cpp:
	  Make the TCP port number a global config setting, and
	  ensure it is used everwhere, so it can be overriden, and all
	  clients and tools will use it. Modify behavoir so that any
	  settings overridden on the command line are made semi-permanent
	  in the users home directory, making it easier for users to run
	  two versions on one machine at the same time.

	* common/Database.cpp, common/Database.h: Remove obsolete iterator
	  code. Add a method to clear a given database table.

	* server/Persistance.h, tools/cyloadrules.cpp:
	  Automate loading of the ruleset given in the config file, and
	  the rulesets it depends on, ensuring that the rules table
	  is cleared first.

2002-01-27  Al Riddoch  <alriddoch@zepler.org>

	* server/server.cpp, client/client.cpp, common/globals.cpp:
	  Move loading of ruleset list from config file into the
	  generic loadConfig function.

	* server/EntityFactory.cpp, server/EntityFactory.h:
	  Add support for reading mind data from rules database. Remove
	  old code for installing classes from varconf. Clean up debugging
	  output.

	* server/Admin.cpp: Remove setting of varconf class when new
	  type is installed from client.

	* rulesets/MindFactory.h, rulesets/MindFactory.h: Get MindFactory
	  working, and set it up so EntityFactory installs info here
	  as it reads the rules from the database.

	* rulesets/Character.cpp: Use MindFactory to create minds.

	* common/Database.cpp: Clean up some obsolete comments.

	* aiclient/client.cpp: Get rid of invalid setup of varconf.

2002-01-27  Al Riddoch  <alriddoch@zepler.org>

	* common/Database.cpp, common/Database.h,
	  server/Persistance.cpp, server/Persistance.h:
	  Add a new table to store rulesets, so they can be persisted, and
	  edited online.  The new ruleset format integrates information
	  about the class hierarchy, scripting and default attributes.
	  Added low level method to fetch an entire database table as an
	  Atlas map.

	* tools/cyloadrules.cpp: New tool to load rulesets in new xml
	  format into database table.

	* server/EntityFactory.cpp, server/EntityFactory.h:
	  New re-written Entity Factory, to support new rules database
	  table, and better class definition capabilities.

	* rulesets/EntityFactory.cpp, rulesets/EntityFactory.h:
	  Removed from build.

	* client/CommClient.cpp: Redundant include removed.

	* rulesets/ThingFactory.h: Add storage to factory for script
	  info and default attributes.

	* server/WorldRouter.cpp: Switch to using new EntityFactory.

	* server/server.cpp: Removed old ruleset loading code, and now
	  simply load the ruleset names from the config file.

	* tools/cycmd.cpp: Exit correctly if connection fails.

2002-01-23  Al Riddoch  <alriddoch@zepler.org>

	* client/ClientConnection.h, server/CommClient.h, tools/cycmd.cpp:
	  Ported to using skstream2.

2002-01-17  Michael Koch <konqueror@gmx.de>

	* configure.in, tools/cypasswd.cpp:
	  check for termios.h and use it to turn off echo during input of
	  password in cypasswd when available

2002-01-14  Al Riddoch  <alriddoch@zepler.org>

	* C++ compliance fixes for gcc 3.

2002-01-13  Al Riddoch  <alriddoch@zepler.org>

	* modules/DateTime.cpp, modules/DateTime.h,
	  modules/WorldTime.cpp, modules/WorldTime.h:
	  Patch by Michael Koch to fix bugs, and pad out the implementation
	  of the time and date code.

2002-01-13  Al Riddoch  <alriddoch@zepler.org>

	* client/client.cpp, server/server.cpp, common/globals.cpp,
	  common/globals.h, tools/cycmd.cpp, tools/cydbload.cpp,
	  tools/cypasswd.cpp: Move code for handling loading of config
	  from the command line, user config and global config, into
	  globals.cpp, and make use of it in all tools.

	* tools/cycmd.cpp: Fix objtype on server set commands.

	* common/Database.cpp, common/Database.h: Implemented new database
	  interface to PostgreSQL to replace inadequate db3 code.

	* common/database.cpp, common/database.h: Old code removed from the
	  build.

	* common/accountbase.h, server/Admin.cpp, server/Persistance.cpp,
	  server/server.cpp, tools/cydbload.cpp: Fixed for minor changes
	  in the low level database API.

	* common/globals.h, common/globals.cpp, rulesets/EntityFactory.cpp,
	  server/Admin.cpp, server/CommServer.cpp, 
	  Remove varconf header from globals.h, and put in .cpp files
	  where it belongs.

2001-12-15  Al Riddoch  <alriddoch@zepler.org>

	* physics/Quaternion.cpp, physics/Quaternion.h: Corrected bugs
	  in the constructor which takes 2 vectors, and moved it out
	  of the header file. This appears to work now that the args
	  have been swapped round. See comments in Quaternion.cpp for
	  details.

2001-12-14  Al Riddoch  <alriddoch@zepler.org>

	* common/database.h: Add function to query database path for
	  error reporting.

	* server/server.cpp: Added check to database initialisation so
	  that an error opening the databases is reported with explanation,
	  or logged as apropriate, and startup is aborted.

	* phyics/Quaternion.h: Added quaternion class for represening rotation.

	* modules/Location.cpp, modules/Location.h: Removed face attribute and
	  replaced with orientation which is a quaternion.

	* rulesets/Character.cpp: Modified code which handles the direction
	  of movement, and how this affects the character rotation so it
	  now uses orientation.

	* rulesets/Entity.cpp: Switch attribute checks from face to
	  orientation.

	* rulesets/Movement.h, rulesets/Pedestrian.cpp: Modify movement
	  code so that orientation used instead of face.

	* rulesets/Py_Location.cpp: Removed support for obsolete and
	  unused rotation attriute from python code.

	* rulesets/Thing.cpp: Modified attriute handling to use orientation
	  instead of face.

2001-12-10  Al Riddoch  <alriddoch@zepler.org>

	* Fixed build files for debian, and converted bbox in define_world.py
	  to new format.

2001-12-06  Al Riddoch  <alriddoch@zepler.org>

	* common/database.h, common/database.cpp: Cleaned up header so
	  it no longer requires db3 headers, and reimplemented support
	  for debian.

	* tools/cycmd.cpp: Fixed to work with new database headers.

2001-11-30  Al Riddoch  <alriddoch@zepler.org>

	* physics/BBox.h, rulesets/Py_BBox.h, rulesets/Py_BBox.cpp:
	  Added direct support for new format bounding boxes.

	* modules/Location.cpp, modules/Location.h, physics/Vector3D.h,
	  rulesets/Character.cpp, rulesets/Creator.cpp, rulesets/Entity.cpp,
	  rulesets/Movement.cpp, rulesets/Plant.cpp, rulesets/Py_Location.cpp:
	  Switched over to using new format bounding boxes, and re-wrote
	  collision code for this format, making it clearer and more
	  efficient at the same time.

2001-11-26  Al Riddoch  <alriddoch@zepler.org>

	* common/persistance.cpp, rulesets/BaseMind.cpp, rulesets/Character.cpp,
	  rulesets/Entity.cpp, rulesets/EntityFactory.cpp, rulesets/Food.cpp,
	  rulesets/MemMap.cpp, rulesets/Thing.cpp, server/Admin.cpp:
	  Improved robustness and readability of code handling Atlas
	  attributes.

2001-11-26  Al Riddoch  <alriddoch@zepler.org>

	* server/Connection.cpp: Toughened up Logout handling, and made
	  type info Get handling more robust.

	* server/Admin.cpp, server/Admin.h: Added capability for admin to
	  forcefully logout users.

	* server/Account.cpp: Made handling of OOG Look ops more inline with
	  Atlas conventions, made args handling more robust.

2001-11-24  Al Riddoch  <alriddoch@zepler.org>

	* server/server.cpp, server/Admin.cpp, rulesets/EntityFactory.h,
	  rulesets/EntityFactory.cpp, common/inheritance.h, common/custom.cpp:
	  Modified EntityFactory so entity classes are automatically installed
	  in the inheritance tree as they are loaded.

	* server/CommClient.cpp, server/Connection.cpp: Removed some debugging
	  output.

2001-11-23  Al Riddoch  <alriddoch@zepler.org>

	* common/custom.cpp, common/inheritance.cpp, common/inheritance.h:
	  Simplified and cleaned up inheritance query code, and hacked in
	  some of the OOG and IG classes.

2001-11-22  Al Riddoch  <alriddoch@zepler.org>

	* common/operations.cpp, common/Save.h, common/Nourish.h, common/Load.h,
	  common/Fire.h, common/Eat.h, common/Cut.h, common/Chop.h:
	  Fixed custom operations so they really do inherit from what I
	  claim they do.

2001-11-21  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.cpp: Set serialnos on error ops.

	* common/inheritance.cpp, common/inheritance.h, common/custom.cpp:
	  Rationalise the way types are stored in the inheritance system
	  and install info about cyphesis custom operations.

	* example/client/InheritanceClient.cpp,
	  example/client/InheritanceClient.h: Update to use skstream.

	* server/ServerRouting.cpp, server/ServerRouting.h,
          common/serialno.h, common/serialno.cpp: Switch to using
	  a more global easier to access source of serial numbers.

2001-11-11  Al Riddoch  <alriddoch@zepler.org>

	* Release cyphesis 0.1.

2001-11-10  Al Riddoch  <alriddoch@zepler.org>

	* Cleaned up auto* build files. Added more updated info to README.

	* modules/Location.cpp: Removed redundant includes.

	* rulesets/mason/define_world.py: Drop in copy of Acorn world.

	* server/WorldRouter.cpp: Removed double delete of gameWorld.

	* server/server.cpp: Modified comments about segfault in Python
	  shutdown, as this has now been eliminated.

2001-11-08  Al Riddoch  <alriddoch@zepler.org>

	* common/inheritance.h, server/Connection.cpp: Simplify behavoir when
	  type is unknown, and return an error to the client.

	* server/Admin.cpp, server/Account.cpp, server/Connection.cpp: Ensure
	  serial number is set on all OOG operations.

2001-11-08  Al Riddoch  <alriddoch@zepler.org>

	* server/Lobby.cpp: Removed debugging output.

	* server/Account.cpp: Added handling of private chat.

	* physics/Vector3D.h: Added more operators for efficient arithmetic
	  with vectors.

	* Added basis for mason ruleset.

Sunday, October 28 2001, James Turner <jmtn@blueyonder.co.uk>

	* Updated configure.in to work with automake 2.5 (out here on
	  the edge, the blood is flowing thick and fast).

	* Certain distributions do not have libTermcap, and instead
	  combine that functionality into NCurses; configure now
	  checks for this. This should behave correctly on both
	  RedHat and SuSE, particularly.

2001-10-28  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.h, server/Connection.h, rulesets/Pedestrian.h,
	  rulesets/Movement.h, rulesets/MemMap.h, physics/Vector3D.h,
	  modules/WorldTime.h, modules/Location.h, modules/DateTime.h,
	  common/Generic.h, common/BaseWorld.h: Ensure that single argument
	  constructors are explicit, so we don't get any naughty implicit
	  type conversion going on.

	* server/CommClient.h: Added an operation dump feature for debugging.

2001-10-19  Al Riddoch  <alriddoch@zepler.org>

	* client/ClientConnection.cpp, client/ClientConnection.h,
	  tools/cycmd.cpp: Switched to using skstream to completely handle
	   client socket connections.

	* client/ClientConnection.cpp, client/ClientConnection.h,
	  common/log.cpp, rulesets/EntityFactory.h, rulesets/MemMap.h,
	  server/server.cpp, tools/cycmd.cpp: Removed unused includes.

	* client/Py_CreatorClient.cpp, client/client.cpp,
	  client/define_world.cpp, rulesets/Py_Location.cpp,
	  rulesets/Py_Location.h, rulesets/Py_Map.cpp,
	  rulesets/Py_Map.h, rulesets/Py_Mind.cpp, rulesets/Py_Mind.h,
	  rulesets/Py_Object.cpp, rulesets/Py_Object.h,
	  rulesets/Py_Operation.cpp, rulesets/Py_Operation.h,
	  rulesets/Py_Oplist.cpp, rulesets/Py_Oplist.h,
	  rulesets/Py_Optime.cpp, rulesets/Py_Optime.h,
	  rulesets/Py_Thing.cpp, rulesets/Py_Thing.h,
	  rulesets/Py_Vector3D.cpp, rulesets/Py_Vector3D.h,
	  rulesets/Py_World.cpp, rulesets/Py_World.h,
	  rulesets/Py_WorldTime.cpp, rulesets/Py_WorldTime.h,
	  rulesets/PythonMindScript.cpp, rulesets/PythonThingScript.cpp,
	  rulesets/PythonThingScript.h, rulesets/Python_API.cpp,
	  rulesets/Python_API.h, server/server.cpp:
	  Reorganised python header files so that each header includes
	  all the code relevant for a particular type. Tidied up
	  the type implementations. Added prototypes to init_python_api()
	  to the Python_API.h header, and removed other dependencies from
	  it.

2001-10-18  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseWorld.cpp, common/OOGThing.cpp, rulesets/Entity.cpp,
	  rulesets/EntityFactory.cpp, rulesets/MindFactory.cpp,
	  rulesets/Stackable.cpp, server/Account.cpp, server/Admin.cpp,
	  server/CommClient.h, server/CommServer.cpp, server/CommServer.h,
	  server/Connection.cpp, server/ExternalMind.cpp,
	  server/Persistance.cpp, server/Persistance.h,
	  server/ServerRouting.cpp, server/WorldRouter.cpp,
	  server/server.cpp: Removed unused includes and code. Added some
	  FIXMEs.

	* rulesets/Thing.cpp: Added TO and FROM to faked Sight(Create()) ops.

	* server/OOG_Thing.cpp, server/OOG_Thing.h: Marked files as removed.

2001-10-17  Al Riddoch  <alriddoch@zepler.org>

	* tools/cyisoload.cpp: Removed unused iso map loader tool, and
	  get rid of coal dependancy.

2001-10-17  Al Riddoch  <alriddoch@zepler.org>

	* aiclient/ClientConnection.cpp, aiclient/client.cpp,
	  client/ClientConnection.cpp, common/database.h, common/globals.cpp,
	  common/persistance.cpp, common/stringstream.h, server/CommClient.cpp,
	  server/CommServer.cpp, server/Persistance.cpp, tools/cyctrl.cpp,
	  tools/cyctrl.cpp, tools/cydbload.cpp, tools/cyisoload.cpp,
	  tools/cypasswd.cpp: Removed unused config.h.

	* client/ObserverClient.cpp, common/const.h, tools/cycmd.cpp:
	  Use default password if the admin account cannot be fetched from
	  the database.

	* client/Py_CreatorClient.cpp, common/BaseEntity.cpp,
	  common/BaseEntity.h, rulesets/Character.cpp, rulesets/Creator.cpp,
	  rulesets/Entity.cpp, rulesets/Entity.h, rulesets/EntityFactory.cpp,
	  rulesets/MemMap.cpp, rulesets/Py_Mind.cpp, rulesets/Py_Thing.cpp,
	  rulesets/Py_World.cpp, rulesets/Thing.cpp, server/Account.cpp,
	  server/Admin.cpp, server/Connection.cpp, tools/cywatchdog.cpp:
	  Make many of the member variables of Entity protected, and add
	  the required accessors. Changed the name of the id attribute
	  to m_id.

	* common/BaseWorld.h, common/database.cpp, common/persistance.cpp:
	  Removed unused includes.

	* common/Chop.h, common/Cut.h, common/Eat.h, common/Fire.h,
	  common/Generic.h, common/Load.h, common/Nourish.h, common/Save.h,
	  common/Setup.h, common/Tick.h: Moved definition of virtual
	  functions into cpp file, to reduce wasted code.

	* common/Makefile.am: Create cyphesis library, which can be used by
	  other applications to access cyphesis databases.

	* common/config.h, common/database.h, server/Persistance.cpp,
	  tools/cydbload.cpp, tools/cyisoload.cpp, tools/cypasswd.cpp:
	  Remove conditional compilation of db code. db3 is now required.

	* server/WorldRouter.h: Fixed getNewId() so it take const string.

	* server/server.cpp: Removed python shutdown, so it does not
	  mess up the db if it causes a segfault.

2001-10-10  Al Riddoch  <alriddoch@zepler.org>

	* server/Account.cpp: Modified semantics of OOG ops, so the args
	  have a loc attribute indicating what room they take place in.

	* server/Connection.cpp: Added support for OOG appearance and
	  disappearance ops.

2001-10-10  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Python_API.cpp: Made variable names clearer.

	* server/Connection.cpp: Fixed adding accounts to lobby on login.

	* server/server.cpp: Limited the scope of the CommServer object
	  so that it is destructed before the rest of shutdown can
	  take place.

2001-10-10  Al Riddoch  <alriddoch@zepler.org>

	* server/Account.cpp, server/Lobby.cpp: Fixed OOG chat semantics.

2001-10-09  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Python_API.cpp: Fixed another leak in the python code.

2001-10-09  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Python_API.cpp, rulesets/PythonMindScript.cpp,
	  rulesets/Py_Oplist.cpp, rulesets/Py_Operation.cpp,
	  rulesets/Py_Map.cpp: Fixed some points in the code where Python
	  objects are not decreffed, and are thus leaked.

2001-10-09  Al Riddoch  <alriddoch@zepler.org>

	* server/server.cpp, rulesets/Python_API.cpp: Added function
	  to shutdown python. Ensure that all references that should be
	  decrefed during initialisation are.

	* tools/cywatchdog.cpp: Moved watchdog pidfile, so it is in
	  cyphesis specific dir.

	* tools/cyctrl.cpp: Moved in watchdog control program, which
	  makes controlling the watchdog easier.

2001-10-07  Al Riddoch  <alriddoch@zepler.org>

	* tools/cywatchdog.cpp: New watchdog which works with new server
	  behavoir.

2001-10-07  Al Riddoch  <alriddoch@zepler.org>

	* watchdog/watchdog.c: Deprecated non-working watchdog program.

	* tools/cypasswd.cpp, tools/cycmd.cpp, client/ObserverClient.cpp,
	  common/accountbase.h Added database delete method, which closes
	  the database, and make sure it is used.

	* server/server.cpp: Moved the point where the server drops to
	  a daemon, as doing this after the db was open seems to corrupt
	  the db.

	* common/database.cpp: If a db is opened but not created, then it
	  is read only.

2001-10-06  Al Riddoch  <alriddoch@zepler.org>

	* configure.in: Switch to using improved checks for Atlas-C++ and
	  python.

	* common/const.h, common/const.cpp, rulesets/Python_API.cpp:
	  Removed unused consts.

	* common/globals.h, common/globals.cpp, server/server.cpp:
	  Enable running as a daemon in the background by default.
	  This improves usability by removing dependance on users
	  session. Install signal handlers so signals cause clean
	  shutdown.

	* tools/cycmd.cpp: If adminning server on localhost, get admin
	  password directly from database, instead of asking user.
	  Allows cycmd to be used in scripts. Ensure that exit
	  status accuratly reveals whether the command was sent.

	* tools/cypasswd.cpp: Switch to using common/accountbase.h.

2001-10-06  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Mind.cpp: Fixed a leak python object.

2001-10-03  Al Riddoch  <alriddoch@zepler.org>

	* server/CommServer.cpp: Remove non-fatal "FATAL..." message when
	  client closes connection.

	* rulesets/Thing.cpp: If object to be created has no loc, set loc
	  to be the same as creator before passing to the factory.

	* rulesets/Entity.cpp: Clarify debug output when determining location
	  of new entities.

	* client/CommClient.cpp: Push output into debug mecanism. Switch
	  order of Create/Login for admin account so ordinary operation
	  does not issue an error. Admin account is created at startup,
	  so there is no need for the client to create it.

2001-09-13  Al Riddoch  <alriddoch@zepler.org>

	* server/CommClient.cpp, server/CommClient.h, server/CommServer.cpp:
	  Re-organised negotiation code so it is non-blocking. Server is now
	  a bit less easy to attack.

	* Marked files that are no longer part of the build with #error so
	  they never get built by accident.

2001-09-13  Al Riddoch  <alriddoch@zepler.org>

	* server/server.cpp: Moved CommServer and CommClient into their own
	  files. Cleaned up debugging output.

	* rulesets/EntityFactory.h, server/CommServer.h: Fixed headers so
	  the required ones are included.

	* server/Persistance.cpp: Re-wrote shutdown method so it deletes
	  the class instance.

2001-09-13  Al Riddoch  <alriddoch@zepler.org>

	* BUGS: Note that C++ version of client currently does not work.

	* TODO: Update on important issues which allow easy DOS attacks.

	* client/ClientConnection.cpp, client/ClientConnection.h:
	  Cleaned up unused code from ClientConnection class.

	* client/client.cpp: Removed monitoring section of client
	  so it simply exits once the world is initialised.

	* rulesets/basic/mind/goals/humanoid/werewolf.py:
	  Started work on dynamic goals for playing werewolf.

	* rulesets/werewolf/define_world.py: Added in the mayor, who runs
	  werewolf games.

	* common/BaseEntity.h: Made id of entity private, and implemented
	  accessors.

2001-08-19  Al Riddoch  <alriddoch@zepler.org>

	* client/CharacterClient.cpp: Removed commented out code.

	* client/CreatorClient.cpp: Fixed processing the response
	  to a create operation, and cleaned up debugging output.

	* client/ObjserverClient.cpp, client/ObserverClient.h,
	  client/client.cpp: Added setup method, which which handles
	  connecting, negotiation, logging in and creating character.

	* client/Py_CreatorClient.cpp: Added check if make() failed.

	* rulesets/Python_API.cpp: Fixed setting the import hooks
	  list properlly to include the ruleset list in use, instead
	  of hardcoding it.

	* rulesets/acorn/define_world.py: Copied define_world.py script
	  from client directory for Acorn.

	* rulesets/basic/editor.py: Modified to be used from C++ core.

	* rulesets/basic/mind/goals/__init__.py,
	  rulesets/basic/mind/goals/humanoid/werewolf.py:
	  Added in goals file to contain goals related to werewolf.

	* rulesets/basic/mind/panlingua/interlinguish.py:
	  Added in vote and execute verbs for werewolf.

	* rulesets/werewolf: Added in new ruleset for werewolf.

2001-08-16  Al Riddoch  <alriddoch@zepler.org>

	* tools/cycmd.cpp: Ensure that login op is flushed after it is sent.

	* server/Player.cpp: Arg order of std::string.compare() is
	  incompatable between recent libstdc++ versions. Switch
	  back to old version, still in most common use.

	* rulesets/Thing.cpp: Set refno on ops handled in game.

	* rulesets/Python_API.cpp: Modify Entity() python constructor
	  so that commonly used attributes from old atlas are translated
	  to their modern equivalents.

	* rulesets/Py_Thing.cpp, rulesets/Py_Mind.cpp: Differentiate
	  between previously identical error messages in several places.

	* rulesets/Py_Object.cpp: Rework conversion of python dict to
	  Atlas map to be more efficient and clean.

	* rulesets/Py_Location.cpp: Rework setting of vector parts of
	  location so that it can accept vectors from python in more
	  formats, including lists and tuples.

	* rulesets/Creator.h, rulesets/Character.h, common/BaseEntity.h:
	  Re-order virtual methods declarations to fit a convention.

	* common/stringstream.h: Hardcode use of local stringstream class,
	  as the version provided with older libstdc++ seems to be broken.

	* common/database.cpp: Use the common header to pick the right
	  stringstream implementation.

	* common/BaseWorld.cpp, server/Persistance.cpp: Removed unused
	  stringstream include.

	* rulesets/Creator.cpp: Added extra debug output.

	* client/define_world.h, client/define_world.cpp, client/CommClient.h:
	  Use CreatorClient to store Creators mind, instead of BaseMind.

	* client/client.cpp,
	  client/ObserverClient.h, client/ObserverClient.cpp,
	  client/CreatorClient.h, client/CommClient.h, client/CommClient.cpp:
	  Modify method names to fit capitalisation conventions.

	* client/CreatorClient.cpp: Implement creation of in-game entities,
	  using creator entity.

	* client/CommClient.cpp: Added correct client side monitoring of
	  creator entity.

	* client/ClientConnection.h, client/ClientConnection.cpp: Added
	  pending method to establish if ops are in the queue. Switched send()
	  method so we only send ops. Add setting of serialno of sent
	  ops, starting with an offset of 512.

	* client/CharacterClient.h: Removed unused member, opFound.

	* client/CharacterClient.cpp: Debugged sendAndWait() method.

2001-08-14  Al Riddoch  <alriddoch@zepler.org>

	* server/server.cpp, server/CommClient.h, client/ClientConnection.h,
	  tools/cycmd.cpp: Switched to using skstream library for socket
	  comms instead of hand rolled fstream based version.

	* ALL FILES: Fixed use of std namespace throughout all code.

2001-08-14  Al Riddoch  <alriddoch@zepler.org>

	* module/DataTime.h: Added includes so header is independant.

	* client/CommClient.cpp: Fixed leak of operations.

	* client/CharacterClient.h, client/CharacterClient.cpp,
	  client/CreatorClient.h, client/CreatorClient.cpp:
	  Added in mind classes for handling creator on client side.

2001-08-13  Al Riddoch  <alriddoch@zepler.org>

	* client/client.cpp,
	  client/ObserverClient.cpp, client/ObserverClient.h,
	  client/ClientConnection.cpp, client/ClientConnection.h,
	  client/define_world.cpp, client define_world.h:
	  Started re-coding of python client code in C++.

	* common/accountbase.h:
	  Database class used for simply accessing accounts.

	* common/OOGThing.cpp, common/OOGThing.h, server/Account.h,
	  server/Routing.h:
	  Moved OOGThing class into common as it is not server specific.

	* common/BaseWorld.cpp, common/BaseWorld.h,
	  server/WorldRouter.cpp, server/WorldRouter.h,
	  rulesets/Entity.h, rulesets/Py_World.cpp,
	  rulesets/PythonThingScript.cpp, rulesets/Python_API.h,
	  rulesets/Thing.cpp, rulesets/Thing.h:
	  Added base class for WorldRouter so that code that previously
	  used WorldRouter now used the interface defined by this
	  new class. This means that the code in rulesets no longer
	  has dependencies on code in server, so can be used in the client.

	* server/ExternalMind.cpp, server/ExternalMind.h,
	  rulesets/Character.h, rulesets/Creator.cpp,
	  server/Account.cpp:
	  Moved ExternalMind class into server as it is server specific,
	  so that there is no dependancy on server in rulesets.

	* server/Persistance.cpp. server/Persistance.h,
	  server/Admin.cpp, server/ServerRouting.cpp, server/server.cpp:
	  Moved high level server specific persistance class into
	  server, so there is no dependency on server in common.

	* common/database.cpp, common/database.h, server/Admin.cpp,
	  tools/cydbload.cpp, tools/cyisoload.cpp, tools/cypasswd.cpp:
	  Increases efficiency of some interfaces by passing Object::MapType
	  instead of MapType, when the value must be a map.

	* modules/WorldTime.cpp, modules/WorldTime.h,
	  rulesets/Py_WorldTime.cpp, rulesets/Python_API.cpp:
	  Brought the version of WorldTime in modules up to date, as this is
	  the version now used.

	* rulesets/Character.cpp, server/WorldRouter.cpp, rulesets/Thing.cpp,
	  server/Admin.cpp:
	  Made world objects dictionary private.

	* rulesets/EntityFactory.cpp, rulesets/EntityFactory.h:
	  Change newThing parameters so entity factory does not need to
	  know about WorldRouter.

	* server/Lobby.cpp: Added support for people and rooms attributes
	  of OOG room class.

2001-08-02  Al Riddoch  <alriddoch@zepler.org>

	* common/inheritance.cpp, common/inheritance.h: Added code to store
	  atlas object inheritance tree.

	* server/Connection.cpp: Added code to allow client to query
	  atlas object inheritance using get ops.

	* example/client/InheritanceClient.*: Added example client which
	  queries the inheritance tree of the server.

	* rulesets/MemMap.h, rulesets/Py_Map.cpp: Made hooks lists private,
	  and added methods to access them.

	* server/Account.cpp, server/Lobby.h: Added correct handling of OOG
	  look ops when looking at own characters, other accounts, or the
	  lobby.

	* server/ServerRouting.h: Added function to generate serial numbers
	  for operations.

	* server/WorldRouter.cpp: Assign genuine serial number to all
	  in game operations as they are pulled off the queue.

	* Cleaned up header file multiple inclusion checks for uniqueness,
	  and made sure of ISO compliant use of std::string.

2001-07-28  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.cpp: Fixed setting parents and objtype on world
	  entity.

2001-07-23  Al Riddoch  <alriddoch@zepler.org>

	* server/Account.cpp: Fixed setting name of characters startup coin
	  objects.

	* modules/Location.cpp: Added bounding median to attributes sent
	  using Atlas.

	* common/BaseEntity.cpp: Always set the id on an entity.

2001-07-16  Al Riddoch  <alriddoch@zepler.org>

	* server/server.cpp, server/ServerRouting.h, server/ServerRouting.cpp,
	  server/CommServer.h: Added support for server "name" which
	  defaults to the hostname of the server machine, but is
	  customisable in the config. This can be used in preference to
	  IP address when doing lookups with the metaserver.

	* server/Lobby.h, server/ServerRouting.h, server/Account.h,
	  server/Account.cpp, rulesets/Stackable.h, rulesets/Stackable.cpp,
	  rulesets/Python_API.cpp, rulesets/Py_Object.cpp, rulesets/Plant.cpp,
	  rulesets/Pedestrian.cpp, rulesets/Entity.h, rulesets/Entity.cpp,
	  rulesets/Character.h, rulesets/Character.cpp, common/BaseEntity.h,
	  common/BaseEntity.cpp: Modied asObect() and addToObject()
	  methods to make them more efficient.

	* modules/Location.h, modules/Location.cpp: Removed old obsolete
	  Message::Object based addToObject() method.

	* rulesets/Thing.cpp: Optimised apperance/disappearance code.

2001-07-12  Al Riddoch  <alriddoch@zepler.org>

	* server/server.cpp: Cleaned up loading of config files, so that
	  an invalid installation is reported more clearly, and more
	  usefully.

	* rulesets/acorn/world/objects/animals/Pig.py: Fixed creating ham in
	  the right place.

	* rulesets/Movement.cpp: Fixed leaving containers so that if the		  initial collision with parnet bounding box is missed, character
	  does not get stuck.

	* rulesets/EntityFactory.h: Cleanup code is now cleaner.

	* rulesets/EntityFactory.cpp: Removed unecessary varconf dependancy
	  in rulesets code.

	* rulesets/Character.cpp: Allow move ops from mind with no loc set.

	* physics/Vector3D.h: Included check for inTime so that if entering
	  time is in the future, this is detected.

	* modules/Location.cpp, modules/Location.h: Provided method
	  to add location to a map.

2001-07-04  Al Riddoch  <alriddoch@zepler.org>

	* client/define_world.py: Fixed and refined the market traders.
	  Sorted out random face direction.

	* tools/cypasswd.c: Re-wrote tool to use database class, and thus
	  ensure it is trying to access the right database.

	* common/database.cpp, common/database.h: Added function to remove
	  accounts from the account database.

2001-07-01  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Characters now sober up over time.

	* client/define_world.py: Add in market traders to run all the
	  stalls in the market.

	* common/persistance.cpp: Set default admin password to something
	  a bit more difficult to guess.

	* rulesets/basic/mind/goals/common/misc_goal.py:
	  Fixed run_shop() goal, so NPCs now open and close their market
	  stall.

	* agrilan*.xml: These really are the final versions for Acorn 0.4

2001-06-26  Al Riddoch  <alriddoch@zepler.org>

	* agrilan*.xml: Final versions for Acorn 0.4

2001-06-24  Al Riddoch  <alriddoch@zepler.org>

	* server/Lobby.h, server/Lobby.cpp, server/Account.cpp: Added code
	  for querying lobby, then disabled it as it seems to hang uclient.

	* rulesets/basic/mind/panlingua/interlinguish.py, 
	  rulesets/basic/mind/goals/common/misc_goal.py,
	  client/mind/panlingua/interlinguish.py: Added goal to
	  maintain opening and closing market stalls, and goal for having 
	  a meal.

	* rulesets/basic/mind/goals/common/move.py: Fixed assemble goal
	  meaning lych now works again.

	* rulesets/basic/mind/Memory.py: Adapted query for location of
	  entity so that it accepts lists of possible types.

	* rulesets/Character.cpp: Enabled creating items by NPCs.

	* client/define_world.py: Updated NPC behavoir.

2001-06-23  Al Riddoch  <alriddoch@zepler.org>

	* server/server.cpp: Fixed leak of codec and varconf configuration.

2001-06-22  Al Riddoch  <alriddoch@zepler.org>

	* server/server.cpp: Handle cleaning up after database load.

	* server/WorldRouter.cpp: Switch to using stringstream to
	  generate ids.

	* rulesets/Thing.cpp: Re-write SetupOperation so Sight
	  operation is not lost and leaked.

	* rulesets/Python_API.h, rulesets/Python_API.cpp,
	  rulesets/Py_WorldTime.cpp, rulesets/Py_World.cpp,
	  rulesets/Py_Thing.cpp, rulesets/Py_Operation.cpp,
	  rulesets/Py_Object.cpp: Sort out correct handling of
	  python references, and ensure C++ objects are 
	  deleted as required.

2001-06-19  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/acorn/world/objects/plants/seeds/Seed.py,
	  rulesets/acorn/world/objects/plants/seeds/Apple.py,
	  rulesets/acorn/world/objects/plants/Tree.py,
	  rulesets/acorn/world/objects/plants/AppleTree.py:
	  Adjusted the weight and therefor the nutritional value of
	  apples and acorns. Reduced the number dropped by trees to
	  improve game performance.

2001-06-18  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/acorn/world/objects/plants/Tree.py,
	  rulesets/acorn/world/objects/plants/Oak.py,
	  rulesets/acorn/world/objects/plants/AppleTree.py:
	  Modified tree code so mode is set to fruit if they are carrying
	  any fruit.

	 * Added xml entity maps for agrilan.

2001-06-17  Al Riddoch  <alriddoch@zepler.org>

	* tools/cydbload.cpp: Modified database loader so it can
	  load multiple maps and merge them into the database.

	* rulesets/acorn/world/objects/buildings/FarmHouse2.py: Fix typo
	  in the class name.

	* acorn.vconf, rulesets/acorn/world/objects/buildings/Stall.py:
	  Added proper support for market stalls.

2001-06-17  Al Riddoch  <alriddoch@zepler.org>

	* server/Account.cpp: Fixed bug in looking at characters code.

	* rulesets/acorn/world/objects/buildings/Inn2.py: Fix walk bounding
	  box.

	* acorn.vconf: Added normal square brown tent.

2001-06-17  Al Riddoch  <alriddoch@zepler.org>

	* server/Account.cpp, server/Account.h: Added ability to look
	  at characters to get details fter login before joining game.

2001-06-16  Al Riddoch  <alriddoch@zepler.org>

	* Manual tweaks of build files to build static binaries.

2001-06-16  Al Riddoch  <alriddoch@zepler.org>

	* Fixed up build files to install in a conformant way.

	* acorn.vconf: Added in new building classes which set up
	  wall objects for collision purposes. Building now seem to
	  work.

	* common/database.cpp, common/database.h, common/globals.cpp,
	  common/globals.h, rulesets/Python_API.cpp, server/server.cpp,
	  watchdog/control.c, watchdog/watchdog.c: Implemented
	  correct way of getting installation directories from
	  autoconf.

	* rulesets/Movement.h, rulesets/Movement.cpp, rulesets/Pedestrian.h,
	  rulesets/Pedestrian.cpp: Fixed collisions with the solid
	  wall of a structure.

	* rulesets/Thing.cpp: Modified setup operation so that a sight
	  of create operation is always generated even if setup is
	  overloaded.

	* Many fixes from Anders Petersson to get the build working under
	  debian.

2001-06-12  Al Riddoch  <alriddoch@zepler.org>

	* client/define_world.py: Removed heap of coins from startup.
	  No longer required as characters get given coins at startup.

	* rulesets/ThingFactory.h, rulesets/ThingFactory.cpp,
	  rulesets/EntityFactory.h, rulesets/EntityFactory.cpp:
	  Removed bulky manual factory system with a proper template based
	  factory system.

2001-06-11  Al Riddoch  <alriddoch@zepler.org>

	* client/define_world.py: Add bounding boxes to oak trees.

	* rulesets/Entity.cpp: Added support for setting bounding box.

	* rulesets/MemMap.cpp, rulesets/MemMap.h: Add looking at
	  contains attribute of entities to mind's map.

2001-06-09  Al Riddoch  <alriddoch@zepler.org>

	* tools/cycmd.cpp: Code cleanup and rationalisation. The
	  arguments now make more sense, the usage info is correct,
	  and works, and the code should be more portable.

	* server/server.cpp, rulesets/Pedestrian.cpp: Shifted output over
	  to debug only.

	* server/Account.cpp: Added in a hack which gives characters
	  some money on startup.

	* modules/DateTime.cpp: Hardcoded Acorn 1:3 time.

	* common/const.h: Increased sight range to be closer to the client
	  view size.

	* client/world/objects/Thing.py: Tweak so that server side money
	  creation does not crash client.

	* client/define_world.py: Move warriors to be spead around the
	  inn courtyard.

	* cyphesis.vconf: Enable metaserver by default, and automatic
	  loading of world state from db at startup.

2001-06-04  Al Riddoch  <alriddoch@zepler.org>

	* server/WorldRouter.h, server/WorldRouter.cpp, rulesets/Thing.cpp,
	  server/Account.cpp: Modified server to use Entity * instead
	  of Thing *.

	* Removed unnecessary includes from many files.

	* common/config.h, configure.in, common/persistance.cpp:
	  More config changes to try and get it working on Debian.

2001-06-04  Al Riddoch  <alriddoch@zepler.org>

	* tools/cydbload.cpp: Added parameter handling so any file can
	  be loaded into the database.

	* tools/cycmd.cpp: Cleaned up usage and help functions.

	* tools/cyisoload.cpp: Cleaned up usage(), and made sure build
	  completes okay if libraries are missing, and missing
	  functionality is reported to the user.

	* server/server.cpp: Added config options that specifies that
	  the contents of the db should loaded on server startup. Cleaned
	  up some debug code.

	* server/WorldTime.cpp, server/WorldRouter.cpp,
	  server/Connection.cpp, rulesets/Structure.h,
	  rulesets/Python_API.cpp, rulesets/Py_WorldTime.cpp,
	  rulesets/Movement.cpp, rulesets/Entity.cpp,
	  physics/Vector3D.h, common/persistance.cpp,
	  common/database.h, common/database.cpp: Removed output either
	  to debug mode, or removed altogether.

	* common/BaseEntity.h, common/BaseEntity.cpp: Removed redundant header
	  includes.

	* server/ServerRouting.cpp, common/persistance.h,
	  common/persistance.cpp: Modified admin account function names it
	  fit convention.

	* module/Location.h: Fixed collision detection so that entities
	  with velocity set to 0 still get checked.

	* rulesets/Entity.cpp, rulesets/Thing.cpp, rulesets/Character.cpp,
	  rulesets/BaseMind.cpp, rulesets/Creator.cpp,
	  rulesets/ExternalMind.cpp, rulesets/Food.cpp, rulesets/MemMap.cpp,
	  rulesets/Movement.cpp, rulesets/Pedestrian.cpp, rulesets/Plant.cpp,
	  rulesets/Py_Location.cpp, rulesets/Py_*.cpp, rulesets/World.cpp:
	  Removed unnecessary #includes.

2001-06-03  Al Riddoch  <alriddoch@zepler.org>

	* configure.in: Tiny fix to jmt's improved sigc detection.
	  Bumped version up to 0.0.13 for pre-release of Acorn 0.4.

2001-06-01  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Pedestrian.cpp: Fixed setting of walking direction when
	  a collision occurs.

	* server/WorldRouter.cpp, server/WorldRouter.h: Fixed uptime
	  measurement which was grossly out because it subtracted the
	  server initTime twice, and did not take account of the
	  in game start time offset.

2001-05-30  Al Riddoch  <alriddoch@zepler.org>

	* configure.in, common/config.h, common/database.h, tools/cypasswd.cpp:
	  Added config check that looks for DB3's db_cxx.h on default
	  include path if it cannot be found in db3/. This fixes building
	  on Debian.

	* server/server.cpp, server/WorldRouter.cpp, acorn.vconf,
	  globals.h, globals.cpp: Added inittime config option used to
	  influence the game time used at server startup.

	* server/WorldTime.cpp: Added in new time of day descriptions for
	  more flexible goals.

	* server/ServerRouting.cpp: Removed output used to debug memory
	  cleanup code.

	* rulesets/basic/mind/goals/common/misc_goal.py: Added time
	  parameters to trading goals.

	* rulesets/Thing.cpp: Fixed appearance/disappearance operations
	  which were not getting sent most of the time.

	* client/define_world.py: Added in more NPC and modified behavoir.
	  Everyone now goes to the inn for lunch and in the evening, and
	  market traders only work during the day.

2001-05-29  Al Riddoch  <alriddoch@zepler.org>

	* server/server.cpp, server/CommClient.h, server/Account.h,
	  server/Account.cpp, rulesets/Entity.h, rulesets/Entity.cpp,
	  rulesets/Character.h, rulesets/Character.cpp, rulesets/BaseMind.h,
	  rulesets/BaseMind.cpp, common/types.h, common/operations.h,
	  common/op_switch.h, common/BaseEntity.h, common/BaseEntity.cpp:
	  Added support for imaginary operations used in a similar way
	  to emoting.

	* server/WorldTime.h: Added update method so underlying DataTime
	  can be updated.

	* server/ServerRouting.h, server/Lobby.h, server/Lobby.cpp
	  server/ServerRouting.cpp, server/Connection.h,
	  server/Connection.cpp, server/Account.h, server/Account.cpp: Added
	  a lobby object which handles lobby chat. Essentially it stores
	  a list of accounts and allows operations to be sent or broadcast
	  to other accounts.

	* rulesets/Py_WorldTime.cpp: Added python is_now() method because
	  using comparison does not appear to work.

	* rulesets/BaseMind.cpp: Added updating of minds WorldTime each
	  time an operation is received.

	* modules/DateTime.h: Added operator << so DateTime can be sent
	  to cout.

	* common/types.h: Added types for storing accounts in Lobby.

2001-05-28  Al Riddoch  <alriddoch@zepler.org>

	* Renamed Operataion method names throughout so they no longer
	  all have the name Operation but are now called MoveOperation,
	  according to the type of operation they handle.

	* modules/DateTime.cpp, modules/DataTime.h: Filled in functionality,
	  allowing initialisation and updating from a time values in seconds.

	* modules/Location.h: Modified collision detection code so no
	  checking is done between two moving objects.

	* rulesets/BaseMind.h, rulesets/BaseMind.cpp, rulesets/Entity.h,
	  rulesets/Entity.cpp: Removed virtual getMap() method and replaced
	  with a fixed method in BaseMind only. Added time member veriable
	  to BaseMind so each mind keeps track of time by itself.

	* rulesets/Python_API.h, rulesets/Py_Mind.cpp, rulesets/Py_Mind.h:
	  Added specific python interface for mind objects, because if
	  increasing differences in the way this must be handled.

	* rulesets/Character.h, rulesets/Character.cpp: Added isAlive flag 
	  which is cleared if the character is dead. If this flag is cleared,
	  operations are no longer sent to the mind.

	* rulesets/Movement.h, rulesets/Movement.cpp, rulesets/Pedestrian.h,
	  rulesets/Pedestrian.cpp: Cleaned up the code, made members more
	  distinctive, and make interface more general.

	* rulesets/Py_Thing.cpp: Removed features used to support mind.

	* rulesets/Py_WorldTime.cpp: Added support for comparison of
	  time with strings, to establish whether it matches descriptions
	  of time.

	* rulesets/Python_API.cpp: Modified creating of scripts so mind
	  scripts use a slightly different interface from entity scripts,
	  to support the fact that a mind handles its own timekeeping,
	  has a memory map, and has no access to the world.

	* server/WorldTime.cpp, server/WorldTime.h: Brought WorldTime into
	  the build. Used to track details of the time. Added support for
	  checking time descriptions such as "midday", "summer" against
	  DateTime.

2001-05-24  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Entity.cpp: Added dynamic attributes to atlas entity
	  representation.

	* rulesets/Py_World.cpp: Added get_object() method so that python
	  scripts can actually interact with other objects.

	* rulesets/basic/mind/goals/common/misc_goal.py: Fixed hunt goal
	  so that the arrow is removed from inventory as it is fired.

	* client/define_world.py: Added archer, arrow and deer to test
	  shooting code.

	* server/server.cpp: Made CommClient more robust in the event
	  if immediate disconnection by initialising pointers to NULL;

2001-05-23  Al Riddoch  <alriddoch@zepler.org>

	The memory leak crackdown

	* rulesets/BaseMind.cpp, rulesets/MemMap.h, rulesets/MemMap.cpp:
	  Add code to flush a characters memory as its mind is
	  deleted.

	* rulsets/Character.cpp: Delete movement class associated with
	  character when character is deleted.

	* rulesets/EntityFactory.h, rulesets/EntityFactory.cpp: Delete
	  all the entity factories when the server shuts down.

	* rulesets/PythonScript.cpp: Decrease reference of and thereby
	  delete the python script at delete time.

	* server/ServerRouting.cpp: Delete all the objects in idDict,
	  which should include all in game objects, and all explicitly
	  out of game objects, like accounts.

	* server/WorldRouter.cpp: Delete all pending operations, gameWorld
	  object. Ensure that an object is deleted from ServerRouting's
	  idDict when it is deleted from the world.

	* server/CommServer.h, server/server.cpp: Added CommServer destructor
	  which deletes all client objects and the server object.

	* server/server.cpp: Delete the database persistant object and the
	  entity factory at shutdown.

2001-05-22  Al Riddoch  <alriddoch@zepler.org>

	* client/define_world.py: Added archers who can hunt deer.

	* rulesets/basic/mind/goals/common/misc_goal.py:
	  Added the hunting goal.

	* rulesets/basic/mind/goals/common/move.py: Modified hunt_for()
	  goal so it has variable attack proximity.

	* common/op_switch.h, common/operations.h, common/Generic.h,
	  rulesets/Character.cpp, rulesets/Entity.h, rulesets/Entity.cpp,
	  rulesets/Python_API.cpp: Added handling of operation types not
	  directly supported by C++ classes in the scripting engine. In
	  order for these to be used they must be created in a script, and
	  received in a script.

	* rulesets/Character.cpp: Avoid using RootOperation pointers unless
	  that is really what we mean.

	* rulesets/Character.cpp: Added code to delete operations from
	  internal mind when external mind is active.

	* rulesets/Entity.cpp: Handled leaking of null script objects,
	  and python script objects.

	* rulesets/Connection.cpp: Delete characters external mind when
	  connection goes down.

2001-05-22  Al Riddoch  <alriddoch@zepler.org>

	* client/define_world.py: Started coding new NPC's for Acorn 0.4

	* rulesets/basic/mind/goals/common/misc_goal.py: Fixed bug in
	  announcing trade left over from old mode code.

2001-05-21  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Character.cpp: Added sending of appearance and
	  disappearance operations to mind and client.

	* rulesets/BaseMind.cpp, rulesets/MemMap.cpp: Removed redundant debug
	  output.

2001-05-20  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/BaseMind.h/cpp: Added isAwake flag to indicate whether the
	  mind is active or not. Defaults to true.

	* rulesets/Py_Object.cpp: Reverted to storing complex attributes
	  in a python dict.

	* rulesets/Python_API.cpp: Get complex attributes from operation
	  arguments.

	* rulesets/Thing.cpp: Added in broadcast of sight(create) operation
	  to setup when object is created. See Thing::Opertion(Create) for
	  details.

	* rulesets/basic/mind/goals/common/misc_goal.py: Cleaned up comments.

2001-05-18  Al Riddoch  <alriddoch@zepler.org>

	* Added ruleset entries for characters to match all the recently
	  added animations.

	* server/Player.cpp: Added checks which allow player to be any of
	  the currently available characters.

2001-05-14  Al Riddoch  <alriddoch@zepler.org>

	* configure.in: Added termcap to sort out dependency on termcap
	  by readline on some systems.

	* physics/Vector3D.cpp: Added definition of static consts members.
	  I really don't understand why these are required, and as far
	  as I can tell this does not conform to the C++ spec.
	
	* server/Makefile.am, aiclient/Makefile.am: Re-ordered linking so
	  that physics is picked up.
	
2001-05-14  Al Riddoch  <alriddoch@zepler.org>

	* server/server.cpp: Added several options to the config file to
	  make server operation customisable. Added comments.

	* server/server.cpp, server/CommServer.h: Changed methods which
	  return int to returning bool if they are success/faul results.

	* server/WorldRouter.cpp: Removed some unused debugging code.
	  Optimised heavily used code. Changed error message on
	  sending to a non-existant entity so that it is no longer
	  reported as a critical error.

	* server/ServerRouting.h, server/Connection.h,
	  server/Connection_methods.h: inlined simple methods.

	* server/Connection.cpp: Optimised frequently used code.

	* server/CommClient.h: Simplified read method so it no
	  longer checks status redundantly.

	* common/BaseEntity.h, rulesets/Thing.h, rulesets/Entity.h: Added
	  comments explaing purpose of classes.

	* rulesets/Thing.cpp: Added detailed comments, and removed unnecessary
	  initialisation of some attributes.

	* rulesets/PythonMindScript.cpp: Removed redundant NULL check.

	* rulesets/MemMap.h: Added inlines for inlined methods.

	* rulesets/Entity.h, common/BaseEntity.h: Moved seq from BaseEntity
	  to Entity as it does not apply to Out Of Game objects.

	* rulesets/Entity.cpp: Added in stamp/seq attribute. Nade name
	  attribute optional.

	* rulesets/Character.cpp: Simplified some op handling code
	  to make it more readable and hopefully faster. Added comments
	  explaining movement, removed unused commented out code, and
	  removed some unnecessary debugging code.

	* common/operations.h: Explanatory comments.

	* common/*.h: Re-wrote extended operations to fit in
	  with Atlas-C++ 0.4.2 conventions.

	* common/log.*: Commented out unused logging code.

2001-05-06  Al Riddoch  <alriddoch@zepler.org>

	* server/Admin.cpp: Modified database loading code so it picks up
	  the object parent correctly instead of looking for a type attribute.

	* server/server.cpp: Made metaserver address a config file option.

	* common/database.h: Put in compiler error if code is built without
	  database support.

	* common/BaseEntity.cpp: Switched over to using stamp instead of seq
	  as the attribute used to check whether entity needs to be
	  updated.

	* Used action operation throughout python code to denote performing
	  an action, as differentiated from setting mode.

	* rulesets/skills: Added the beginnings of a skill system.

	* example/client: Fixed Atlas-C++ 0.5 example client so it
	  compiles again.

	* README: Wrote a README file

2001-05-04  Al Riddoch  <alriddoch@zepler.org>

	* Added handling of action operations to operation handling core.

2001-05-03  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Object.cpp: Added support for complex attributes
	  for Entities used as argument for operations.

2001-04-20  Al Riddoch  <alriddoch@zepler.org>

	* configure.in: Added a bit of support for later version of the Python
	  interpretter to configure script.

2001-04-20  Al Riddoch  <alriddoch@zepler.org>

	* common/database.*, common/persistance.*: Added new database tables
	  for mind data, and server data.

	* common/persistance.*, server/Admin.cpp: Implemented saving and
	  loading of mind state to mind table. Initially only saving the
	  contents of the memory map is supported.

	* rulesets/MemMap.h: Added asObject() method to convert contents
	  into Atlas representation.

	* rulesets/BaseMind.*: Added handling of load and save operations
	  which in conjunction with the Python mind component build an
	  Atlas representation of the mind state.

2001-04-19  Al Riddoch  <alriddoch@zepler.org>

	* common/persistance.cpp, server/Admin.cpp: Modified database loading
	  of world entities so that it is done hierarchically starting
	  with the top level container.

	* rulesets/Entity.cpp, rulesets/Character.cpp: Added some needed
	  attributes to those added to Atlas Objects when converting in
	  game entities.

2001-04-17  Al Riddoch  <alriddoch@zepler.org>

	* Changed many return statements to match convention.

	* rulesets/Thing.cpp: Tweaked ranges code in movement to cut
	  down CPU time used.

	* common/BaseEntity.cpp: Re-ordered opEnumerate so that most
	  frequently used ops are detected soonest.

	* modules/WorldTime.h/.cpp: Moved WorldTime to modules directory.

2001-04-16  Al Riddoch  <alriddoch@zepler.org>

	* Substantial re-work of object model. Moved many attributes out
	  of BaseEntity class. Changed WoldRouter so it now handles
	  objects in terms of Entity, rather than BaseEntity.

	* Code cleanups, including removing reduntant includes, and
	  getting rid of C style comments.

	* Fixed the way attributes are handled in Set operations and
	  when merging from an Atlas::Message::Object. This fixed
	  problem with setting gender of characters.

	* rulesets/Pedestrian.*, rulesets/Movement.*: Re-named
	  Movement variables to make them clearer. Added in
	  separate handling for collisions from moving to
	  target position. Modified collision handling so
	  objects can slide next to each other.

	* rulesets/Thing.cpp, rulesets/Character.cpp: Cleaned up and
	  rationalised movement code. Much shorter, faster and
	  more compact than before.

	* Made better use of iterators throughout, eliminating unnecessary
	  lookups, and copying of data.

	* Moved all virtual functions out of header files, making
	  less work for the linker.

	* Made more use of const references to avoid the need to copy
	  data before being able to inspect it.

2001-04-12  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.*: Changed addToObject to take reference
	  instead of pointer.

	* physics/Vector3D.h: Re-ordered functions to allow correct inlining.
	  Changed member names to correct convention.

	* rulesets/MemMap.cpp,rulesets/MemMap_methods.h: Re-ordered function
	  to allow inlining, and moved non-inlinable functions into .cpp file.

	* Changed new operation initialisation to be done at construction
	  time instead of imediatly after construction for performance
	  reasons.

	* server/WorldTime.*: Modified member names for convention, and
	  moved non-inlineable function to .cpp file.

2001-04-11  Al Riddoch  <alriddoch@zepler.org>

	* common/WorldInfo.*: Removed WorldInfo class, a hangup from
	  the python Atlas implementation.

2001-04-11  Al Riddoch  <alriddoch@zepler.org>

	* Re-wrote class headers files so that all class members now
	  begin with a lower case letter and do not contain _.

	* Fixed retrieval of Account from database so that the Account
	  is now correctly referenced in the server object.

	* common/types.h: Changed type name to make them clearer.

	* rulesets/Character.h: Moved MovementInfo into its own class
	  file, and made it a base class, with a Pedestrian super class.
	  This allows different types of movement handling classes
	  to be used to handle things that move differently.

2001-04-10  Al Riddoch  <alriddoch@zepler.org>

	* Complete re-write of python script interface to allow other
	  script types to be cleanly dropped in.

	* Re-work on server and communication related classes to use
	  references where they are apropriate. Code is now much more
	  robust.

	* Huge cleanup of header files removing redundant includes.

	* server/WorldRouter.h: Removed is_object_deleted because it
	  is broken and not used.

	* server/Connection.h: Removed unused disconnect() methods.

	* rulesets/Entity.*: Added new in game base class from which
	  all mind and object classes are derived. This removes
	  clutter of Thing class from mind classes.

	* aiclient/*: Progress with creating AI client for mind handling.

	* common/globals.*: Moved some globals out of server specific files.

	* rulesets/Makefile.am: Separated rulesets code into 3 almost stand
	  alone packages; entities, mind and python interface code.

2001-04-05  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.h: Moved many of the extra parts of this file
	  into individual files for each bit.

	* aiclient/*: Added client mode cyphesis for handling AI in another
	  server. Not yet operational.

	* */*: Moved large and virtual functions out of headers to reduce
	  multiple instance problems, keep the binary size down, and speed
	  up compilation.

	* server/Admin.h/cpp: Added Get operation handling, thus dividing
	  admin commands into two classes, one which does not alter
	  the state of the server, the other which does. Added query
	  command which allows admin client to retrive arbitrary objects
	  from server id dictionary.

2001-04-02  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/acorn/world/objects/animals/Deer.py, acorn.vconf: Added
	  deer, with same basic code as pig.

	* server/server.cpp: Pass on objects which are not know by the
	  Atlas::Objects::Decoder straight to the operation handler.

	* server/Admin.*: Re-structured the way commands are handled from
	  admin client, so that apropriate operations are used instead of
	  always using Set.

	* server/Admin.cpp: Added saving world state to the database.

	* tools/cycmd.cpp: Updated to use the new admin command semantics.
	  Added save command.

	* common/persistance.*: Added interface for saving world status.

	* common/database.*: Added interface for deleting contents of database.

2001-03-30  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* tools/cycmd.cpp: Added support for interactive mode.

	* server/Admin.cpp: Fixed returning of info op from database load
	  message, and counting of objects loaded from database.

	* configure.in: Added readline check for cycmd.

2001-03-29  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* tools/cyisoload.cpp: Complete functionality for loadin iso map
	  into world database.

	* example/client/CyphesisClient.cpp: Fixed ListType usage in example
	  client.

2001-03-28  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* tools/cyisoload.cpp: Added tool which loads an iso format map into
	  the server database.

	* configure.in: Added check for coal (0.2) which is used in map
	  loader tool.

	* common/database.cc: Modified database initialisation functions
	  so that whether or not the database should be created can be
	  specified. Added separate function for decoding a database
	  object into an Atlas::Message::Object. Fix to the way objects
	  are added to the database which solves some corruption problems.

	* common/database.*: Added database iterator class that can be
	  used to iterate over the database.

	* server/Admin.cpp: Added handler for admin load command, which
	  loads world state from database.

	* server/WorldRouter.*: Tweak to allow objects added to world
	  to have pre-defined id.

2001-03-26  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* common/persistance.*: Re-designed persistance code is it uses
	  a database subclass rather than implementing the databse code
	  itself.

	* common/database.*: Added generic class for accessing database,
	  which can be used from any program.

	* tools/cydbload.cpp: Added simple tool to load objects into the
	  world database from a flat map file.

	* basic.vconf: Shifted houses over to using the structure base class.

2001-03-21  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* physics/Vector3D.h: Changed boundary condition of inBox() from
	  when part of entity leaves box to when the whole entity leaves the
	  box.

	* basic.vconf: Make tent use the structure base class.

	* client/define_world.py: Add bounding box to tent.

	* tools/cycmd.cpp: Added password entry.

	* server/Admin.cpp: Added "stat" admin command, to get server
	  details.

	* server/CommClient.h: Fixed include dependencies.

	* common/persistance.cpp: Added findAccount() method for systems
	  without db3.

	* rulesets/Thing.cpp: Added sending Apperance and Disappearance
	  operations to static entities when another entity moves out
	  of sight.

	* rulesets/Character.cpp: Added check to make sure an entity does
	  not collide with itself.

	* rulesets/Thing.cpp: Added check to make sure entity does not move
	  inside itself.

	* rulesets/Py_Location.cpp: Modified python location.copy() method
	  so that only the position and velocity is copied. This should 
	  bounding boxes getting set on things which should not have them.

	* rulesets/Character.cpp: Added return statement to movement
	  handling, so move ops without arguments are not handled.

2001-03-20  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* physics/Vector3D.h: Detect leaving time of bounding box, even if
	  entity is not yet in it.

	* modules/Location.h, modules/Location.cpp: Added get_xyz() to
	  find absolute coordinates.

	* modules/Location.h: Added true location based range checking.

	* servers/WorldRouter.cpp: Implemented new location based range
	  checking so that operations that take place inside buildings are
	  range checked properly.

	* servers/WorldRouter.cpp: Re-wrote id generation code to be a bit
	  more robust.

2001-03-19  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* physics/Vector3D.h: Corrected variable name convention error in
	  inTime() function.

	* rulesets/Character.cpp: Detect what if entity has already left
	  refs bounding box.

	* basic.vconf: Made sty use the Structure base class.

2001-03-19  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* modules/Location.h, physics/Vector3D.h: Added collision checking
	  functions to work out when an entity inside a box will hit the
	  outside.

	* rulesets/Character.cpp: Added check in collision code to see when
	  entity will leave the bouding box of its current parent.

2001-03-18  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Modified database code so that entries have the correct begin
	  and end encodings, which is <atlas>..</atlas> in the case of
	  XML-like codec.

	* modules/Location.h: Added a flag which indicates whether the
	  bounding box of an entity is solid. If it is not solid, then
	  the entities contents much be checked for collisions rather
	  than the entity itself.

	* rulesets/Character.h: Added target_ref attribute to MovementInfo
	  as a means to track character movement between entities.

	* rulsets/Character.cpp: Modified collision code to handle
	  detecting of collisions with non-solid objects, and handling
	  movement when characters moves into a non-solid object but
	  does not collide with it.

	* rulesets/Structure.h, StructFactory.*: Added base class for 
	  buildings and other structure, which are not solid, and the
	  character can move in and out of freely.

	* server/server.cpp: Made metaserver functionality optional, and
	  added a config option to the config file.

2001-03-16  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* tools/cycmd.cpp: Added functionality to allow commands to be
	  sent to the admin account on the server.

	* server/WorldRouter.cpp: Removed mechanism for shutting down server
	  after a fixed run period.

	* server/Admin.*: Added reception of Set operation by admin account
`	  which contain commands from an admin client. Implemented shutdown
	  command, which sets a flag indicating server shutdown should start.

	* server/server.cpp: Added output indicating that shutdown is taking
	  place, to make it clear that it is not a crash.

2001-03-16  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* watchdog/*.c: Corrected C++ style comments in c code.

	* */*: Fixed mistake in copyright statement.

	* tools/cypasswd.cpp: Fixed usage message.

	* tools/cycmd.cpp: Added tools for sending administrative commands
	  to server.

	* server/server.cpp: Send terminate instruction to metaserver on
	  server shutdown.

2001-03-15  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* server/server.cpp: Increased time between pings to metaserver
	  to 5 minutes instead of 5 seconds.

	* common/persistance.*: Implemented de-serialisation of database
	  objects, and added the necessary code for pulling accounts out
	  of the database.

	* common/sstream.*: Added an implementation of stringstream which
	  is the preferred ANSI form of strstream, but is missing from
	  the GNU std C++ library.

	* configure.in: Added check for system sstream.h, which falls
	  back to using version included.

	* server/Connection.cpp: Check for account in database when
	  user tries to create new account.

	* tools/cypasswd.cpp: Use stringstream instead of strstream.

2001-03-15  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* common/persistance.*: Added restricted mode set by config file,
	  which prevents users from being able to create accounts.

	* server/ServerRouting.cpp: Added restricted flag to the
	  server Object passed to client as result of a Get operation, so
	  the client can report it to the user.

	* tools/cypasswd.cpp: Added tool to administrate password database
	  table.

	* server/server.*: Added exit flag to ensure that of exit is requested
	  database is shutdown properlly.

	* server/WorldRouter.cpp: Maintenance shutdown is now done cleanly.

	* server/Connection.cpp: Added code to handle accounts using the
	  persistance system. Accounts would now be handled by the
	  database if the persistance code was complete.

	* common/persistance.*: More work on database code.

2001-03-14  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* common/persistance.*: More progress on database persistance code.

2001-03-14  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* *: Removed use of "using namespace ..." throughout.

	* modules/Location.h: Fixed error in inRange() and finally got rid
	  of the Compiler warning.

	* rulesets/Food.cpp: Fleshed out the cooking code, including how
	  food burns when it is overcooked.

	* rulesets/Stackable.cpp: Implemented divide.

	* common/persistance.*: Added the beginnings of a database backend
	  using the Berkeley db library.

	* server/Account.cpp: Modified addObject, because the attrivutes
	  added by BaseEntity::addObject are not important to accounts.

2001-03-09  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* rulesets/EntityFactory.cpp: Removed ThingShape.h
	  which was unused, and thus removed dependancy on SOLID.

2001-03-09  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* rulesets/Stackable.cpp: Fixed Stackable code so it now compiles.

2001-03-05  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added Fire operation handling to Thing class, so that any entity
	  with a burn_speed attribute will burn.

	* Added Food C++ base class, which implements cooking.

	* Altered the semantics of the Eat/Fire/Nourish operations so
	  multiple arguments are no longer required. from is used to
	  determine the other entity involved.

	* Added the beginnings of an astronomy system, but not yet used
	  anywhere.

	* Added appearance handling to BaseMind and Memory.

	* Added sequence no to all entities, which is incremented each time
	  a move or set operation is received. sequence no "seq" is included
	  in args of Appearance operations.

	* Moved functionality from Animal python base class into Character
	  C++ base class. This much improves the performance of modelling
	  animals, and means that player characters, and NPCs get hungry and
	  need to eat. Reduced the speed at which animals consume energy
	  so they don't starve quite as quickly.

	* Added collision prediction functions that handle both entities
	  having velocity.

	* Added combine functionality to Stackable. Divide comes next.

2001-03-01  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* rulesets/Py_Location.cpp: Added bbox and bmedian attributes of
	  location object to python wrappers.

	* rulesets/Character.cpp: Added initialisation of bounding box
	  median for characters.

	* modules/DateTime.*: Added configurability to date so that
	  each period of time has definable number of divisions. Default
	  is as per real world calendar restricted to 30 day months.

2001-02-27  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* server/CommServer.h, server/server.cpp: Added metaserver code
	  to network classes.

	* server/CommServer.h, server/WorldRouter.h, server/ServerRouting.cpp:
	  Added fields to server entity for number of players and uptime
	  in seconds.

	* Started implementation of WorldTime class for processing of calendric
	  time.

2001-02-26  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Re-wrote the way creating various types of in-game objects is
	  handled to allow for easier adding of more classes.

2001-02-25  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Changed oplist to use std::vector. Recoded and re-optimised use
	  of oplist to take advantage of vector's best performance.

	* Modified OP_SWITCH macros to improve speed, and made it inlinable.

	* Cleaned up python interface code to improve compile and link time.

	* Moved custom operation definitions in one header file per class
	  to improve modularity and compile time.

	* Modified boundingbox handling so it now uses size and median.

	* Added collision check and inbox member function to Vector3D class.

	* Added collision prediction and checking to Location and Vector3D
	  classes.

	* Added collision prediction into MovementInfo class.

	* Modified Thing::operator[] so that static attributes can be handled
	  and added Thing::set() which must be used to modify attributes.

	* Added collision resolution so characters can no longer walk through
	  each other.

	* Moved weight attribute to being static attribute of Thing, so it
	  can be much more easily handled in movement code.

2001-02-19  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added handling of Get operation from client before login, to
	  determine game type, status and other info.

2001-02-18  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Commiting tweak to guards patrol route which was included in
	  Acorn 0.3.

2001-02-17  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Implemented beginnings of ranges code:

	* modules/Location.h: Added inRange() method which can be used
	  to check whether location, including bounding box, is within
	  given range of a given location. Changed parent member
	  variable to ref to fit with Atlas spec. Changed all code
	  related to using the term ref instead of parent so
	  that there is no confusion between ref for coordinates
	  and parent in the Atlas hierarchy.

	* rulesets/Thing.cpp: Added code to move operation to check
	  what entities come into and out of range when entity moves.
	  Appearance and Disappearance operations are sent to the
	  moving entity with a list of the relevant entities as their
	  argument.

	* server/WorldRouter.h/cpp: Added overloaded Look operation
	  handler which applies range constraints to the contains
	  attribute before returning.

	* common/BaseEntity.h, rulesets/Thing.h, rulesets/Character.h:
	  Added handling of Appearance and Disappearance operations.

	* server/WorldRouter.cpp: Added primitive check to broadcast
	  operations to avoid delivering broadcast operation to
	  entities out of range.

	* Removed world.get_object() use from server python code, as
	  its use is not required.

	* server/WorldRouter.h: Implemented fetching of floating point time
	  from the OS so movement is much smoother.

2001-02-07  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* watchdog/*: Watchdog and control program now work just fine,
	  though it is not always easy to tell whether the acorn script
	  is working or not.

2001-02-05  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* watchdog/*: Fleshed out watchdog functionality, which is now working
	  and in long term testing. Added control script which handles sending
	  signals to the daemon in a more friendly way.

2001-02-05  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added watchdog daemon which handles maintaining a running server
	  automatically. Work in progress.

2001-02-03  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* all files: Re-worked the way debugging is handled to that it no
	  longer gives warnings.

2001-01-26  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* all file: Added copyright statement

2001-01-25  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* rulesets/Character.cpp: Removed debuggin output.

	* client/define_world.py: Modified entity positions for use with new
	  agrilan.map

2001-01-24  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* server/Makefile.am: Added libstdc++ to static libraries list.

2001-01-24  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added THANKS file.

	* Added rules to top level Makefile to install some docs.

2001-01-24  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Throughout entire code base:
	  Removed all obsolete code and commented out code relating to porting
	  from python. Removed interim data types bad_type and None. Added
	  const throughout where apropriate. Change various flags to bool
	  type. Removed unused members.

	* Added TODO list.

2001-01-23  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* rulesets/Thing.cpp: Removed default description.

2001-01-23  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* configure.in: Re-ordered lib checks so that python gets libdl
	  and pthread.

2001-01-23  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* rulesets/Character.cpp: Set character mode to "touching" when a
	  touch operation is created by the mind.

2001-01-23  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Modified build system so a static binary can be built.

	* server/WorldRouter.cpp: Modified some behavoir on critical errors.
	  Server no longer aborts on criticial errors.

2001-01-20  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* server/Character.cpp: Modified mind2body so that to is not set on
	  look operations from mind.

2001-01-20  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* server/server.cpp: Modified argument processing so that installation
	  directory can be set as a command line argument, and then stored
	  persistantly in users config file.

2001-01-18  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Change default acorn script to be text, and made the alternative
	  acorn graphic.

	* Fixed addition of client scripts to distribution.

2001-01-14  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added client python code to RPM spec.

2001-01-13  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Copied client code across from cyphesis, and created infrastructure
	  so it can be cleanly installed and run with the rest of cyphesis.

2001-01-06  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added code so that error operations are reported on standard error.

	* Added re-connection of client connection object to character when
	  a player logs in and wants to use the same character again.

2001-01-04  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed pig behavoir bug so location coordinates are now not added
	  to object if they have not been set.

	* Added code to example client so it now reads characters list 
	  when it logs in.

	* Removed support for obsolete old-atlas locations.

	* Changed behavoir on unexpected error from client socket, so
	  it no longer causes an abort.

2001-01-02  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed pig mind so it is now better able to detect "Sowee"

	* Removed map from Thing, and put it into basmind. Re-wrote
	  script_Operation for thing so it now looks things up in world
	  dictionary rather than in local map. This removes a memory leak.

2000-12-27  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed inheritance bug in BaseMind::operation()

	* Tweaked the way Look operations are handled when sent from mind, so
	  an argument is not required if to is set.

	* Made some performance enhancements.

2000-12-26  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Implemented nourish operation.

2000-12-25  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Modifed move_me() goal so it sets face direction.

	* Fixed memory leak in MemMap.

	* Implemented fully deleting of entities.

2000-12-23  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Cleaned up and tweaked python scripts so eating acorns now works.

	* Implemented hooks in MemMap for python scripts.

2000-12-17  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Cleaned up auto-* stuff, and created spec file for RPMs.

2000-12-16  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed error in Thing::operator[] which meant attributes could not
	  be accessed, and certain move operations caused an abort.

	* Removed attributes from python object which don't have attributes.

	* Added Py*_Check() macros, and used them for easier code reading.

	* Added snow attribute to weather.

	* Commented out code which makes server exit(0) after a certain time.

2000-12-16  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Removed unecessary type checks

2000-12-16  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Modifed initialisation of Vector3D from python to be less error
	  prone, and more complete.

2000-12-16  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Another bit of code to prevent code from aborting if weight is
	  not a float.

2000-12-15  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added in exception handler to catch if weight is not a float.

	* Tweaked SkeletonMind so it now works.

2000-12-14  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Modifed python interface Operation() function so that it accepts
	  strings for to and from as well as entities.

	* Adapt python Operation() function so operations can be given as
	  arguments.

	* Add Eat, Chop, Cut and Fire operations into the main operation
	  handling functions.

	* Added code so that intelligent entities can use python mind classes
	  other than NPCMind, and added config section for specifying which.

	* Tweaked python mind code for Pig, Wolf and Skeleton so they work.

2000-12-13  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Set up rulesets processing so that everything is handled dynamically
	  from config files. Global ruleset should indicate top level ruleset
	  which can depend on a list of other rulesets.

	* Sorted out installation directories. Cyphesis will now need to be
	  installed before it can be run.

	* Cleaned up a load more python scripts for more Acorn stuff.

	* Added getting x y and z from Vector3D.

	* Made acorn the default ruleset.
	
2000-12-12  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Started work on auto* files to make cyphesis install correctly.

2000-12-12  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Massive code cleaning efforts, removing dead code, trimming reviewing
	  and shifting code around to optimise it.

	* Heavy use of inlining to improve code performance.

	* Added global exception handler to catch exceptions while processing
	  operations.

2000-12-11  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Removed lots of extraneous debugging output, and turned the rest
	  off using debug flags.

	* Added halt_time, which is number of seconds server should run before
	  it exits.

	* Cleaned a bunch if the remaining memory leaks.

	* Cleaned up the way time is handled.

	* More tweaks to Python code and API to get Acorn working.

	* Inlined some methods into the class definitions, for performance.

	* Updated movement code to sort out setting mode properlly, and
	  deal with stuttering NPC movement.

2000-12-08  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Major attack on the more fiddly memory leaks. The only noticable
	  leak now is copied Location objects in the python interface code.

	* Added hook into the time code so the server can be set to exit
	  after a given number of seconds. This is required for LeakTracer
	  to generate its report.

2000-12-07  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed so that we are no longer sending broadcast look ops, which
	  clag the server up and are not correct behavoir.

	* Minor fixes/python tweaks.

	* Slight change to ordering of ops in the queue, so more recently
	  created ops with the same time stamp come of the queue after
	  older ops.

	* Implemented contains attribute so newly created objects are added
	  to their parents contains list, and when objects are move, they are
	  transfered from old parents to new parents contains list.

2000-12-07  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added handling for removing connections.

	* Removed some unused code.

	* Tweaked some python scripts so they import correctly.

	* Added in_game flag to BaseEntity so it is possible to tell
	  if an object is in game.

	* Increased the number of operations handled by Message()

	* Added handling for initialisation of location.parent using me
	  in mind code.

	* Added is_object_delete() functionality to python interface to world
	  object.

	* Added handling for converting Tuple into Message::Object, and then
	  ensured that non-basic python types don't get stored as attributes
	  of a Message::Object.

2000-12-06  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixes to worlds object list so it now contains world.

	* More python code tweaks to work with modifications to interface.

	* Modified code which gets Thing attributes from Message::Object
	  so it can use any object dictionary to look up parent object.

	* Fixed handling of Thing's static type attribute.

	* Modified creation of operations from python to eliminate
	  some strange segfaults.

	* Re-wrote and fixed Entity creation from python.

	* Implemented dictlist.remove_value for removing things from inventory.

	* Implemented Vector3D arithmetic and methods from python.

	* Implemented as_entity() and get_xyz() methods for Thing from
	  python.

	* Commented out deletion of operations from python OperationObject
	  dealloc() function as it was causing segfaults. There is a problem
	  somewhere with ownership not being cleared, but I can't find it.

	* Implemented conversion of Python Operation and Oplist objects
	  to Message::Object.

	* Fixed MemMap so that attributes of Things are accuratly updated.

	* Fixed it so that look ops from mind are broadcast rather than sent
	  to world. This may have to be reverted.

	* Tweaked autoconf to make it cleaner and work better. Still needs
	  alot of work.

2000-12-05  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added new common namespace to prevent collision with math function
	  log.

	* Added in lots of deletes to sort memory leaks.

	* More python tweaks.

	* Implemented status attributes of thing.

	* Re-wrote some code which needlessly creates objects in the
	  free store.

2000-12-04  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Started working on sorting out memory leaks.

	* Implemented python function to deal with not being able to check
	  type of python objects implemented in C.

	* Added method to thing for extracting location data from a
	  Message::Object

	* More work on python references to improve leakage.

	* Added flag so that python Operation object can own
	  the operation they point to, and thus delete it in dealloc().

	* Implemented find_by_location() and find_by_type() as required in
	  MemMap, and corresponding python interface.

	* Put in temporary work around to deal with the fact that a mind
	  does not know its name. Currently the mind is not able to
	  discover any of its bodies attributes, and I am not sure how
	  to solve this.

	* Fixed Location and Vector3D so they use operator bool() to detect
	  whether they are set.

	* Fixed bugs in getting parent from Location in python which caused
	  segfaults.

	* Imported all the basic ruleset entity python scripts.

2000-12-03  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Corrected broadcasting of non-perception operations to
	  non-perceptive entities.

	* Sorted out removing spaces from id strings.

	* Implemented Entity arguments to Operaiton creation in python.

2000-12-03  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Debugged set_kw() and confirmed that it does work.

	* Added python API support for self.world.

2000-12-03  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added support for varconf config files.

	* Used config file to list enitity types and their python class files.

	* Cleaned up reference counting in Python API related C++ code.
	  References should all now be handled correctly.

	* Added support for adding None to Operation and Oplist.

2000-11-30  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added dictfunc functionality to Python interface.

	* Added creation of Entities for use in Operation arguments.

	* Added initialisation of Vector3D through constructor
	  arguments in python.

	* Added append() method to python interface for Oplist.

	* Added support for coercion of operation into addable form.

2000-11-30  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added more required functionality to base python Thing class
	  so that operation manipulations can now work.

	* Implemented getting of object name to python/C API, and added
	  methods for differentiating between op and object.

	* Implemented on-the-fly de-coding of operations, from operation
	  arguuments in python/C API. This will be obsolete once Atlas-C++
	  does full decode later.

	* Implemented get and setattr for Message Object from
	  python. Attributes are stored both in Object, and in supplementary
	  python dictionary for non Atlas compatable attributes.

	* Implemented copy() method for Python/C Location class.

2000-11-29  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added in debug function for python code.

	* Fixed coersion of non-oplist types for addition.

	* Implemented getting attributes from Message::Object maps
	  from python.

2000-11-29  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added support for decoding Sound operations in BaseMind.

	* Added Talk operation throughout operation handling code.

	* Added basic WorldTime class together with python wrapper.
	  Can fill in functionality as required.

	* Put debugging back in cos I still need it.

2000-11-26  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added in Python interface code to deal with manipulation of operation
	  time.

	* Made basic_tick a float, because it should be.

	* Imported all the rulesets python code from python cyphesis.

2000-11-26  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed and changes to code so that operations created in python
	  mind code are delivered as required.

2000-11-24  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Disabled some of the excessive debugging.

	* Implemented getting and setting of to and from in operations
	  using map to lookup what the mind knows about the entities
	  in question. This involved adding an extra field to the
	  RootOperationObject structure to store to and from entities.

	* Sorted out base_init() python member so __init__() of all
	  classes in inheritance tree are called.

	* Started work on set_kw() replacement.

	* Added python module finding mechanism which is required to deal
	  with rulesets correctly. I am not convinced this works.

2000-11-23  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added oplist python interface, and implemented returning of
	  operations from python code.

2000-11-22  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Moved character mode calculation into MovementInfo class.

	* Added new MovementInfo method which creates a movement op to
	  change the rotation of a character when no other update is needed.

2000-11-22  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Filled out Location python interface so it is now fully functional.

	* Inlined Vector3D class for performance.

2000-11-21  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Bug fix that meant that updates to MemMap object caused segfault.

2000-11-21  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Filled out the python common.const module with all its values.

	* Added code required to create an operation from with python.

	* Modified the Thing python interface so that python objects
	  that Atlas doesn't want to know about are stored in a normal
	  attributes list.

2000-11-20  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added some more python interface classes. There is now enough code
	  here to start importing real mind code from cyphesis-py.

2000-11-19  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Two small bug fixes. One stops a crash when the client tries
	  to move an object which does not exist, the other removes an
	  unnecessary pointer check which stopped the admin client from
	  working.

2000-11-19  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Filled in BaseMind functionality so it now keeps memory map up		  to date. Added necessary features to Python/C++ interface
	  for sight operations to be passed onto python code after processing
	  in C++. Added new type of op switch to deal with operations
	  in the argument of a sight/sound operation.

	* Added features to Opeation python interface for args to be
	  accessed as if operation is a sequence object.

	* Implemented python API for C++ memory map class.

	* Added utility function which uses code borrowed from Atlas-C++
	  to convert a Message::Object into something from the Objects
	  code.

2000-11-18  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Moved some of BaseMind functionality in a python class and
	  added the necessary interface code.

	* Initial port of MemMap class from python to C++, together with
	  python interface. Hopefully maintenance of MemMap can be kept
	  in C++ for speed if possible.

2000-11-16  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Sorted out error handling from python code, and no-longer treat
	  no method as an error.

	* Got python interface code to the point that python classes can now
	  access the C++ attributes of a Thing.

	* Split the python interface code into separate files depending
	  on the type of C++ class the code relates to.

2000-11-16  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added code for standard Get/Set methods for operations.
	  Eventually this functionality will be moved into getattr
	  and setattr methods.

	* Added code for a Thing object which wrappers a C++ Thing * pointer.

2000-11-15  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Cleaned up problems with mode in move operations, and dealt
	  with stopping when velocity is set to zero.

2000-11-15  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed silly typo in movement code which meant that velocity was
	  not being used to calculate direction when only velocity is
	  specified.

2000-11-14  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added more Python/C API code. Basic framework now exists for
	  creating and manipulating Operations in the python code.

2000-11-10  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed setting location of newly created objects

	* Fixed setting weight as float on default Thing.

	* Added more support for mode and face in movement code.

	* Cleaned up the debugging output code.

	* Fixed looking, and added support for contains attribute

2000-11-10  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added more refno capabilities

	* Fixed some operation instantiation bugs

	* Added full support for creator entity. Admin client can now populate
	  the world with items and NPCs.

2000-11-09  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Removed two conflicting "WorldRouter * world" members from
	  class hierarchy.

	* Added setting of refno to operations, so client can tell
	  what they apply to.

	* Sorted out initialisation of python path.

	* Added loading of admin account, allowing admin client to communicate.

	* Made sure all attributes of created objects are set, so that
	  character gender works.

	* Added face attribute to Thing, to indicate what direction it faces!

	* Modified error operation so it complies with traditional format

2000-11-08  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added enough python interface to load a simple module, get the
	  class from it, instantiate that class, and call operation methods
	  from it. Still to be implented is the Atlas-C++ API for embedded
	  python.

2000-11-07  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed movement code so that id of object to be moved is correctly
	  present. uclient now sees movement. Woohoo!

2000-11-07  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* More movement fixed. uclient movement now works within the server,
	  but uclient does not like the responses it gets.

	* Fixed a bug which caused a segfault when movement stops.

2000-11-05  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* More movement fixes, including lots of clearer debugging output.
	  Still does not seem to correctly handle moves which don't 
	  specify direction.

2000-11-04  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* More movement fixes. I now get almost expected behavoir

	* Switched over to new Atlas location spec now that this is supported
	  by uclient.

2000-11-04  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Improved debugging output in movement code, and fixed some critical
	  bugs which meant that movement was not working correctly.

2000-11-02  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Modified legacy location code so it is now activated by a single
	  #define

2000-11-02  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added temporary support for old Atlas style location object
	  in entity to move operations. This allows uclient to work for
	  now until it moves over to the latest Atlas spec.

2000-11-02  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed some attributes of in-game object

	* Added temporary support for old style Atlas location so we still
	  work with uclient.

2000-11-02  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed it so that server does not exit if client negotiation fails.

	* Cleaned up detection of disconnected client

	* Re-wrote thing factory so it is now a static object instance rather
	  that a static method, and added the beginnings of support for
	  python "Thing" classes.

2000-10-31  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Modified stream code to get rid of seeking-on socket problem

2000-10-24  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added handling of client disconnection

2000-10-24  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed movement code which now works.

	* Fixed set operation, and added attributes map to Thing.

	* Started adding Python interface code.

	* Starting changelog from initial attempt to port cyphesis into C++.
