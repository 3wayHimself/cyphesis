2001-05-14  Al Riddoch  <alriddoch@zepler.org>

	* server/server.cpp: Added several options to the config file to
	  make server operation customisable. Added comments.

	* server/server.cpp, server/CommServer.h: Changed methods which
	  return int to returning bool if they are success/faul results.

	* server/WorldRouter.cpp: Removed some unused debugging code.
	  Optimised heavily used code. Changed error message on
	  sending to a non-existant entity so that it is no longer
	  reported as a critical error.

	* server/ServerRouting.h, server/Connection.h,
	  server/Connection_methods.h: inlined simple methods.

	* server/Connection.cpp: Optimised frequently used code.

	* server/CommClient.h: Simplified read method so it no
	  longer checks status redundantly.

	* common/BaseEntity.h, rulesets/Thing.h, rulesets/Entity.h: Added
	  comments explaing purpose of classes.

	* rulesets/Thing.cpp: Added detailed comments, and removed unnecessary
	  initialisation of some attributes.

	* rulesets/PythonMindScript.cpp: Removed redundant NULL check.

	* rulesets/MemMap.h: Added inlines for inlined methods.

	* rulesets/Entity.h, common/BaseEntity.h: Moved seq from BaseEntity
	  to Entity as it does not apply to Out Of Game objects.

	* rulesets/Entity.cpp: Added in stamp/seq attribute. Nade name
	  attribute optional.

	* rulesets/Character.cpp: Simplified some op handling code
	  to make it more readable and hopefully faster. Added comments
	  explaining movement, removed unused commented out code, and
	  removed some unnecessary debugging code.

	* common/operations.h: Explanatory comments.

	* common/*.h: Re-wrote extended operations to fit in
	  with Atlas-C++ 0.4.2 conventions.

	* common/log.*: Commented out unused logging code.

2001-05-06  Al Riddoch  <alriddoch@zepler.org>

	* server/Admin.cpp: Modified database loading code so it picks up
	  the object parent correctly instead of looking for a type attribute.

	* server/server.cpp: Made metaserver address a config file option.

	* common/database.h: Put in compiler error if code is built without
	  database support.

	* common/BaseEntity.cpp: Switched over to using stamp instead of seq
	  as the attribute used to check whether entity needs to be
	  updated.

	* Used action operation throughout python code to denote performing
	  an action, as differentiated from setting mode.

	* rulesets/skills: Added the beginnings of a skill system.

	* example/client: Fixed Atlas-C++ 0.5 example client so it
	  compiles again.

	* README: Wrote a README file

2001-05-04  Al Riddoch  <alriddoch@zepler.org>

	* Added handling of action operations to operation handling core.

2001-05-03  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/Py_Object.cpp: Added support for complex attributes
	  for Entities used as argument for operations.

2001-04-20  Al Riddoch  <alriddoch@zepler.org>

	* configure.in: Added a bit of support for later version of the Python
	  interpretter to configure script.

2001-04-20  Al Riddoch  <alriddoch@zepler.org>

	* common/database.*, common/persistance.*: Added new database tables
	  for mind data, and server data.

	* common/persistance.*, server/Admin.cpp: Implemented saving and
	  loading of mind state to mind table. Initially only saving the
	  contents of the memory map is supported.

	* rulesets/MemMap.h: Added asObject() method to convert contents
	  into Atlas representation.

	* rulesets/BaseMind.*: Added handling of load and save operations
	  which in conjunction with the Python mind component build an
	  Atlas representation of the mind state.

2001-04-19  Al Riddoch  <alriddoch@zepler.org>

	* common/persistance.cpp, server/Admin.cpp: Modified database loading
	  of world entities so that it is done hierarchically starting
	  with the top level container.

	* rulesets/Entity.cpp, rulesets/Character.cpp: Added some needed
	  attributes to those added to Atlas Objects when converting in
	  game entities.

2001-04-17  Al Riddoch  <alriddoch@zepler.org>

	* Changed many return statements to match convention.

	* rulesets/Thing.cpp: Tweaked ranges code in movement to cut
	  down CPU time used.

	* common/BaseEntity.cpp: Re-ordered opEnumerate so that most
	  frequently used ops are detected soonest.

	* modules/WorldTime.h/.cpp: Moved WorldTime to modules directory.

2001-04-16  Al Riddoch  <alriddoch@zepler.org>

	* Substantial re-work of object model. Moved many attributes out
	  of BaseEntity class. Changed WoldRouter so it now handles
	  objects in terms of Entity, rather than BaseEntity.

	* Code cleanups, including removing reduntant includes, and
	  getting rid of C style comments.

	* Fixed the way attributes are handled in Set operations and
	  when merging from an Atlas::Message::Object. This fixed
	  problem with setting gender of characters.

	* rulesets/Pedestrian.*, rulesets/Movement.*: Re-named
	  Movement variables to make them clearer. Added in
	  separate handling for collisions from moving to
	  target position. Modified collision handling so
	  objects can slide next to each other.

	* rulesets/Thing.cpp, rulesets/Character.cpp: Cleaned up and
	  rationalised movement code. Much shorter, faster and
	  more compact than before.

	* Made better use of iterators throughout, eliminating unnecessary
	  lookups, and copying of data.

	* Moved all virtual functions out of header files, making
	  less work for the linker.

	* Made more use of const references to avoid the need to copy
	  data before being able to inspect it.

2001-04-12  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.*: Changed addToObject to take reference
	  instead of pointer.

	* physics/Vector3D.h: Re-ordered functions to allow correct inlining.
	  Changed member names to correct convention.

	* rulesets/MemMap.cpp,rulesets/MemMap_methods.h: Re-ordered function
	  to allow inlining, and moved non-inlinable functions into .cpp file.

	* Changed new operation initialisation to be done at construction
	  time instead of imediatly after construction for performance
	  reasons.

	* server/WorldTime.*: Modified member names for convention, and
	  moved non-inlineable function to .cpp file.

2001-04-11  Al Riddoch  <alriddoch@zepler.org>

	* common/WorldInfo.*: Removed WorldInfo class, a hangup from
	  the python Atlas implementation.

2001-04-11  Al Riddoch  <alriddoch@zepler.org>

	* Re-wrote class headers files so that all class members now
	  begin with a lower case letter and do not contain _.

	* Fixed retrieval of Account from database so that the Account
	  is now correctly referenced in the server object.

	* common/types.h: Changed type name to make them clearer.

	* rulesets/Character.h: Moved MovementInfo into its own class
	  file, and made it a base class, with a Pedestrian super class.
	  This allows different types of movement handling classes
	  to be used to handle things that move differently.

2001-04-10  Al Riddoch  <alriddoch@zepler.org>

	* Complete re-write of python script interface to allow other
	  script types to be cleanly dropped in.

	* Re-work on server and communication related classes to use
	  references where they are apropriate. Code is now much more
	  robust.

	* Huge cleanup of header files removing redundant includes.

	* server/WorldRouter.h: Removed is_object_deleted because it
	  is broken and not used.

	* server/Connection.h: Removed unused disconnect() methods.

	* rulesets/Entity.*: Added new in game base class from which
	  all mind and object classes are derived. This removes
	  clutter of Thing class from mind classes.

	* aiclient/*: Progress with creating AI client for mind handling.

	* common/globals.*: Moved some globals out of server specific files.

	* rulesets/Makefile.am: Separated rulesets code into 3 almost stand
	  alone packages; entities, mind and python interface code.

2001-04-05  Al Riddoch  <alriddoch@zepler.org>

	* common/BaseEntity.h: Moved many of the extra parts of this file
	  into individual files for each bit.

	* aiclient/*: Added client mode cyphesis for handling AI in another
	  server. Not yet operational.

	* */*: Moved large and virtual functions out of headers to reduce
	  multiple instance problems, keep the binary size down, and speed
	  up compilation.

	* server/Admin.h/cpp: Added Get operation handling, thus dividing
	  admin commands into two classes, one which does not alter
	  the state of the server, the other which does. Added query
	  command which allows admin client to retrive arbitrary objects
	  from server id dictionary.

2001-04-02  Al Riddoch  <alriddoch@zepler.org>

	* rulesets/acorn/world/objects/animals/Deer.py, acorn.vconf: Added
	  deer, with same basic code as pig.

	* server/server.cpp: Pass on objects which are not know by the
	  Atlas::Objects::Decoder straight to the operation handler.

	* server/Admin.*: Re-structured the way commands are handled from
	  admin client, so that apropriate operations are used instead of
	  always using Set.

	* server/Admin.cpp: Added saving world state to the database.

	* tools/cycmd.cpp: Updated to use the new admin command semantics.
	  Added save command.

	* common/persistance.*: Added interface for saving world status.

	* common/database.*: Added interface for deleting contents of database.

2001-03-30  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* tools/cycmd.cpp: Added support for interactive mode.

	* server/Admin.cpp: Fixed returning of info op from database load
	  message, and counting of objects loaded from database.

	* configure.in: Added readline check for cycmd.

2001-03-29  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* tools/cyisoload.cpp: Complete functionality for loadin iso map
	  into world database.

	* example/client/CyphesisClient.cpp: Fixed ListType usage in example
	  client.

2001-03-28  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* tools/cyisoload.cpp: Added tool which loads an iso format map into
	  the server database.

	* configure.in: Added check for coal (0.2) which is used in map
	  loader tool.

	* common/database.cc: Modified database initialisation functions
	  so that whether or not the database should be created can be
	  specified. Added separate function for decoding a database
	  object into an Atlas::Message::Object. Fix to the way objects
	  are added to the database which solves some corruption problems.

	* common/database.*: Added database iterator class that can be
	  used to iterate over the database.

	* server/Admin.cpp: Added handler for admin load command, which
	  loads world state from database.

	* server/WorldRouter.*: Tweak to allow objects added to world
	  to have pre-defined id.

2001-03-26  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* common/persistance.*: Re-designed persistance code is it uses
	  a database subclass rather than implementing the databse code
	  itself.

	* common/database.*: Added generic class for accessing database,
	  which can be used from any program.

	* tools/cydbload.cpp: Added simple tool to load objects into the
	  world database from a flat map file.

	* basic.vconf: Shifted houses over to using the structure base class.

2001-03-21  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* physics/Vector3D.h: Changed boundary condition of inBox() from
	  when part of entity leaves box to when the whole entity leaves the
	  box.

	* basic.vconf: Make tent use the structure base class.

	* client/define_world.py: Add bounding box to tent.

	* tools/cycmd.cpp: Added password entry.

	* server/Admin.cpp: Added "stat" admin command, to get server
	  details.

	* server/CommClient.h: Fixed include dependencies.

	* common/persistance.cpp: Added findAccount() method for systems
	  without db3.

	* rulesets/Thing.cpp: Added sending Apperance and Disappearance
	  operations to static entities when another entity moves out
	  of sight.

	* rulesets/Character.cpp: Added check to make sure an entity does
	  not collide with itself.

	* rulesets/Thing.cpp: Added check to make sure entity does not move
	  inside itself.

	* rulesets/Py_Location.cpp: Modified python location.copy() method
	  so that only the position and velocity is copied. This should 
	  bounding boxes getting set on things which should not have them.

	* rulesets/Character.cpp: Added return statement to movement
	  handling, so move ops without arguments are not handled.

2001-03-20  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* physics/Vector3D.h: Detect leaving time of bounding box, even if
	  entity is not yet in it.

	* modules/Location.h, modules/Location.cpp: Added get_xyz() to
	  find absolute coordinates.

	* modules/Location.h: Added true location based range checking.

	* servers/WorldRouter.cpp: Implemented new location based range
	  checking so that operations that take place inside buildings are
	  range checked properly.

	* servers/WorldRouter.cpp: Re-wrote id generation code to be a bit
	  more robust.

2001-03-19  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* physics/Vector3D.h: Corrected variable name convention error in
	  inTime() function.

	* rulesets/Character.cpp: Detect what if entity has already left
	  refs bounding box.

	* basic.vconf: Made sty use the Structure base class.

2001-03-19  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* modules/Location.h, physics/Vector3D.h: Added collision checking
	  functions to work out when an entity inside a box will hit the
	  outside.

	* rulesets/Character.cpp: Added check in collision code to see when
	  entity will leave the bouding box of its current parent.

2001-03-18  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Modified database code so that entries have the correct begin
	  and end encodings, which is <atlas>..</atlas> in the case of
	  XML-like codec.

	* modules/Location.h: Added a flag which indicates whether the
	  bounding box of an entity is solid. If it is not solid, then
	  the entities contents much be checked for collisions rather
	  than the entity itself.

	* rulesets/Character.h: Added target_ref attribute to MovementInfo
	  as a means to track character movement between entities.

	* rulsets/Character.cpp: Modified collision code to handle
	  detecting of collisions with non-solid objects, and handling
	  movement when characters moves into a non-solid object but
	  does not collide with it.

	* rulesets/Structure.h, StructFactory.*: Added base class for 
	  buildings and other structure, which are not solid, and the
	  character can move in and out of freely.

	* server/server.cpp: Made metaserver functionality optional, and
	  added a config option to the config file.

2001-03-16  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* tools/cycmd.cpp: Added functionality to allow commands to be
	  sent to the admin account on the server.

	* server/WorldRouter.cpp: Removed mechanism for shutting down server
	  after a fixed run period.

	* server/Admin.*: Added reception of Set operation by admin account
`	  which contain commands from an admin client. Implemented shutdown
	  command, which sets a flag indicating server shutdown should start.

	* server/server.cpp: Added output indicating that shutdown is taking
	  place, to make it clear that it is not a crash.

2001-03-16  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* watchdog/*.c: Corrected C++ style comments in c code.

	* */*: Fixed mistake in copyright statement.

	* tools/cypasswd.cpp: Fixed usage message.

	* tools/cycmd.cpp: Added tools for sending administrative commands
	  to server.

	* server/server.cpp: Send terminate instruction to metaserver on
	  server shutdown.

2001-03-15  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* server/server.cpp: Increased time between pings to metaserver
	  to 5 minutes instead of 5 seconds.

	* common/persistance.*: Implemented de-serialisation of database
	  objects, and added the necessary code for pulling accounts out
	  of the database.

	* common/sstream.*: Added an implementation of stringstream which
	  is the preferred ANSI form of strstream, but is missing from
	  the GNU std C++ library.

	* configure.in: Added check for system sstream.h, which falls
	  back to using version included.

	* server/Connection.cpp: Check for account in database when
	  user tries to create new account.

	* tools/cypasswd.cpp: Use stringstream instead of strstream.

2001-03-15  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* common/persistance.*: Added restricted mode set by config file,
	  which prevents users from being able to create accounts.

	* server/ServerRouting.cpp: Added restricted flag to the
	  server Object passed to client as result of a Get operation, so
	  the client can report it to the user.

	* tools/cypasswd.cpp: Added tool to administrate password database
	  table.

	* server/server.*: Added exit flag to ensure that of exit is requested
	  database is shutdown properlly.

	* server/WorldRouter.cpp: Maintenance shutdown is now done cleanly.

	* server/Connection.cpp: Added code to handle accounts using the
	  persistance system. Accounts would now be handled by the
	  database if the persistance code was complete.

	* common/persistance.*: More work on database code.

2001-03-14  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* common/persistance.*: More progress on database persistance code.

2001-03-14  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* *: Removed use of "using namespace ..." throughout.

	* modules/Location.h: Fixed error in inRange() and finally got rid
	  of the Compiler warning.

	* rulesets/Food.cpp: Fleshed out the cooking code, including how
	  food burns when it is overcooked.

	* rulesets/Stackable.cpp: Implemented divide.

	* common/persistance.*: Added the beginnings of a database backend
	  using the Berkeley db library.

	* server/Account.cpp: Modified addObject, because the attrivutes
	  added by BaseEntity::addObject are not important to accounts.

2001-03-09  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* rulesets/EntityFactory.cpp: Removed ThingShape.h
	  which was unused, and thus removed dependancy on SOLID.

2001-03-09  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* rulesets/Stackable.cpp: Fixed Stackable code so it now compiles.

2001-03-05  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added Fire operation handling to Thing class, so that any entity
	  with a burn_speed attribute will burn.

	* Added Food C++ base class, which implements cooking.

	* Altered the semantics of the Eat/Fire/Nourish operations so
	  multiple arguments are no longer required. from is used to
	  determine the other entity involved.

	* Added the beginnings of an astronomy system, but not yet used
	  anywhere.

	* Added appearance handling to BaseMind and Memory.

	* Added sequence no to all entities, which is incremented each time
	  a move or set operation is received. sequence no "seq" is included
	  in args of Appearance operations.

	* Moved functionality from Animal python base class into Character
	  C++ base class. This much improves the performance of modelling
	  animals, and means that player characters, and NPCs get hungry and
	  need to eat. Reduced the speed at which animals consume energy
	  so they don't starve quite as quickly.

	* Added collision prediction functions that handle both entities
	  having velocity.

	* Added combine functionality to Stackable. Divide comes next.

2001-03-01  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* rulesets/Py_Location.cpp: Added bbox and bmedian attributes of
	  location object to python wrappers.

	* rulesets/Character.cpp: Added initialisation of bounding box
	  median for characters.

	* modules/DateTime.*: Added configurability to date so that
	  each period of time has definable number of divisions. Default
	  is as per real world calendar restricted to 30 day months.

2001-02-27  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* server/CommServer.h, server/server.cpp: Added metaserver code
	  to network classes.

	* server/CommServer.h, server/WorldRouter.h, server/ServerRouting.cpp:
	  Added fields to server entity for number of players and uptime
	  in seconds.

	* Started implementation of WorldTime class for processing of calendric
	  time.

2001-02-26  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Re-wrote the way creating various types of in-game objects is
	  handled to allow for easier adding of more classes.

2001-02-25  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Changed oplist to use std::vector. Recoded and re-optimised use
	  of oplist to take advantage of vector's best performance.

	* Modified OP_SWITCH macros to improve speed, and made it inlinable.

	* Cleaned up python interface code to improve compile and link time.

	* Moved custom operation definitions in one header file per class
	  to improve modularity and compile time.

	* Modified boundingbox handling so it now uses size and median.

	* Added collision check and inbox member function to Vector3D class.

	* Added collision prediction and checking to Location and Vector3D
	  classes.

	* Added collision prediction into MovementInfo class.

	* Modified Thing::operator[] so that static attributes can be handled
	  and added Thing::set() which must be used to modify attributes.

	* Added collision resolution so characters can no longer walk through
	  each other.

	* Moved weight attribute to being static attribute of Thing, so it
	  can be much more easily handled in movement code.

2001-02-19  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added handling of Get operation from client before login, to
	  determine game type, status and other info.

2001-02-18  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Commiting tweak to guards patrol route which was included in
	  Acorn 0.3.

2001-02-17  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Implemented beginnings of ranges code:

	* modules/Location.h: Added inRange() method which can be used
	  to check whether location, including bounding box, is within
	  given range of a given location. Changed parent member
	  variable to ref to fit with Atlas spec. Changed all code
	  related to using the term ref instead of parent so
	  that there is no confusion between ref for coordinates
	  and parent in the Atlas hierarchy.

	* rulesets/Thing.cpp: Added code to move operation to check
	  what entities come into and out of range when entity moves.
	  Appearance and Disappearance operations are sent to the
	  moving entity with a list of the relevant entities as their
	  argument.

	* server/WorldRouter.h/cpp: Added overloaded Look operation
	  handler which applies range constraints to the contains
	  attribute before returning.

	* common/BaseEntity.h, rulesets/Thing.h, rulesets/Character.h:
	  Added handling of Appearance and Disappearance operations.

	* server/WorldRouter.cpp: Added primitive check to broadcast
	  operations to avoid delivering broadcast operation to
	  entities out of range.

	* Removed world.get_object() use from server python code, as
	  its use is not required.

	* server/WorldRouter.h: Implemented fetching of floating point time
	  from the OS so movement is much smoother.

2001-02-07  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* watchdog/*: Watchdog and control program now work just fine,
	  though it is not always easy to tell whether the acorn script
	  is working or not.

2001-02-05  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* watchdog/*: Fleshed out watchdog functionality, which is now working
	  and in long term testing. Added control script which handles sending
	  signals to the daemon in a more friendly way.

2001-02-05  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added watchdog daemon which handles maintaining a running server
	  automatically. Work in progress.

2001-02-03  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* all files: Re-worked the way debugging is handled to that it no
	  longer gives warnings.

2001-01-26  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* all file: Added copyright statement

2001-01-25  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* rulesets/Character.cpp: Removed debuggin output.

	* client/define_world.py: Modified entity positions for use with new
	  agrilan.map

2001-01-24  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* server/Makefile.am: Added libstdc++ to static libraries list.

2001-01-24  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added THANKS file.

	* Added rules to top level Makefile to install some docs.

2001-01-24  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Throughout entire code base:
	  Removed all obsolete code and commented out code relating to porting
	  from python. Removed interim data types bad_type and None. Added
	  const throughout where apropriate. Change various flags to bool
	  type. Removed unused members.

	* Added TODO list.

2001-01-23  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* rulesets/Thing.cpp: Removed default description.

2001-01-23  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* configure.in: Re-ordered lib checks so that python gets libdl
	  and pthread.

2001-01-23  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* rulesets/Character.cpp: Set character mode to "touching" when a
	  touch operation is created by the mind.

2001-01-23  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Modified build system so a static binary can be built.

	* server/WorldRouter.cpp: Modified some behavoir on critical errors.
	  Server no longer aborts on criticial errors.

2001-01-20  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* server/Character.cpp: Modified mind2body so that to is not set on
	  look operations from mind.

2001-01-20  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* server/server.cpp: Modified argument processing so that installation
	  directory can be set as a command line argument, and then stored
	  persistantly in users config file.

2001-01-18  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Change default acorn script to be text, and made the alternative
	  acorn graphic.

	* Fixed addition of client scripts to distribution.

2001-01-14  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added client python code to RPM spec.

2001-01-13  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Copied client code across from cyphesis, and created infrastructure
	  so it can be cleanly installed and run with the rest of cyphesis.

2001-01-06  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added code so that error operations are reported on standard error.

	* Added re-connection of client connection object to character when
	  a player logs in and wants to use the same character again.

2001-01-04  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed pig behavoir bug so location coordinates are now not added
	  to object if they have not been set.

	* Added code to example client so it now reads characters list 
	  when it logs in.

	* Removed support for obsolete old-atlas locations.

	* Changed behavoir on unexpected error from client socket, so
	  it no longer causes an abort.

2001-01-02  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed pig mind so it is now better able to detect "Sowee"

	* Removed map from Thing, and put it into basmind. Re-wrote
	  script_Operation for thing so it now looks things up in world
	  dictionary rather than in local map. This removes a memory leak.

2000-12-27  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed inheritance bug in BaseMind::operation()

	* Tweaked the way Look operations are handled when sent from mind, so
	  an argument is not required if to is set.

	* Made some performance enhancements.

2000-12-26  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Implemented nourish operation.

2000-12-25  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Modifed move_me() goal so it sets face direction.

	* Fixed memory leak in MemMap.

	* Implemented fully deleting of entities.

2000-12-23  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Cleaned up and tweaked python scripts so eating acorns now works.

	* Implemented hooks in MemMap for python scripts.

2000-12-17  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Cleaned up auto-* stuff, and created spec file for RPMs.

2000-12-16  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed error in Thing::operator[] which meant attributes could not
	  be accessed, and certain move operations caused an abort.

	* Removed attributes from python object which don't have attributes.

	* Added Py*_Check() macros, and used them for easier code reading.

	* Added snow attribute to weather.

	* Commented out code which makes server exit(0) after a certain time.

2000-12-16  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Removed unecessary type checks

2000-12-16  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Modifed initialisation of Vector3D from python to be less error
	  prone, and more complete.

2000-12-16  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Another bit of code to prevent code from aborting if weight is
	  not a float.

2000-12-15  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added in exception handler to catch if weight is not a float.

	* Tweaked SkeletonMind so it now works.

2000-12-14  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Modifed python interface Operation() function so that it accepts
	  strings for to and from as well as entities.

	* Adapt python Operation() function so operations can be given as
	  arguments.

	* Add Eat, Chop, Cut and Fire operations into the main operation
	  handling functions.

	* Added code so that intelligent entities can use python mind classes
	  other than NPCMind, and added config section for specifying which.

	* Tweaked python mind code for Pig, Wolf and Skeleton so they work.

2000-12-13  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Set up rulesets processing so that everything is handled dynamically
	  from config files. Global ruleset should indicate top level ruleset
	  which can depend on a list of other rulesets.

	* Sorted out installation directories. Cyphesis will now need to be
	  installed before it can be run.

	* Cleaned up a load more python scripts for more Acorn stuff.

	* Added getting x y and z from Vector3D.

	* Made acorn the default ruleset.
	
2000-12-12  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Started work on auto* files to make cyphesis install correctly.

2000-12-12  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Massive code cleaning efforts, removing dead code, trimming reviewing
	  and shifting code around to optimise it.

	* Heavy use of inlining to improve code performance.

	* Added global exception handler to catch exceptions while processing
	  operations.

2000-12-11  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Removed lots of extraneous debugging output, and turned the rest
	  off using debug flags.

	* Added halt_time, which is number of seconds server should run before
	  it exits.

	* Cleaned a bunch if the remaining memory leaks.

	* Cleaned up the way time is handled.

	* More tweaks to Python code and API to get Acorn working.

	* Inlined some methods into the class definitions, for performance.

	* Updated movement code to sort out setting mode properlly, and
	  deal with stuttering NPC movement.

2000-12-08  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Major attack on the more fiddly memory leaks. The only noticable
	  leak now is copied Location objects in the python interface code.

	* Added hook into the time code so the server can be set to exit
	  after a given number of seconds. This is required for LeakTracer
	  to generate its report.

2000-12-07  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed so that we are no longer sending broadcast look ops, which
	  clag the server up and are not correct behavoir.

	* Minor fixes/python tweaks.

	* Slight change to ordering of ops in the queue, so more recently
	  created ops with the same time stamp come of the queue after
	  older ops.

	* Implemented contains attribute so newly created objects are added
	  to their parents contains list, and when objects are move, they are
	  transfered from old parents to new parents contains list.

2000-12-07  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added handling for removing connections.

	* Removed some unused code.

	* Tweaked some python scripts so they import correctly.

	* Added in_game flag to BaseEntity so it is possible to tell
	  if an object is in game.

	* Increased the number of operations handled by Message()

	* Added handling for initialisation of location.parent using me
	  in mind code.

	* Added is_object_delete() functionality to python interface to world
	  object.

	* Added handling for converting Tuple into Message::Object, and then
	  ensured that non-basic python types don't get stored as attributes
	  of a Message::Object.

2000-12-06  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixes to worlds object list so it now contains world.

	* More python code tweaks to work with modifications to interface.

	* Modified code which gets Thing attributes from Message::Object
	  so it can use any object dictionary to look up parent object.

	* Fixed handling of Thing's static type attribute.

	* Modified creation of operations from python to eliminate
	  some strange segfaults.

	* Re-wrote and fixed Entity creation from python.

	* Implemented dictlist.remove_value for removing things from inventory.

	* Implemented Vector3D arithmetic and methods from python.

	* Implemented as_entity() and get_xyz() methods for Thing from
	  python.

	* Commented out deletion of operations from python OperationObject
	  dealloc() function as it was causing segfaults. There is a problem
	  somewhere with ownership not being cleared, but I can't find it.

	* Implemented conversion of Python Operation and Oplist objects
	  to Message::Object.

	* Fixed MemMap so that attributes of Things are accuratly updated.

	* Fixed it so that look ops from mind are broadcast rather than sent
	  to world. This may have to be reverted.

	* Tweaked autoconf to make it cleaner and work better. Still needs
	  alot of work.

2000-12-05  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added new common namespace to prevent collision with math function
	  log.

	* Added in lots of deletes to sort memory leaks.

	* More python tweaks.

	* Implemented status attributes of thing.

	* Re-wrote some code which needlessly creates objects in the
	  free store.

2000-12-04  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Started working on sorting out memory leaks.

	* Implemented python function to deal with not being able to check
	  type of python objects implemented in C.

	* Added method to thing for extracting location data from a
	  Message::Object

	* More work on python references to improve leakage.

	* Added flag so that python Operation object can own
	  the operation they point to, and thus delete it in dealloc().

	* Implemented find_by_location() and find_by_type() as required in
	  MemMap, and corresponding python interface.

	* Put in temporary work around to deal with the fact that a mind
	  does not know its name. Currently the mind is not able to
	  discover any of its bodies attributes, and I am not sure how
	  to solve this.

	* Fixed Location and Vector3D so they use operator bool() to detect
	  whether they are set.

	* Fixed bugs in getting parent from Location in python which caused
	  segfaults.

	* Imported all the basic ruleset entity python scripts.

2000-12-03  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Corrected broadcasting of non-perception operations to
	  non-perceptive entities.

	* Sorted out removing spaces from id strings.

	* Implemented Entity arguments to Operaiton creation in python.

2000-12-03  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Debugged set_kw() and confirmed that it does work.

	* Added python API support for self.world.

2000-12-03  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added support for varconf config files.

	* Used config file to list enitity types and their python class files.

	* Cleaned up reference counting in Python API related C++ code.
	  References should all now be handled correctly.

	* Added support for adding None to Operation and Oplist.

2000-11-30  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added dictfunc functionality to Python interface.

	* Added creation of Entities for use in Operation arguments.

	* Added initialisation of Vector3D through constructor
	  arguments in python.

	* Added append() method to python interface for Oplist.

	* Added support for coercion of operation into addable form.

2000-11-30  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added more required functionality to base python Thing class
	  so that operation manipulations can now work.

	* Implemented getting of object name to python/C API, and added
	  methods for differentiating between op and object.

	* Implemented on-the-fly de-coding of operations, from operation
	  arguuments in python/C API. This will be obsolete once Atlas-C++
	  does full decode later.

	* Implemented get and setattr for Message Object from
	  python. Attributes are stored both in Object, and in supplementary
	  python dictionary for non Atlas compatable attributes.

	* Implemented copy() method for Python/C Location class.

2000-11-29  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added in debug function for python code.

	* Fixed coersion of non-oplist types for addition.

	* Implemented getting attributes from Message::Object maps
	  from python.

2000-11-29  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added support for decoding Sound operations in BaseMind.

	* Added Talk operation throughout operation handling code.

	* Added basic WorldTime class together with python wrapper.
	  Can fill in functionality as required.

	* Put debugging back in cos I still need it.

2000-11-26  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added in Python interface code to deal with manipulation of operation
	  time.

	* Made basic_tick a float, because it should be.

	* Imported all the rulesets python code from python cyphesis.

2000-11-26  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed and changes to code so that operations created in python
	  mind code are delivered as required.

2000-11-24  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Disabled some of the excessive debugging.

	* Implemented getting and setting of to and from in operations
	  using map to lookup what the mind knows about the entities
	  in question. This involved adding an extra field to the
	  RootOperationObject structure to store to and from entities.

	* Sorted out base_init() python member so __init__() of all
	  classes in inheritance tree are called.

	* Started work on set_kw() replacement.

	* Added python module finding mechanism which is required to deal
	  with rulesets correctly. I am not convinced this works.

2000-11-23  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added oplist python interface, and implemented returning of
	  operations from python code.

2000-11-22  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Moved character mode calculation into MovementInfo class.

	* Added new MovementInfo method which creates a movement op to
	  change the rotation of a character when no other update is needed.

2000-11-22  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Filled out Location python interface so it is now fully functional.

	* Inlined Vector3D class for performance.

2000-11-21  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Bug fix that meant that updates to MemMap object caused segfault.

2000-11-21  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Filled out the python common.const module with all its values.

	* Added code required to create an operation from with python.

	* Modified the Thing python interface so that python objects
	  that Atlas doesn't want to know about are stored in a normal
	  attributes list.

2000-11-20  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added some more python interface classes. There is now enough code
	  here to start importing real mind code from cyphesis-py.

2000-11-19  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Two small bug fixes. One stops a crash when the client tries
	  to move an object which does not exist, the other removes an
	  unnecessary pointer check which stopped the admin client from
	  working.

2000-11-19  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Filled in BaseMind functionality so it now keeps memory map up		  to date. Added necessary features to Python/C++ interface
	  for sight operations to be passed onto python code after processing
	  in C++. Added new type of op switch to deal with operations
	  in the argument of a sight/sound operation.

	* Added features to Opeation python interface for args to be
	  accessed as if operation is a sequence object.

	* Implemented python API for C++ memory map class.

	* Added utility function which uses code borrowed from Atlas-C++
	  to convert a Message::Object into something from the Objects
	  code.

2000-11-18  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Moved some of BaseMind functionality in a python class and
	  added the necessary interface code.

	* Initial port of MemMap class from python to C++, together with
	  python interface. Hopefully maintenance of MemMap can be kept
	  in C++ for speed if possible.

2000-11-16  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Sorted out error handling from python code, and no-longer treat
	  no method as an error.

	* Got python interface code to the point that python classes can now
	  access the C++ attributes of a Thing.

	* Split the python interface code into separate files depending
	  on the type of C++ class the code relates to.

2000-11-16  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added code for standard Get/Set methods for operations.
	  Eventually this functionality will be moved into getattr
	  and setattr methods.

	* Added code for a Thing object which wrappers a C++ Thing * pointer.

2000-11-15  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Cleaned up problems with mode in move operations, and dealt
	  with stopping when velocity is set to zero.

2000-11-15  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed silly typo in movement code which meant that velocity was
	  not being used to calculate direction when only velocity is
	  specified.

2000-11-14  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added more Python/C API code. Basic framework now exists for
	  creating and manipulating Operations in the python code.

2000-11-10  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed setting location of newly created objects

	* Fixed setting weight as float on default Thing.

	* Added more support for mode and face in movement code.

	* Cleaned up the debugging output code.

	* Fixed looking, and added support for contains attribute

2000-11-10  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added more refno capabilities

	* Fixed some operation instantiation bugs

	* Added full support for creator entity. Admin client can now populate
	  the world with items and NPCs.

2000-11-09  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Removed two conflicting "WorldRouter * world" members from
	  class hierarchy.

	* Added setting of refno to operations, so client can tell
	  what they apply to.

	* Sorted out initialisation of python path.

	* Added loading of admin account, allowing admin client to communicate.

	* Made sure all attributes of created objects are set, so that
	  character gender works.

	* Added face attribute to Thing, to indicate what direction it faces!

	* Modified error operation so it complies with traditional format

2000-11-08  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added enough python interface to load a simple module, get the
	  class from it, instantiate that class, and call operation methods
	  from it. Still to be implented is the Atlas-C++ API for embedded
	  python.

2000-11-07  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed movement code so that id of object to be moved is correctly
	  present. uclient now sees movement. Woohoo!

2000-11-07  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* More movement fixed. uclient movement now works within the server,
	  but uclient does not like the responses it gets.

	* Fixed a bug which caused a segfault when movement stops.

2000-11-05  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* More movement fixes, including lots of clearer debugging output.
	  Still does not seem to correctly handle moves which don't 
	  specify direction.

2000-11-04  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* More movement fixes. I now get almost expected behavoir

	* Switched over to new Atlas location spec now that this is supported
	  by uclient.

2000-11-04  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Improved debugging output in movement code, and fixed some critical
	  bugs which meant that movement was not working correctly.

2000-11-02  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Modified legacy location code so it is now activated by a single
	  #define

2000-11-02  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added temporary support for old Atlas style location object
	  in entity to move operations. This allows uclient to work for
	  now until it moves over to the latest Atlas spec.

2000-11-02  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed some attributes of in-game object

	* Added temporary support for old style Atlas location so we still
	  work with uclient.

2000-11-02  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed it so that server does not exit if client negotiation fails.

	* Cleaned up detection of disconnected client

	* Re-wrote thing factory so it is now a static object instance rather
	  that a static method, and added the beginnings of support for
	  python "Thing" classes.

2000-10-31  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Modified stream code to get rid of seeking-on socket problem

2000-10-24  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Added handling of client disconnection

2000-10-24  Al Riddoch  <ajr@ecs.soton.ac.uk>

	* Fixed movement code which now works.

	* Fixed set operation, and added attributes map to Thing.

	* Started adding Python interface code.

        * Starting changelog from initial attempt to port cyphesis into C++.
